/// This file is auto-generated from the HTML tags metadata.
/// Do not edit this file directly.
/// HTML element bindings
/// Apache-2.0, from https://github.com/Myriad-Dreamin/typ/blob/main/packages/html-bindings-h.typ


/// Creates a `html <html>` element with the given content.
///
/// #link("https://developer.mozilla.org/en-US/docs/Web/HTML/Element/html")[MDN Documentation]
///
/// - manifest (str): The manifest attribute of the `<html>` element.
/// - class (str): The class attribute of the `<html>` element.
/// - id (str): The id attribute of the `<html>` element.
/// - style (str): The style attribute of the `<html>` element.
#let html(body, manifest: none, class: none, id: none, style: none, ..attrs) = {
  assert(attrs.pos().len() == 0, message: "can have only one body")
  let attrs = attrs.named()
  if manifest != none { attrs.insert("manifest", manifest) }
  if class != none { attrs.insert("class", class) }
  if id != none { attrs.insert("id", id) }
  if style != none { attrs.insert("style", style) }
  std.html.elem("html", attrs: attrs, body)
}
/// Creates a `html <head>` element with the given content.
///
/// #link("https://developer.mozilla.org/en-US/docs/Web/HTML/Element/head")[MDN Documentation]
///
/// - class (str): The class attribute of the `<head>` element.
/// - id (str): The id attribute of the `<head>` element.
/// - style (str): The style attribute of the `<head>` element.
#let head(body, class: none, id: none, style: none, ..attrs) = {
  assert(attrs.pos().len() == 0, message: "can have only one body")
  let attrs = attrs.named()
  if class != none { attrs.insert("class", class) }
  if id != none { attrs.insert("id", id) }
  if style != none { attrs.insert("style", style) }
  std.html.elem("head", attrs: attrs, body)
}
/// Creates a `html <title>` element with the given content.
///
/// #link("https://developer.mozilla.org/en-US/docs/Web/HTML/Element/title")[MDN Documentation]
///
/// - class (str): The class attribute of the `<title>` element.
/// - id (str): The id attribute of the `<title>` element.
/// - style (str): The style attribute of the `<title>` element.
#let title(body, class: none, id: none, style: none, ..attrs) = {
  assert(attrs.pos().len() == 0, message: "can have only one body")
  let attrs = attrs.named()
  if class != none { attrs.insert("class", class) }
  if id != none { attrs.insert("id", id) }
  if style != none { attrs.insert("style", style) }
  std.html.elem("title", attrs: attrs, body)
}
/// Creates a `html <base>` element with the given content.
///
/// #link("https://developer.mozilla.org/en-US/docs/Web/HTML/Element/base")[MDN Documentation]
///
/// - href (str): The href attribute of the `<base>` element.
/// - target (str): The target attribute of the `<base>` element.
/// - class (str): The class attribute of the `<base>` element.
/// - id (str): The id attribute of the `<base>` element.
/// - style (str): The style attribute of the `<base>` element.
#let base(body, href: none, target: none, class: none, id: none, style: none, ..attrs) = {
  assert(attrs.pos().len() == 0, message: "can have only one body")
  let attrs = attrs.named()
  if href != none { attrs.insert("href", href) }
  if target != none { attrs.insert("target", target) }
  if class != none { attrs.insert("class", class) }
  if id != none { attrs.insert("id", id) }
  if style != none { attrs.insert("style", style) }
  std.html.elem("base", attrs: attrs, body)
}
/// Creates a `html <link>` element with the given content.
///
/// #link("https://developer.mozilla.org/en-US/docs/Web/HTML/Element/link")[MDN Documentation]
///
/// - href (str): The href attribute of the `<link>` element.
/// - crossorigin (str): The crossorigin attribute of the `<link>` element.
/// - rel (str): The rel attribute of the `<link>` element.
/// - media (str): The media attribute of the `<link>` element.
/// - hreflang (str): The hreflang attribute of the `<link>` element.
/// - type (str): The type attribute of the `<link>` element.
/// - sizes (str): The sizes attribute of the `<link>` element.
/// - class (str): The class attribute of the `<link>` element.
/// - id (str): The id attribute of the `<link>` element.
/// - style (str): The style attribute of the `<link>` element.
#let link(
  body,
  href: none,
  crossorigin: none,
  rel: none,
  media: none,
  hreflang: none,
  type: none,
  sizes: none,
  class: none,
  id: none,
  style: none,
  ..attrs,
) = {
  assert(attrs.pos().len() == 0, message: "can have only one body")
  let attrs = attrs.named()
  if href != none { attrs.insert("href", href) }
  if crossorigin != none { attrs.insert("crossorigin", crossorigin) }
  if rel != none { attrs.insert("rel", rel) }
  if media != none { attrs.insert("media", media) }
  if hreflang != none { attrs.insert("hreflang", hreflang) }
  if type != none { attrs.insert("type", type) }
  if sizes != none { attrs.insert("sizes", sizes) }
  if class != none { attrs.insert("class", class) }
  if id != none { attrs.insert("id", id) }
  if style != none { attrs.insert("style", style) }
  std.html.elem("link", attrs: attrs, body)
}
/// Creates a `html <meta>` element with the given content.
///
/// #link("https://developer.mozilla.org/en-US/docs/Web/HTML/Element/meta")[MDN Documentation]
///
/// - name (str): The name attribute of the `<meta>` element.
/// - http-equiv (str): The http-equiv attribute of the `<meta>` element.
/// - content (str): The content attribute of the `<meta>` element.
/// - charset (str): The charset attribute of the `<meta>` element.
/// - class (str): The class attribute of the `<meta>` element.
/// - id (str): The id attribute of the `<meta>` element.
/// - style (str): The style attribute of the `<meta>` element.
#let meta(
  body,
  name: none,
  http-equiv: none,
  content: none,
  charset: none,
  class: none,
  id: none,
  style: none,
  ..attrs,
) = {
  assert(attrs.pos().len() == 0, message: "can have only one body")
  let attrs = attrs.named()
  if name != none { attrs.insert("name", name) }
  if http-equiv != none { attrs.insert("http-equiv", http-equiv) }
  if content != none { attrs.insert("content", content) }
  if charset != none { attrs.insert("charset", charset) }
  if class != none { attrs.insert("class", class) }
  if id != none { attrs.insert("id", id) }
  if style != none { attrs.insert("style", style) }
  std.html.elem("meta", attrs: attrs, body)
}
/// Creates a `html <style>` element with the given content.
///
/// #link("https://developer.mozilla.org/en-US/docs/Web/HTML/Element/style")[MDN Documentation]
///
/// - media (str): The media attribute of the `<style>` element.
/// - nonce (str): The nonce attribute of the `<style>` element.
/// - type (str): The type attribute of the `<style>` element.
/// - scoped (str): The scoped attribute of the `<style>` element.
/// - class (str): The class attribute of the `<style>` element.
/// - id (str): The id attribute of the `<style>` element.
/// - style (str): The style attribute of the `<style>` element.
#let style(body, media: none, nonce: none, type: none, scoped: none, class: none, id: none, style: none, ..attrs) = {
  assert(attrs.pos().len() == 0, message: "can have only one body")
  let attrs = attrs.named()
  if media != none { attrs.insert("media", media) }
  if nonce != none { attrs.insert("nonce", nonce) }
  if type != none { attrs.insert("type", type) }
  if scoped != none { attrs.insert("scoped", scoped) }
  if class != none { attrs.insert("class", class) }
  if id != none { attrs.insert("id", id) }
  if style != none { attrs.insert("style", style) }
  std.html.elem("style", attrs: attrs, body)
}
/// Creates a `html <body>` element with the given content.
///
/// #link("https://developer.mozilla.org/en-US/docs/Web/HTML/Element/body")[MDN Documentation]
///
/// - onafterprint (str): The onafterprint attribute of the `<body>` element.
/// - onbeforeprint (str): The onbeforeprint attribute of the `<body>` element.
/// - onbeforeunload (str): The onbeforeunload attribute of the `<body>` element.
/// - onhashchange (str): The onhashchange attribute of the `<body>` element.
/// - onlanguagechange (str): The onlanguagechange attribute of the `<body>` element.
/// - onmessage (str): The onmessage attribute of the `<body>` element.
/// - onoffline (str): The onoffline attribute of the `<body>` element.
/// - ononline (str): The ononline attribute of the `<body>` element.
/// - onpagehide (str): The onpagehide attribute of the `<body>` element.
/// - onpageshow (str): The onpageshow attribute of the `<body>` element.
/// - onpopstate (str): The onpopstate attribute of the `<body>` element.
/// - onstorage (str): The onstorage attribute of the `<body>` element.
/// - onunload (str): The onunload attribute of the `<body>` element.
/// - class (str): The class attribute of the `<body>` element.
/// - id (str): The id attribute of the `<body>` element.
/// - style (str): The style attribute of the `<body>` element.
#let body(
  body,
  onafterprint: none,
  onbeforeprint: none,
  onbeforeunload: none,
  onhashchange: none,
  onlanguagechange: none,
  onmessage: none,
  onoffline: none,
  ononline: none,
  onpagehide: none,
  onpageshow: none,
  onpopstate: none,
  onstorage: none,
  onunload: none,
  class: none,
  id: none,
  style: none,
  ..attrs,
) = {
  assert(attrs.pos().len() == 0, message: "can have only one body")
  let attrs = attrs.named()
  if onafterprint != none { attrs.insert("onafterprint", onafterprint) }
  if onbeforeprint != none { attrs.insert("onbeforeprint", onbeforeprint) }
  if onbeforeunload != none { attrs.insert("onbeforeunload", onbeforeunload) }
  if onhashchange != none { attrs.insert("onhashchange", onhashchange) }
  if onlanguagechange != none { attrs.insert("onlanguagechange", onlanguagechange) }
  if onmessage != none { attrs.insert("onmessage", onmessage) }
  if onoffline != none { attrs.insert("onoffline", onoffline) }
  if ononline != none { attrs.insert("ononline", ononline) }
  if onpagehide != none { attrs.insert("onpagehide", onpagehide) }
  if onpageshow != none { attrs.insert("onpageshow", onpageshow) }
  if onpopstate != none { attrs.insert("onpopstate", onpopstate) }
  if onstorage != none { attrs.insert("onstorage", onstorage) }
  if onunload != none { attrs.insert("onunload", onunload) }
  if class != none { attrs.insert("class", class) }
  if id != none { attrs.insert("id", id) }
  if style != none { attrs.insert("style", style) }
  std.html.elem("body", attrs: attrs, body)
}
/// Creates a `html <article>` element with the given content.
///
/// #link("https://developer.mozilla.org/en-US/docs/Web/HTML/Element/article")[MDN Documentation]
///
/// - class (str): The class attribute of the `<article>` element.
/// - id (str): The id attribute of the `<article>` element.
/// - style (str): The style attribute of the `<article>` element.
#let article(body, class: none, id: none, style: none, ..attrs) = {
  assert(attrs.pos().len() == 0, message: "can have only one body")
  let attrs = attrs.named()
  if class != none { attrs.insert("class", class) }
  if id != none { attrs.insert("id", id) }
  if style != none { attrs.insert("style", style) }
  std.html.elem("article", attrs: attrs, body)
}
/// Creates a `html <section>` element with the given content.
///
/// #link("https://developer.mozilla.org/en-US/docs/Web/HTML/Element/section")[MDN Documentation]
///
/// - class (str): The class attribute of the `<section>` element.
/// - id (str): The id attribute of the `<section>` element.
/// - style (str): The style attribute of the `<section>` element.
#let section(body, class: none, id: none, style: none, ..attrs) = {
  assert(attrs.pos().len() == 0, message: "can have only one body")
  let attrs = attrs.named()
  if class != none { attrs.insert("class", class) }
  if id != none { attrs.insert("id", id) }
  if style != none { attrs.insert("style", style) }
  std.html.elem("section", attrs: attrs, body)
}
/// Creates a `html <nav>` element with the given content.
///
/// #link("https://developer.mozilla.org/en-US/docs/Web/HTML/Element/nav")[MDN Documentation]
///
/// - class (str): The class attribute of the `<nav>` element.
/// - id (str): The id attribute of the `<nav>` element.
/// - style (str): The style attribute of the `<nav>` element.
#let nav(body, class: none, id: none, style: none, ..attrs) = {
  assert(attrs.pos().len() == 0, message: "can have only one body")
  let attrs = attrs.named()
  if class != none { attrs.insert("class", class) }
  if id != none { attrs.insert("id", id) }
  if style != none { attrs.insert("style", style) }
  std.html.elem("nav", attrs: attrs, body)
}
/// Creates a `html <aside>` element with the given content.
///
/// #link("https://developer.mozilla.org/en-US/docs/Web/HTML/Element/aside")[MDN Documentation]
///
/// - class (str): The class attribute of the `<aside>` element.
/// - id (str): The id attribute of the `<aside>` element.
/// - style (str): The style attribute of the `<aside>` element.
#let aside(body, class: none, id: none, style: none, ..attrs) = {
  assert(attrs.pos().len() == 0, message: "can have only one body")
  let attrs = attrs.named()
  if class != none { attrs.insert("class", class) }
  if id != none { attrs.insert("id", id) }
  if style != none { attrs.insert("style", style) }
  std.html.elem("aside", attrs: attrs, body)
}
/// Creates a `html <h1>` element with the given content.
///
/// #link("https://developer.mozilla.org/en-US/docs/Web/HTML/Element/h1")[MDN Documentation]
///
/// - class (str): The class attribute of the `<h1>` element.
/// - id (str): The id attribute of the `<h1>` element.
/// - style (str): The style attribute of the `<h1>` element.
#let h1(body, class: none, id: none, style: none, ..attrs) = {
  assert(attrs.pos().len() == 0, message: "can have only one body")
  let attrs = attrs.named()
  if class != none { attrs.insert("class", class) }
  if id != none { attrs.insert("id", id) }
  if style != none { attrs.insert("style", style) }
  std.html.elem("h1", attrs: attrs, body)
}
/// Creates a `html <h2>` element with the given content.
///
/// #link("https://developer.mozilla.org/en-US/docs/Web/HTML/Element/h2")[MDN Documentation]
///
/// - class (str): The class attribute of the `<h2>` element.
/// - id (str): The id attribute of the `<h2>` element.
/// - style (str): The style attribute of the `<h2>` element.
#let h2(body, class: none, id: none, style: none, ..attrs) = {
  assert(attrs.pos().len() == 0, message: "can have only one body")
  let attrs = attrs.named()
  if class != none { attrs.insert("class", class) }
  if id != none { attrs.insert("id", id) }
  if style != none { attrs.insert("style", style) }
  std.html.elem("h2", attrs: attrs, body)
}
/// Creates a `html <h3>` element with the given content.
///
/// #link("https://developer.mozilla.org/en-US/docs/Web/HTML/Element/h3")[MDN Documentation]
///
/// - class (str): The class attribute of the `<h3>` element.
/// - id (str): The id attribute of the `<h3>` element.
/// - style (str): The style attribute of the `<h3>` element.
#let h3(body, class: none, id: none, style: none, ..attrs) = {
  assert(attrs.pos().len() == 0, message: "can have only one body")
  let attrs = attrs.named()
  if class != none { attrs.insert("class", class) }
  if id != none { attrs.insert("id", id) }
  if style != none { attrs.insert("style", style) }
  std.html.elem("h3", attrs: attrs, body)
}
/// Creates a `html <h4>` element with the given content.
///
/// #link("https://developer.mozilla.org/en-US/docs/Web/HTML/Element/h4")[MDN Documentation]
///
/// - class (str): The class attribute of the `<h4>` element.
/// - id (str): The id attribute of the `<h4>` element.
/// - style (str): The style attribute of the `<h4>` element.
#let h4(body, class: none, id: none, style: none, ..attrs) = {
  assert(attrs.pos().len() == 0, message: "can have only one body")
  let attrs = attrs.named()
  if class != none { attrs.insert("class", class) }
  if id != none { attrs.insert("id", id) }
  if style != none { attrs.insert("style", style) }
  std.html.elem("h4", attrs: attrs, body)
}
/// Creates a `html <h5>` element with the given content.
///
/// #link("https://developer.mozilla.org/en-US/docs/Web/HTML/Element/h5")[MDN Documentation]
///
/// - class (str): The class attribute of the `<h5>` element.
/// - id (str): The id attribute of the `<h5>` element.
/// - style (str): The style attribute of the `<h5>` element.
#let h5(body, class: none, id: none, style: none, ..attrs) = {
  assert(attrs.pos().len() == 0, message: "can have only one body")
  let attrs = attrs.named()
  if class != none { attrs.insert("class", class) }
  if id != none { attrs.insert("id", id) }
  if style != none { attrs.insert("style", style) }
  std.html.elem("h5", attrs: attrs, body)
}
/// Creates a `html <h6>` element with the given content.
///
/// #link("https://developer.mozilla.org/en-US/docs/Web/HTML/Element/h6")[MDN Documentation]
///
/// - class (str): The class attribute of the `<h6>` element.
/// - id (str): The id attribute of the `<h6>` element.
/// - style (str): The style attribute of the `<h6>` element.
#let h6(body, class: none, id: none, style: none, ..attrs) = {
  assert(attrs.pos().len() == 0, message: "can have only one body")
  let attrs = attrs.named()
  if class != none { attrs.insert("class", class) }
  if id != none { attrs.insert("id", id) }
  if style != none { attrs.insert("style", style) }
  std.html.elem("h6", attrs: attrs, body)
}
/// Creates a `html <header>` element with the given content.
///
/// #link("https://developer.mozilla.org/en-US/docs/Web/HTML/Element/header")[MDN Documentation]
///
/// - class (str): The class attribute of the `<header>` element.
/// - id (str): The id attribute of the `<header>` element.
/// - style (str): The style attribute of the `<header>` element.
#let header(body, class: none, id: none, style: none, ..attrs) = {
  assert(attrs.pos().len() == 0, message: "can have only one body")
  let attrs = attrs.named()
  if class != none { attrs.insert("class", class) }
  if id != none { attrs.insert("id", id) }
  if style != none { attrs.insert("style", style) }
  std.html.elem("header", attrs: attrs, body)
}
/// Creates a `html <footer>` element with the given content.
///
/// #link("https://developer.mozilla.org/en-US/docs/Web/HTML/Element/footer")[MDN Documentation]
///
/// - class (str): The class attribute of the `<footer>` element.
/// - id (str): The id attribute of the `<footer>` element.
/// - style (str): The style attribute of the `<footer>` element.
#let footer(body, class: none, id: none, style: none, ..attrs) = {
  assert(attrs.pos().len() == 0, message: "can have only one body")
  let attrs = attrs.named()
  if class != none { attrs.insert("class", class) }
  if id != none { attrs.insert("id", id) }
  if style != none { attrs.insert("style", style) }
  std.html.elem("footer", attrs: attrs, body)
}
/// Creates a `html <address>` element with the given content.
///
/// #link("https://developer.mozilla.org/en-US/docs/Web/HTML/Element/address")[MDN Documentation]
///
/// - class (str): The class attribute of the `<address>` element.
/// - id (str): The id attribute of the `<address>` element.
/// - style (str): The style attribute of the `<address>` element.
#let address(body, class: none, id: none, style: none, ..attrs) = {
  assert(attrs.pos().len() == 0, message: "can have only one body")
  let attrs = attrs.named()
  if class != none { attrs.insert("class", class) }
  if id != none { attrs.insert("id", id) }
  if style != none { attrs.insert("style", style) }
  std.html.elem("address", attrs: attrs, body)
}
/// Creates a `html <p>` element with the given content.
///
/// #link("https://developer.mozilla.org/en-US/docs/Web/HTML/Element/p")[MDN Documentation]
///
/// - class (str): The class attribute of the `<p>` element.
/// - id (str): The id attribute of the `<p>` element.
/// - style (str): The style attribute of the `<p>` element.
#let p(body, class: none, id: none, style: none, ..attrs) = {
  assert(attrs.pos().len() == 0, message: "can have only one body")
  let attrs = attrs.named()
  if class != none { attrs.insert("class", class) }
  if id != none { attrs.insert("id", id) }
  if style != none { attrs.insert("style", style) }
  std.html.elem("p", attrs: attrs, body)
}
/// Creates a `html <hr>` element with the given content.
///
/// #link("https://developer.mozilla.org/en-US/docs/Web/HTML/Element/hr")[MDN Documentation]
///
/// - class (str): The class attribute of the `<hr>` element.
/// - id (str): The id attribute of the `<hr>` element.
/// - style (str): The style attribute of the `<hr>` element.
#let hr(body, class: none, id: none, style: none, ..attrs) = {
  assert(attrs.pos().len() == 0, message: "can have only one body")
  let attrs = attrs.named()
  if class != none { attrs.insert("class", class) }
  if id != none { attrs.insert("id", id) }
  if style != none { attrs.insert("style", style) }
  std.html.elem("hr", attrs: attrs, body)
}
/// Creates a `html <pre>` element with the given content.
///
/// #link("https://developer.mozilla.org/en-US/docs/Web/HTML/Element/pre")[MDN Documentation]
///
/// - class (str): The class attribute of the `<pre>` element.
/// - id (str): The id attribute of the `<pre>` element.
/// - style (str): The style attribute of the `<pre>` element.
#let pre(body, class: none, id: none, style: none, ..attrs) = {
  assert(attrs.pos().len() == 0, message: "can have only one body")
  let attrs = attrs.named()
  if class != none { attrs.insert("class", class) }
  if id != none { attrs.insert("id", id) }
  if style != none { attrs.insert("style", style) }
  std.html.elem("pre", attrs: attrs, body)
}
/// Creates a `html <blockquote>` element with the given content.
///
/// #link("https://developer.mozilla.org/en-US/docs/Web/HTML/Element/blockquote")[MDN Documentation]
///
/// - cite (str): The cite attribute of the `<blockquote>` element.
/// - class (str): The class attribute of the `<blockquote>` element.
/// - id (str): The id attribute of the `<blockquote>` element.
/// - style (str): The style attribute of the `<blockquote>` element.
#let blockquote(body, cite: none, class: none, id: none, style: none, ..attrs) = {
  assert(attrs.pos().len() == 0, message: "can have only one body")
  let attrs = attrs.named()
  if cite != none { attrs.insert("cite", cite) }
  if class != none { attrs.insert("class", class) }
  if id != none { attrs.insert("id", id) }
  if style != none { attrs.insert("style", style) }
  std.html.elem("blockquote", attrs: attrs, body)
}
/// Creates a `html <ol>` element with the given content.
///
/// #link("https://developer.mozilla.org/en-US/docs/Web/HTML/Element/ol")[MDN Documentation]
///
/// - reversed (str): The reversed attribute of the `<ol>` element.
/// - start (str): The start attribute of the `<ol>` element.
/// - type (str): The type attribute of the `<ol>` element.
/// - class (str): The class attribute of the `<ol>` element.
/// - id (str): The id attribute of the `<ol>` element.
/// - style (str): The style attribute of the `<ol>` element.
#let ol(body, reversed: none, start: none, type: none, class: none, id: none, style: none, ..attrs) = {
  assert(attrs.pos().len() == 0, message: "can have only one body")
  let attrs = attrs.named()
  if reversed != none { attrs.insert("reversed", reversed) }
  if start != none { attrs.insert("start", start) }
  if type != none { attrs.insert("type", type) }
  if class != none { attrs.insert("class", class) }
  if id != none { attrs.insert("id", id) }
  if style != none { attrs.insert("style", style) }
  std.html.elem("ol", attrs: attrs, body)
}
/// Creates a `html <ul>` element with the given content.
///
/// #link("https://developer.mozilla.org/en-US/docs/Web/HTML/Element/ul")[MDN Documentation]
///
/// - class (str): The class attribute of the `<ul>` element.
/// - id (str): The id attribute of the `<ul>` element.
/// - style (str): The style attribute of the `<ul>` element.
#let ul(body, class: none, id: none, style: none, ..attrs) = {
  assert(attrs.pos().len() == 0, message: "can have only one body")
  let attrs = attrs.named()
  if class != none { attrs.insert("class", class) }
  if id != none { attrs.insert("id", id) }
  if style != none { attrs.insert("style", style) }
  std.html.elem("ul", attrs: attrs, body)
}
/// Creates a `html <li>` element with the given content.
///
/// #link("https://developer.mozilla.org/en-US/docs/Web/HTML/Element/li")[MDN Documentation]
///
/// - value (str): The value attribute of the `<li>` element.
/// - class (str): The class attribute of the `<li>` element.
/// - id (str): The id attribute of the `<li>` element.
/// - style (str): The style attribute of the `<li>` element.
#let li(body, value: none, class: none, id: none, style: none, ..attrs) = {
  assert(attrs.pos().len() == 0, message: "can have only one body")
  let attrs = attrs.named()
  if value != none { attrs.insert("value", value) }
  if class != none { attrs.insert("class", class) }
  if id != none { attrs.insert("id", id) }
  if style != none { attrs.insert("style", style) }
  std.html.elem("li", attrs: attrs, body)
}
/// Creates a `html <dl>` element with the given content.
///
/// #link("https://developer.mozilla.org/en-US/docs/Web/HTML/Element/dl")[MDN Documentation]
///
/// - class (str): The class attribute of the `<dl>` element.
/// - id (str): The id attribute of the `<dl>` element.
/// - style (str): The style attribute of the `<dl>` element.
#let dl(body, class: none, id: none, style: none, ..attrs) = {
  assert(attrs.pos().len() == 0, message: "can have only one body")
  let attrs = attrs.named()
  if class != none { attrs.insert("class", class) }
  if id != none { attrs.insert("id", id) }
  if style != none { attrs.insert("style", style) }
  std.html.elem("dl", attrs: attrs, body)
}
/// Creates a `html <dt>` element with the given content.
///
/// #link("https://developer.mozilla.org/en-US/docs/Web/HTML/Element/dt")[MDN Documentation]
///
/// - class (str): The class attribute of the `<dt>` element.
/// - id (str): The id attribute of the `<dt>` element.
/// - style (str): The style attribute of the `<dt>` element.
#let dt(body, class: none, id: none, style: none, ..attrs) = {
  assert(attrs.pos().len() == 0, message: "can have only one body")
  let attrs = attrs.named()
  if class != none { attrs.insert("class", class) }
  if id != none { attrs.insert("id", id) }
  if style != none { attrs.insert("style", style) }
  std.html.elem("dt", attrs: attrs, body)
}
/// Creates a `html <dd>` element with the given content.
///
/// #link("https://developer.mozilla.org/en-US/docs/Web/HTML/Element/dd")[MDN Documentation]
///
/// - class (str): The class attribute of the `<dd>` element.
/// - id (str): The id attribute of the `<dd>` element.
/// - style (str): The style attribute of the `<dd>` element.
#let dd(body, class: none, id: none, style: none, ..attrs) = {
  assert(attrs.pos().len() == 0, message: "can have only one body")
  let attrs = attrs.named()
  if class != none { attrs.insert("class", class) }
  if id != none { attrs.insert("id", id) }
  if style != none { attrs.insert("style", style) }
  std.html.elem("dd", attrs: attrs, body)
}
/// Creates a `html <figure>` element with the given content.
///
/// #link("https://developer.mozilla.org/en-US/docs/Web/HTML/Element/figure")[MDN Documentation]
///
/// - class (str): The class attribute of the `<figure>` element.
/// - id (str): The id attribute of the `<figure>` element.
/// - style (str): The style attribute of the `<figure>` element.
#let figure(body, class: none, id: none, style: none, ..attrs) = {
  assert(attrs.pos().len() == 0, message: "can have only one body")
  let attrs = attrs.named()
  if class != none { attrs.insert("class", class) }
  if id != none { attrs.insert("id", id) }
  if style != none { attrs.insert("style", style) }
  std.html.elem("figure", attrs: attrs, body)
}
/// Creates a `html <figcaption>` element with the given content.
///
/// #link("https://developer.mozilla.org/en-US/docs/Web/HTML/Element/figcaption")[MDN Documentation]
///
/// - class (str): The class attribute of the `<figcaption>` element.
/// - id (str): The id attribute of the `<figcaption>` element.
/// - style (str): The style attribute of the `<figcaption>` element.
#let figcaption(body, class: none, id: none, style: none, ..attrs) = {
  assert(attrs.pos().len() == 0, message: "can have only one body")
  let attrs = attrs.named()
  if class != none { attrs.insert("class", class) }
  if id != none { attrs.insert("id", id) }
  if style != none { attrs.insert("style", style) }
  std.html.elem("figcaption", attrs: attrs, body)
}
/// Creates a `html <main>` element with the given content.
///
/// #link("https://developer.mozilla.org/en-US/docs/Web/HTML/Element/main")[MDN Documentation]
///
/// - class (str): The class attribute of the `<main>` element.
/// - id (str): The id attribute of the `<main>` element.
/// - style (str): The style attribute of the `<main>` element.
#let main(body, class: none, id: none, style: none, ..attrs) = {
  assert(attrs.pos().len() == 0, message: "can have only one body")
  let attrs = attrs.named()
  if class != none { attrs.insert("class", class) }
  if id != none { attrs.insert("id", id) }
  if style != none { attrs.insert("style", style) }
  std.html.elem("main", attrs: attrs, body)
}
/// Creates a `html <div>` element with the given content.
///
/// #link("https://developer.mozilla.org/en-US/docs/Web/HTML/Element/div")[MDN Documentation]
///
/// - class (str): The class attribute of the `<div>` element.
/// - id (str): The id attribute of the `<div>` element.
/// - style (str): The style attribute of the `<div>` element.
#let div(body, class: none, id: none, style: none, ..attrs) = {
  assert(attrs.pos().len() == 0, message: "can have only one body")
  let attrs = attrs.named()
  if class != none { attrs.insert("class", class) }
  if id != none { attrs.insert("id", id) }
  if style != none { attrs.insert("style", style) }
  std.html.elem("div", attrs: attrs, body)
}
/// Creates a `html <a>` element with the given content.
///
/// #link("https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a")[MDN Documentation]
///
/// - href (str): The href attribute of the `<a>` element.
/// - target (str): The target attribute of the `<a>` element.
/// - download (str): The download attribute of the `<a>` element.
/// - ping (str): The ping attribute of the `<a>` element.
/// - rel (str): The rel attribute of the `<a>` element.
/// - hreflang (str): The hreflang attribute of the `<a>` element.
/// - type (str): The type attribute of the `<a>` element.
/// - class (str): The class attribute of the `<a>` element.
/// - id (str): The id attribute of the `<a>` element.
/// - style (str): The style attribute of the `<a>` element.
#let a(
  body,
  href: none,
  target: none,
  download: none,
  ping: none,
  rel: none,
  hreflang: none,
  type: none,
  class: none,
  id: none,
  style: none,
  ..attrs,
) = {
  assert(attrs.pos().len() == 0, message: "can have only one body")
  let attrs = attrs.named()
  if href != none { attrs.insert("href", href) }
  if target != none { attrs.insert("target", target) }
  if download != none { attrs.insert("download", download) }
  if ping != none { attrs.insert("ping", ping) }
  if rel != none { attrs.insert("rel", rel) }
  if hreflang != none { attrs.insert("hreflang", hreflang) }
  if type != none { attrs.insert("type", type) }
  if class != none { attrs.insert("class", class) }
  if id != none { attrs.insert("id", id) }
  if style != none { attrs.insert("style", style) }
  std.html.elem("a", attrs: attrs, body)
}
/// Creates a `html <em>` element with the given content.
///
/// #link("https://developer.mozilla.org/en-US/docs/Web/HTML/Element/em")[MDN Documentation]
///
/// - class (str): The class attribute of the `<em>` element.
/// - id (str): The id attribute of the `<em>` element.
/// - style (str): The style attribute of the `<em>` element.
#let em(body, class: none, id: none, style: none, ..attrs) = {
  assert(attrs.pos().len() == 0, message: "can have only one body")
  let attrs = attrs.named()
  if class != none { attrs.insert("class", class) }
  if id != none { attrs.insert("id", id) }
  if style != none { attrs.insert("style", style) }
  std.html.elem("em", attrs: attrs, body)
}
/// Creates a `html <strong>` element with the given content.
///
/// #link("https://developer.mozilla.org/en-US/docs/Web/HTML/Element/strong")[MDN Documentation]
///
/// - class (str): The class attribute of the `<strong>` element.
/// - id (str): The id attribute of the `<strong>` element.
/// - style (str): The style attribute of the `<strong>` element.
#let strong(body, class: none, id: none, style: none, ..attrs) = {
  assert(attrs.pos().len() == 0, message: "can have only one body")
  let attrs = attrs.named()
  if class != none { attrs.insert("class", class) }
  if id != none { attrs.insert("id", id) }
  if style != none { attrs.insert("style", style) }
  std.html.elem("strong", attrs: attrs, body)
}
/// Creates a `html <small>` element with the given content.
///
/// #link("https://developer.mozilla.org/en-US/docs/Web/HTML/Element/small")[MDN Documentation]
///
/// - class (str): The class attribute of the `<small>` element.
/// - id (str): The id attribute of the `<small>` element.
/// - style (str): The style attribute of the `<small>` element.
#let small(body, class: none, id: none, style: none, ..attrs) = {
  assert(attrs.pos().len() == 0, message: "can have only one body")
  let attrs = attrs.named()
  if class != none { attrs.insert("class", class) }
  if id != none { attrs.insert("id", id) }
  if style != none { attrs.insert("style", style) }
  std.html.elem("small", attrs: attrs, body)
}
/// Creates a `html <s>` element with the given content.
///
/// #link("https://developer.mozilla.org/en-US/docs/Web/HTML/Element/s")[MDN Documentation]
///
/// - class (str): The class attribute of the `<s>` element.
/// - id (str): The id attribute of the `<s>` element.
/// - style (str): The style attribute of the `<s>` element.
#let s(body, class: none, id: none, style: none, ..attrs) = {
  assert(attrs.pos().len() == 0, message: "can have only one body")
  let attrs = attrs.named()
  if class != none { attrs.insert("class", class) }
  if id != none { attrs.insert("id", id) }
  if style != none { attrs.insert("style", style) }
  std.html.elem("s", attrs: attrs, body)
}
/// Creates a `html <cite>` element with the given content.
///
/// #link("https://developer.mozilla.org/en-US/docs/Web/HTML/Element/cite")[MDN Documentation]
///
/// - class (str): The class attribute of the `<cite>` element.
/// - id (str): The id attribute of the `<cite>` element.
/// - style (str): The style attribute of the `<cite>` element.
#let cite(body, class: none, id: none, style: none, ..attrs) = {
  assert(attrs.pos().len() == 0, message: "can have only one body")
  let attrs = attrs.named()
  if class != none { attrs.insert("class", class) }
  if id != none { attrs.insert("id", id) }
  if style != none { attrs.insert("style", style) }
  std.html.elem("cite", attrs: attrs, body)
}
/// Creates a `html <q>` element with the given content.
///
/// #link("https://developer.mozilla.org/en-US/docs/Web/HTML/Element/q")[MDN Documentation]
///
/// - cite (str): The cite attribute of the `<q>` element.
/// - class (str): The class attribute of the `<q>` element.
/// - id (str): The id attribute of the `<q>` element.
/// - style (str): The style attribute of the `<q>` element.
#let q(body, cite: none, class: none, id: none, style: none, ..attrs) = {
  assert(attrs.pos().len() == 0, message: "can have only one body")
  let attrs = attrs.named()
  if cite != none { attrs.insert("cite", cite) }
  if class != none { attrs.insert("class", class) }
  if id != none { attrs.insert("id", id) }
  if style != none { attrs.insert("style", style) }
  std.html.elem("q", attrs: attrs, body)
}
/// Creates a `html <dfn>` element with the given content.
///
/// #link("https://developer.mozilla.org/en-US/docs/Web/HTML/Element/dfn")[MDN Documentation]
///
/// - class (str): The class attribute of the `<dfn>` element.
/// - id (str): The id attribute of the `<dfn>` element.
/// - style (str): The style attribute of the `<dfn>` element.
#let dfn(body, class: none, id: none, style: none, ..attrs) = {
  assert(attrs.pos().len() == 0, message: "can have only one body")
  let attrs = attrs.named()
  if class != none { attrs.insert("class", class) }
  if id != none { attrs.insert("id", id) }
  if style != none { attrs.insert("style", style) }
  std.html.elem("dfn", attrs: attrs, body)
}
/// Creates a `html <abbr>` element with the given content.
///
/// #link("https://developer.mozilla.org/en-US/docs/Web/HTML/Element/abbr")[MDN Documentation]
///
/// - class (str): The class attribute of the `<abbr>` element.
/// - id (str): The id attribute of the `<abbr>` element.
/// - style (str): The style attribute of the `<abbr>` element.
#let abbr(body, class: none, id: none, style: none, ..attrs) = {
  assert(attrs.pos().len() == 0, message: "can have only one body")
  let attrs = attrs.named()
  if class != none { attrs.insert("class", class) }
  if id != none { attrs.insert("id", id) }
  if style != none { attrs.insert("style", style) }
  std.html.elem("abbr", attrs: attrs, body)
}
/// Creates a `html <ruby>` element with the given content.
///
/// #link("https://developer.mozilla.org/en-US/docs/Web/HTML/Element/ruby")[MDN Documentation]
///
/// - class (str): The class attribute of the `<ruby>` element.
/// - id (str): The id attribute of the `<ruby>` element.
/// - style (str): The style attribute of the `<ruby>` element.
#let ruby(body, class: none, id: none, style: none, ..attrs) = {
  assert(attrs.pos().len() == 0, message: "can have only one body")
  let attrs = attrs.named()
  if class != none { attrs.insert("class", class) }
  if id != none { attrs.insert("id", id) }
  if style != none { attrs.insert("style", style) }
  std.html.elem("ruby", attrs: attrs, body)
}
/// Creates a `html <rb>` element with the given content.
///
/// #link("https://developer.mozilla.org/en-US/docs/Web/HTML/Element/rb")[MDN Documentation]
///
/// - class (str): The class attribute of the `<rb>` element.
/// - id (str): The id attribute of the `<rb>` element.
/// - style (str): The style attribute of the `<rb>` element.
#let rb(body, class: none, id: none, style: none, ..attrs) = {
  assert(attrs.pos().len() == 0, message: "can have only one body")
  let attrs = attrs.named()
  if class != none { attrs.insert("class", class) }
  if id != none { attrs.insert("id", id) }
  if style != none { attrs.insert("style", style) }
  std.html.elem("rb", attrs: attrs, body)
}
/// Creates a `html <rt>` element with the given content.
///
/// #link("https://developer.mozilla.org/en-US/docs/Web/HTML/Element/rt")[MDN Documentation]
///
/// - class (str): The class attribute of the `<rt>` element.
/// - id (str): The id attribute of the `<rt>` element.
/// - style (str): The style attribute of the `<rt>` element.
#let rt(body, class: none, id: none, style: none, ..attrs) = {
  assert(attrs.pos().len() == 0, message: "can have only one body")
  let attrs = attrs.named()
  if class != none { attrs.insert("class", class) }
  if id != none { attrs.insert("id", id) }
  if style != none { attrs.insert("style", style) }
  std.html.elem("rt", attrs: attrs, body)
}
/// Creates a `html <rp>` element with the given content.
///
/// #link("https://developer.mozilla.org/en-US/docs/Web/HTML/Element/rp")[MDN Documentation]
///
/// - class (str): The class attribute of the `<rp>` element.
/// - id (str): The id attribute of the `<rp>` element.
/// - style (str): The style attribute of the `<rp>` element.
#let rp(body, class: none, id: none, style: none, ..attrs) = {
  assert(attrs.pos().len() == 0, message: "can have only one body")
  let attrs = attrs.named()
  if class != none { attrs.insert("class", class) }
  if id != none { attrs.insert("id", id) }
  if style != none { attrs.insert("style", style) }
  std.html.elem("rp", attrs: attrs, body)
}
/// Creates a `html <time>` element with the given content.
///
/// #link("https://developer.mozilla.org/en-US/docs/Web/HTML/Element/time")[MDN Documentation]
///
/// - datetime (str): The datetime attribute of the `<time>` element.
/// - class (str): The class attribute of the `<time>` element.
/// - id (str): The id attribute of the `<time>` element.
/// - style (str): The style attribute of the `<time>` element.
#let time(body, datetime: none, class: none, id: none, style: none, ..attrs) = {
  assert(attrs.pos().len() == 0, message: "can have only one body")
  let attrs = attrs.named()
  if datetime != none { attrs.insert("datetime", datetime) }
  if class != none { attrs.insert("class", class) }
  if id != none { attrs.insert("id", id) }
  if style != none { attrs.insert("style", style) }
  std.html.elem("time", attrs: attrs, body)
}
/// Creates a `html <code>` element with the given content.
///
/// #link("https://developer.mozilla.org/en-US/docs/Web/HTML/Element/code")[MDN Documentation]
///
/// - class (str): The class attribute of the `<code>` element.
/// - id (str): The id attribute of the `<code>` element.
/// - style (str): The style attribute of the `<code>` element.
#let code(body, class: none, id: none, style: none, ..attrs) = {
  assert(attrs.pos().len() == 0, message: "can have only one body")
  let attrs = attrs.named()
  if class != none { attrs.insert("class", class) }
  if id != none { attrs.insert("id", id) }
  if style != none { attrs.insert("style", style) }
  std.html.elem("code", attrs: attrs, body)
}
/// Creates a `html <var>` element with the given content.
///
/// #link("https://developer.mozilla.org/en-US/docs/Web/HTML/Element/var")[MDN Documentation]
///
/// - class (str): The class attribute of the `<var>` element.
/// - id (str): The id attribute of the `<var>` element.
/// - style (str): The style attribute of the `<var>` element.
#let var(body, class: none, id: none, style: none, ..attrs) = {
  assert(attrs.pos().len() == 0, message: "can have only one body")
  let attrs = attrs.named()
  if class != none { attrs.insert("class", class) }
  if id != none { attrs.insert("id", id) }
  if style != none { attrs.insert("style", style) }
  std.html.elem("var", attrs: attrs, body)
}
/// Creates a `html <samp>` element with the given content.
///
/// #link("https://developer.mozilla.org/en-US/docs/Web/HTML/Element/samp")[MDN Documentation]
///
/// - class (str): The class attribute of the `<samp>` element.
/// - id (str): The id attribute of the `<samp>` element.
/// - style (str): The style attribute of the `<samp>` element.
#let samp(body, class: none, id: none, style: none, ..attrs) = {
  assert(attrs.pos().len() == 0, message: "can have only one body")
  let attrs = attrs.named()
  if class != none { attrs.insert("class", class) }
  if id != none { attrs.insert("id", id) }
  if style != none { attrs.insert("style", style) }
  std.html.elem("samp", attrs: attrs, body)
}
/// Creates a `html <kbd>` element with the given content.
///
/// #link("https://developer.mozilla.org/en-US/docs/Web/HTML/Element/kbd")[MDN Documentation]
///
/// - class (str): The class attribute of the `<kbd>` element.
/// - id (str): The id attribute of the `<kbd>` element.
/// - style (str): The style attribute of the `<kbd>` element.
#let kbd(body, class: none, id: none, style: none, ..attrs) = {
  assert(attrs.pos().len() == 0, message: "can have only one body")
  let attrs = attrs.named()
  if class != none { attrs.insert("class", class) }
  if id != none { attrs.insert("id", id) }
  if style != none { attrs.insert("style", style) }
  std.html.elem("kbd", attrs: attrs, body)
}
/// Creates a `html <sub>` element with the given content.
///
/// #link("https://developer.mozilla.org/en-US/docs/Web/HTML/Element/sub")[MDN Documentation]
///
/// - class (str): The class attribute of the `<sub>` element.
/// - id (str): The id attribute of the `<sub>` element.
/// - style (str): The style attribute of the `<sub>` element.
#let sub(body, class: none, id: none, style: none, ..attrs) = {
  assert(attrs.pos().len() == 0, message: "can have only one body")
  let attrs = attrs.named()
  if class != none { attrs.insert("class", class) }
  if id != none { attrs.insert("id", id) }
  if style != none { attrs.insert("style", style) }
  std.html.elem("sub", attrs: attrs, body)
}
/// Creates a `html <sup>` element with the given content.
///
/// #link("https://developer.mozilla.org/en-US/docs/Web/HTML/Element/sup")[MDN Documentation]
///
/// - class (str): The class attribute of the `<sup>` element.
/// - id (str): The id attribute of the `<sup>` element.
/// - style (str): The style attribute of the `<sup>` element.
#let sup(body, class: none, id: none, style: none, ..attrs) = {
  assert(attrs.pos().len() == 0, message: "can have only one body")
  let attrs = attrs.named()
  if class != none { attrs.insert("class", class) }
  if id != none { attrs.insert("id", id) }
  if style != none { attrs.insert("style", style) }
  std.html.elem("sup", attrs: attrs, body)
}
/// Creates a `html <i>` element with the given content.
///
/// #link("https://developer.mozilla.org/en-US/docs/Web/HTML/Element/i")[MDN Documentation]
///
/// - class (str): The class attribute of the `<i>` element.
/// - id (str): The id attribute of the `<i>` element.
/// - style (str): The style attribute of the `<i>` element.
#let i(body, class: none, id: none, style: none, ..attrs) = {
  assert(attrs.pos().len() == 0, message: "can have only one body")
  let attrs = attrs.named()
  if class != none { attrs.insert("class", class) }
  if id != none { attrs.insert("id", id) }
  if style != none { attrs.insert("style", style) }
  std.html.elem("i", attrs: attrs, body)
}
/// Creates a `html <b>` element with the given content.
///
/// #link("https://developer.mozilla.org/en-US/docs/Web/HTML/Element/b")[MDN Documentation]
///
/// - class (str): The class attribute of the `<b>` element.
/// - id (str): The id attribute of the `<b>` element.
/// - style (str): The style attribute of the `<b>` element.
#let b(body, class: none, id: none, style: none, ..attrs) = {
  assert(attrs.pos().len() == 0, message: "can have only one body")
  let attrs = attrs.named()
  if class != none { attrs.insert("class", class) }
  if id != none { attrs.insert("id", id) }
  if style != none { attrs.insert("style", style) }
  std.html.elem("b", attrs: attrs, body)
}
/// Creates a `html <u>` element with the given content.
///
/// #link("https://developer.mozilla.org/en-US/docs/Web/HTML/Element/u")[MDN Documentation]
///
/// - class (str): The class attribute of the `<u>` element.
/// - id (str): The id attribute of the `<u>` element.
/// - style (str): The style attribute of the `<u>` element.
#let u(body, class: none, id: none, style: none, ..attrs) = {
  assert(attrs.pos().len() == 0, message: "can have only one body")
  let attrs = attrs.named()
  if class != none { attrs.insert("class", class) }
  if id != none { attrs.insert("id", id) }
  if style != none { attrs.insert("style", style) }
  std.html.elem("u", attrs: attrs, body)
}
/// Creates a `html <mark>` element with the given content.
///
/// #link("https://developer.mozilla.org/en-US/docs/Web/HTML/Element/mark")[MDN Documentation]
///
/// - class (str): The class attribute of the `<mark>` element.
/// - id (str): The id attribute of the `<mark>` element.
/// - style (str): The style attribute of the `<mark>` element.
#let mark(body, class: none, id: none, style: none, ..attrs) = {
  assert(attrs.pos().len() == 0, message: "can have only one body")
  let attrs = attrs.named()
  if class != none { attrs.insert("class", class) }
  if id != none { attrs.insert("id", id) }
  if style != none { attrs.insert("style", style) }
  std.html.elem("mark", attrs: attrs, body)
}
/// Creates a `html <bdi>` element with the given content.
///
/// #link("https://developer.mozilla.org/en-US/docs/Web/HTML/Element/bdi")[MDN Documentation]
///
/// - class (str): The class attribute of the `<bdi>` element.
/// - id (str): The id attribute of the `<bdi>` element.
/// - style (str): The style attribute of the `<bdi>` element.
#let bdi(body, class: none, id: none, style: none, ..attrs) = {
  assert(attrs.pos().len() == 0, message: "can have only one body")
  let attrs = attrs.named()
  if class != none { attrs.insert("class", class) }
  if id != none { attrs.insert("id", id) }
  if style != none { attrs.insert("style", style) }
  std.html.elem("bdi", attrs: attrs, body)
}
/// Creates a `html <bdo>` element with the given content.
///
/// #link("https://developer.mozilla.org/en-US/docs/Web/HTML/Element/bdo")[MDN Documentation]
///
/// - class (str): The class attribute of the `<bdo>` element.
/// - id (str): The id attribute of the `<bdo>` element.
/// - style (str): The style attribute of the `<bdo>` element.
#let bdo(body, class: none, id: none, style: none, ..attrs) = {
  assert(attrs.pos().len() == 0, message: "can have only one body")
  let attrs = attrs.named()
  if class != none { attrs.insert("class", class) }
  if id != none { attrs.insert("id", id) }
  if style != none { attrs.insert("style", style) }
  std.html.elem("bdo", attrs: attrs, body)
}
/// Creates a `html <span>` element with the given content.
///
/// #link("https://developer.mozilla.org/en-US/docs/Web/HTML/Element/span")[MDN Documentation]
///
/// - class (str): The class attribute of the `<span>` element.
/// - id (str): The id attribute of the `<span>` element.
/// - style (str): The style attribute of the `<span>` element.
#let span(body, class: none, id: none, style: none, ..attrs) = {
  assert(attrs.pos().len() == 0, message: "can have only one body")
  let attrs = attrs.named()
  if class != none { attrs.insert("class", class) }
  if id != none { attrs.insert("id", id) }
  if style != none { attrs.insert("style", style) }
  std.html.elem("span", attrs: attrs, body)
}
/// Creates a `html <br>` element with the given content.
///
/// #link("https://developer.mozilla.org/en-US/docs/Web/HTML/Element/br")[MDN Documentation]
///
/// - class (str): The class attribute of the `<br>` element.
/// - id (str): The id attribute of the `<br>` element.
/// - style (str): The style attribute of the `<br>` element.
#let br(body, class: none, id: none, style: none, ..attrs) = {
  assert(attrs.pos().len() == 0, message: "can have only one body")
  let attrs = attrs.named()
  if class != none { attrs.insert("class", class) }
  if id != none { attrs.insert("id", id) }
  if style != none { attrs.insert("style", style) }
  std.html.elem("br", attrs: attrs, body)
}
/// Creates a `html <wbr>` element with the given content.
///
/// #link("https://developer.mozilla.org/en-US/docs/Web/HTML/Element/wbr")[MDN Documentation]
///
/// - class (str): The class attribute of the `<wbr>` element.
/// - id (str): The id attribute of the `<wbr>` element.
/// - style (str): The style attribute of the `<wbr>` element.
#let wbr(body, class: none, id: none, style: none, ..attrs) = {
  assert(attrs.pos().len() == 0, message: "can have only one body")
  let attrs = attrs.named()
  if class != none { attrs.insert("class", class) }
  if id != none { attrs.insert("id", id) }
  if style != none { attrs.insert("style", style) }
  std.html.elem("wbr", attrs: attrs, body)
}
/// Creates a `html <ins>` element with the given content.
///
/// #link("https://developer.mozilla.org/en-US/docs/Web/HTML/Element/ins")[MDN Documentation]
///
/// - class (str): The class attribute of the `<ins>` element.
/// - id (str): The id attribute of the `<ins>` element.
/// - style (str): The style attribute of the `<ins>` element.
#let ins(body, class: none, id: none, style: none, ..attrs) = {
  assert(attrs.pos().len() == 0, message: "can have only one body")
  let attrs = attrs.named()
  if class != none { attrs.insert("class", class) }
  if id != none { attrs.insert("id", id) }
  if style != none { attrs.insert("style", style) }
  std.html.elem("ins", attrs: attrs, body)
}
/// Creates a `html <del>` element with the given content.
///
/// #link("https://developer.mozilla.org/en-US/docs/Web/HTML/Element/del")[MDN Documentation]
///
/// - cite (str): The cite attribute of the `<del>` element.
/// - datetime (str): The datetime attribute of the `<del>` element.
/// - class (str): The class attribute of the `<del>` element.
/// - id (str): The id attribute of the `<del>` element.
/// - style (str): The style attribute of the `<del>` element.
#let del(body, cite: none, datetime: none, class: none, id: none, style: none, ..attrs) = {
  assert(attrs.pos().len() == 0, message: "can have only one body")
  let attrs = attrs.named()
  if cite != none { attrs.insert("cite", cite) }
  if datetime != none { attrs.insert("datetime", datetime) }
  if class != none { attrs.insert("class", class) }
  if id != none { attrs.insert("id", id) }
  if style != none { attrs.insert("style", style) }
  std.html.elem("del", attrs: attrs, body)
}
/// Creates a `html <picture>` element with the given content.
///
/// #link("https://developer.mozilla.org/en-US/docs/Web/HTML/Element/picture")[MDN Documentation]
///
/// - class (str): The class attribute of the `<picture>` element.
/// - id (str): The id attribute of the `<picture>` element.
/// - style (str): The style attribute of the `<picture>` element.
#let picture(body, class: none, id: none, style: none, ..attrs) = {
  assert(attrs.pos().len() == 0, message: "can have only one body")
  let attrs = attrs.named()
  if class != none { attrs.insert("class", class) }
  if id != none { attrs.insert("id", id) }
  if style != none { attrs.insert("style", style) }
  std.html.elem("picture", attrs: attrs, body)
}
/// Creates a `html <img>` element with the given content.
///
/// #link("https://developer.mozilla.org/en-US/docs/Web/HTML/Element/img")[MDN Documentation]
///
/// - alt (str): The alt attribute of the `<img>` element.
/// - src (str): The src attribute of the `<img>` element.
/// - srcset (str): The srcset attribute of the `<img>` element.
/// - crossorigin (str): The crossorigin attribute of the `<img>` element.
/// - usemap (str): The usemap attribute of the `<img>` element.
/// - ismap (str): The ismap attribute of the `<img>` element.
/// - width (str): The width attribute of the `<img>` element.
/// - height (str): The height attribute of the `<img>` element.
/// - decoding (str): The decoding attribute of the `<img>` element.
/// - loading (str): The loading attribute of the `<img>` element.
/// - fetchpriority (str): The fetchpriority attribute of the `<img>` element.
/// - referrerpolicy (str): The referrerpolicy attribute of the `<img>` element.
/// - sizes (str): The sizes attribute of the `<img>` element.
/// - class (str): The class attribute of the `<img>` element.
/// - id (str): The id attribute of the `<img>` element.
/// - style (str): The style attribute of the `<img>` element.
#let img(
  body,
  alt: none,
  src: none,
  srcset: none,
  crossorigin: none,
  usemap: none,
  ismap: none,
  width: none,
  height: none,
  decoding: none,
  loading: none,
  fetchpriority: none,
  referrerpolicy: none,
  sizes: none,
  class: none,
  id: none,
  style: none,
  ..attrs,
) = {
  assert(attrs.pos().len() == 0, message: "can have only one body")
  let attrs = attrs.named()
  if alt != none { attrs.insert("alt", alt) }
  if src != none { attrs.insert("src", src) }
  if srcset != none { attrs.insert("srcset", srcset) }
  if crossorigin != none { attrs.insert("crossorigin", crossorigin) }
  if usemap != none { attrs.insert("usemap", usemap) }
  if ismap != none { attrs.insert("ismap", ismap) }
  if width != none { attrs.insert("width", width) }
  if height != none { attrs.insert("height", height) }
  if decoding != none { attrs.insert("decoding", decoding) }
  if loading != none { attrs.insert("loading", loading) }
  if fetchpriority != none { attrs.insert("fetchpriority", fetchpriority) }
  if referrerpolicy != none { attrs.insert("referrerpolicy", referrerpolicy) }
  if sizes != none { attrs.insert("sizes", sizes) }
  if class != none { attrs.insert("class", class) }
  if id != none { attrs.insert("id", id) }
  if style != none { attrs.insert("style", style) }
  std.html.elem("img", attrs: attrs, body)
}
/// Creates a `html <iframe>` element with the given content.
///
/// #link("https://developer.mozilla.org/en-US/docs/Web/HTML/Element/iframe")[MDN Documentation]
///
/// - src (str): The src attribute of the `<iframe>` element.
/// - srcdoc (str): The srcdoc attribute of the `<iframe>` element.
/// - name (str): The name attribute of the `<iframe>` element.
/// - sandbox (str): The sandbox attribute of the `<iframe>` element.
/// - seamless (str): The seamless attribute of the `<iframe>` element.
/// - allowfullscreen (str): The allowfullscreen attribute of the `<iframe>` element.
/// - width (str): The width attribute of the `<iframe>` element.
/// - height (str): The height attribute of the `<iframe>` element.
/// - class (str): The class attribute of the `<iframe>` element.
/// - id (str): The id attribute of the `<iframe>` element.
/// - style (str): The style attribute of the `<iframe>` element.
#let iframe(
  body,
  src: none,
  srcdoc: none,
  name: none,
  sandbox: none,
  seamless: none,
  allowfullscreen: none,
  width: none,
  height: none,
  class: none,
  id: none,
  style: none,
  ..attrs,
) = {
  assert(attrs.pos().len() == 0, message: "can have only one body")
  let attrs = attrs.named()
  if src != none { attrs.insert("src", src) }
  if srcdoc != none { attrs.insert("srcdoc", srcdoc) }
  if name != none { attrs.insert("name", name) }
  if sandbox != none { attrs.insert("sandbox", sandbox) }
  if seamless != none { attrs.insert("seamless", seamless) }
  if allowfullscreen != none { attrs.insert("allowfullscreen", allowfullscreen) }
  if width != none { attrs.insert("width", width) }
  if height != none { attrs.insert("height", height) }
  if class != none { attrs.insert("class", class) }
  if id != none { attrs.insert("id", id) }
  if style != none { attrs.insert("style", style) }
  std.html.elem("iframe", attrs: attrs, body)
}
/// Creates a `html <embed>` element with the given content.
///
/// #link("https://developer.mozilla.org/en-US/docs/Web/HTML/Element/embed")[MDN Documentation]
///
/// - src (str): The src attribute of the `<embed>` element.
/// - type (str): The type attribute of the `<embed>` element.
/// - width (str): The width attribute of the `<embed>` element.
/// - height (str): The height attribute of the `<embed>` element.
/// - class (str): The class attribute of the `<embed>` element.
/// - id (str): The id attribute of the `<embed>` element.
/// - style (str): The style attribute of the `<embed>` element.
#let embed(body, src: none, type: none, width: none, height: none, class: none, id: none, style: none, ..attrs) = {
  assert(attrs.pos().len() == 0, message: "can have only one body")
  let attrs = attrs.named()
  if src != none { attrs.insert("src", src) }
  if type != none { attrs.insert("type", type) }
  if width != none { attrs.insert("width", width) }
  if height != none { attrs.insert("height", height) }
  if class != none { attrs.insert("class", class) }
  if id != none { attrs.insert("id", id) }
  if style != none { attrs.insert("style", style) }
  std.html.elem("embed", attrs: attrs, body)
}
/// Creates a `html <object>` element with the given content.
///
/// #link("https://developer.mozilla.org/en-US/docs/Web/HTML/Element/object")[MDN Documentation]
///
/// - data (str): The data attribute of the `<object>` element.
/// - type (str): The type attribute of the `<object>` element.
/// - typemustmatch (str): The typemustmatch attribute of the `<object>` element.
/// - name (str): The name attribute of the `<object>` element.
/// - usemap (str): The usemap attribute of the `<object>` element.
/// - form (str): The form attribute of the `<object>` element.
/// - width (str): The width attribute of the `<object>` element.
/// - height (str): The height attribute of the `<object>` element.
/// - class (str): The class attribute of the `<object>` element.
/// - id (str): The id attribute of the `<object>` element.
/// - style (str): The style attribute of the `<object>` element.
#let object(
  body,
  data: none,
  type: none,
  typemustmatch: none,
  name: none,
  usemap: none,
  form: none,
  width: none,
  height: none,
  class: none,
  id: none,
  style: none,
  ..attrs,
) = {
  assert(attrs.pos().len() == 0, message: "can have only one body")
  let attrs = attrs.named()
  if data != none { attrs.insert("data", data) }
  if type != none { attrs.insert("type", type) }
  if typemustmatch != none { attrs.insert("typemustmatch", typemustmatch) }
  if name != none { attrs.insert("name", name) }
  if usemap != none { attrs.insert("usemap", usemap) }
  if form != none { attrs.insert("form", form) }
  if width != none { attrs.insert("width", width) }
  if height != none { attrs.insert("height", height) }
  if class != none { attrs.insert("class", class) }
  if id != none { attrs.insert("id", id) }
  if style != none { attrs.insert("style", style) }
  std.html.elem("object", attrs: attrs, body)
}
/// Creates a `html <param>` element with the given content.
///
/// #link("https://developer.mozilla.org/en-US/docs/Web/HTML/Element/param")[MDN Documentation]
///
/// - name (str): The name attribute of the `<param>` element.
/// - value (str): The value attribute of the `<param>` element.
/// - class (str): The class attribute of the `<param>` element.
/// - id (str): The id attribute of the `<param>` element.
/// - style (str): The style attribute of the `<param>` element.
#let param(body, name: none, value: none, class: none, id: none, style: none, ..attrs) = {
  assert(attrs.pos().len() == 0, message: "can have only one body")
  let attrs = attrs.named()
  if name != none { attrs.insert("name", name) }
  if value != none { attrs.insert("value", value) }
  if class != none { attrs.insert("class", class) }
  if id != none { attrs.insert("id", id) }
  if style != none { attrs.insert("style", style) }
  std.html.elem("param", attrs: attrs, body)
}
/// Creates a `html <video>` element with the given content.
///
/// #link("https://developer.mozilla.org/en-US/docs/Web/HTML/Element/video")[MDN Documentation]
///
/// - src (str): The src attribute of the `<video>` element.
/// - crossorigin (str): The crossorigin attribute of the `<video>` element.
/// - poster (str): The poster attribute of the `<video>` element.
/// - preload (str): The preload attribute of the `<video>` element.
/// - autoplay (str): The autoplay attribute of the `<video>` element.
/// - mediagroup (str): The mediagroup attribute of the `<video>` element.
/// - loop (str): The loop attribute of the `<video>` element.
/// - muted (str): The muted attribute of the `<video>` element.
/// - controls (str): The controls attribute of the `<video>` element.
/// - width (str): The width attribute of the `<video>` element.
/// - height (str): The height attribute of the `<video>` element.
/// - class (str): The class attribute of the `<video>` element.
/// - id (str): The id attribute of the `<video>` element.
/// - style (str): The style attribute of the `<video>` element.
#let video(
  body,
  src: none,
  crossorigin: none,
  poster: none,
  preload: none,
  autoplay: none,
  mediagroup: none,
  loop: none,
  muted: none,
  controls: none,
  width: none,
  height: none,
  class: none,
  id: none,
  style: none,
  ..attrs,
) = {
  assert(attrs.pos().len() == 0, message: "can have only one body")
  let attrs = attrs.named()
  if src != none { attrs.insert("src", src) }
  if crossorigin != none { attrs.insert("crossorigin", crossorigin) }
  if poster != none { attrs.insert("poster", poster) }
  if preload != none { attrs.insert("preload", preload) }
  if autoplay != none { attrs.insert("autoplay", autoplay) }
  if mediagroup != none { attrs.insert("mediagroup", mediagroup) }
  if loop != none { attrs.insert("loop", loop) }
  if muted != none { attrs.insert("muted", muted) }
  if controls != none { attrs.insert("controls", controls) }
  if width != none { attrs.insert("width", width) }
  if height != none { attrs.insert("height", height) }
  if class != none { attrs.insert("class", class) }
  if id != none { attrs.insert("id", id) }
  if style != none { attrs.insert("style", style) }
  std.html.elem("video", attrs: attrs, body)
}
/// Creates a `html <audio>` element with the given content.
///
/// #link("https://developer.mozilla.org/en-US/docs/Web/HTML/Element/audio")[MDN Documentation]
///
/// - src (str): The src attribute of the `<audio>` element.
/// - crossorigin (str): The crossorigin attribute of the `<audio>` element.
/// - preload (str): The preload attribute of the `<audio>` element.
/// - autoplay (str): The autoplay attribute of the `<audio>` element.
/// - mediagroup (str): The mediagroup attribute of the `<audio>` element.
/// - loop (str): The loop attribute of the `<audio>` element.
/// - muted (str): The muted attribute of the `<audio>` element.
/// - controls (str): The controls attribute of the `<audio>` element.
/// - class (str): The class attribute of the `<audio>` element.
/// - id (str): The id attribute of the `<audio>` element.
/// - style (str): The style attribute of the `<audio>` element.
#let audio(
  body,
  src: none,
  crossorigin: none,
  preload: none,
  autoplay: none,
  mediagroup: none,
  loop: none,
  muted: none,
  controls: none,
  class: none,
  id: none,
  style: none,
  ..attrs,
) = {
  assert(attrs.pos().len() == 0, message: "can have only one body")
  let attrs = attrs.named()
  if src != none { attrs.insert("src", src) }
  if crossorigin != none { attrs.insert("crossorigin", crossorigin) }
  if preload != none { attrs.insert("preload", preload) }
  if autoplay != none { attrs.insert("autoplay", autoplay) }
  if mediagroup != none { attrs.insert("mediagroup", mediagroup) }
  if loop != none { attrs.insert("loop", loop) }
  if muted != none { attrs.insert("muted", muted) }
  if controls != none { attrs.insert("controls", controls) }
  if class != none { attrs.insert("class", class) }
  if id != none { attrs.insert("id", id) }
  if style != none { attrs.insert("style", style) }
  std.html.elem("audio", attrs: attrs, body)
}
/// Creates a `html <source>` element with the given content.
///
/// #link("https://developer.mozilla.org/en-US/docs/Web/HTML/Element/source")[MDN Documentation]
///
/// - src (str): The src attribute of the `<source>` element.
/// - type (str): The type attribute of the `<source>` element.
/// - class (str): The class attribute of the `<source>` element.
/// - id (str): The id attribute of the `<source>` element.
/// - style (str): The style attribute of the `<source>` element.
#let source(body, src: none, type: none, class: none, id: none, style: none, ..attrs) = {
  assert(attrs.pos().len() == 0, message: "can have only one body")
  let attrs = attrs.named()
  if src != none { attrs.insert("src", src) }
  if type != none { attrs.insert("type", type) }
  if class != none { attrs.insert("class", class) }
  if id != none { attrs.insert("id", id) }
  if style != none { attrs.insert("style", style) }
  std.html.elem("source", attrs: attrs, body)
}
/// Creates a `html <track>` element with the given content.
///
/// #link("https://developer.mozilla.org/en-US/docs/Web/HTML/Element/track")[MDN Documentation]
///
/// - default (str): The default attribute of the `<track>` element.
/// - kind (str): The kind attribute of the `<track>` element.
/// - label (str): The label attribute of the `<track>` element.
/// - src (str): The src attribute of the `<track>` element.
/// - srclang (str): The srclang attribute of the `<track>` element.
/// - class (str): The class attribute of the `<track>` element.
/// - id (str): The id attribute of the `<track>` element.
/// - style (str): The style attribute of the `<track>` element.
#let track(
  body,
  default: none,
  kind: none,
  label: none,
  src: none,
  srclang: none,
  class: none,
  id: none,
  style: none,
  ..attrs,
) = {
  assert(attrs.pos().len() == 0, message: "can have only one body")
  let attrs = attrs.named()
  if default != none { attrs.insert("default", default) }
  if kind != none { attrs.insert("kind", kind) }
  if label != none { attrs.insert("label", label) }
  if src != none { attrs.insert("src", src) }
  if srclang != none { attrs.insert("srclang", srclang) }
  if class != none { attrs.insert("class", class) }
  if id != none { attrs.insert("id", id) }
  if style != none { attrs.insert("style", style) }
  std.html.elem("track", attrs: attrs, body)
}
/// Creates a `html <map>` element with the given content.
///
/// #link("https://developer.mozilla.org/en-US/docs/Web/HTML/Element/map")[MDN Documentation]
///
/// - name (str): The name attribute of the `<map>` element.
/// - class (str): The class attribute of the `<map>` element.
/// - id (str): The id attribute of the `<map>` element.
/// - style (str): The style attribute of the `<map>` element.
#let map(body, name: none, class: none, id: none, style: none, ..attrs) = {
  assert(attrs.pos().len() == 0, message: "can have only one body")
  let attrs = attrs.named()
  if name != none { attrs.insert("name", name) }
  if class != none { attrs.insert("class", class) }
  if id != none { attrs.insert("id", id) }
  if style != none { attrs.insert("style", style) }
  std.html.elem("map", attrs: attrs, body)
}
/// Creates a `html <area>` element with the given content.
///
/// #link("https://developer.mozilla.org/en-US/docs/Web/HTML/Element/area")[MDN Documentation]
///
/// - alt (str): The alt attribute of the `<area>` element.
/// - coords (str): The coords attribute of the `<area>` element.
/// - shape (str): The shape attribute of the `<area>` element.
/// - href (str): The href attribute of the `<area>` element.
/// - target (str): The target attribute of the `<area>` element.
/// - download (str): The download attribute of the `<area>` element.
/// - ping (str): The ping attribute of the `<area>` element.
/// - rel (str): The rel attribute of the `<area>` element.
/// - hreflang (str): The hreflang attribute of the `<area>` element.
/// - type (str): The type attribute of the `<area>` element.
/// - class (str): The class attribute of the `<area>` element.
/// - id (str): The id attribute of the `<area>` element.
/// - style (str): The style attribute of the `<area>` element.
#let area(
  body,
  alt: none,
  coords: none,
  shape: none,
  href: none,
  target: none,
  download: none,
  ping: none,
  rel: none,
  hreflang: none,
  type: none,
  class: none,
  id: none,
  style: none,
  ..attrs,
) = {
  assert(attrs.pos().len() == 0, message: "can have only one body")
  let attrs = attrs.named()
  if alt != none { attrs.insert("alt", alt) }
  if coords != none { attrs.insert("coords", coords) }
  if shape != none { attrs.insert("shape", shape) }
  if href != none { attrs.insert("href", href) }
  if target != none { attrs.insert("target", target) }
  if download != none { attrs.insert("download", download) }
  if ping != none { attrs.insert("ping", ping) }
  if rel != none { attrs.insert("rel", rel) }
  if hreflang != none { attrs.insert("hreflang", hreflang) }
  if type != none { attrs.insert("type", type) }
  if class != none { attrs.insert("class", class) }
  if id != none { attrs.insert("id", id) }
  if style != none { attrs.insert("style", style) }
  std.html.elem("area", attrs: attrs, body)
}
/// Creates a `html <table>` element with the given content.
///
/// #link("https://developer.mozilla.org/en-US/docs/Web/HTML/Element/table")[MDN Documentation]
///
/// - border (str): The border attribute of the `<table>` element.
/// - class (str): The class attribute of the `<table>` element.
/// - id (str): The id attribute of the `<table>` element.
/// - style (str): The style attribute of the `<table>` element.
#let table(body, border: none, class: none, id: none, style: none, ..attrs) = {
  assert(attrs.pos().len() == 0, message: "can have only one body")
  let attrs = attrs.named()
  if border != none { attrs.insert("border", border) }
  if class != none { attrs.insert("class", class) }
  if id != none { attrs.insert("id", id) }
  if style != none { attrs.insert("style", style) }
  std.html.elem("table", attrs: attrs, body)
}
/// Creates a `html <caption>` element with the given content.
///
/// #link("https://developer.mozilla.org/en-US/docs/Web/HTML/Element/caption")[MDN Documentation]
///
/// - class (str): The class attribute of the `<caption>` element.
/// - id (str): The id attribute of the `<caption>` element.
/// - style (str): The style attribute of the `<caption>` element.
#let caption(body, class: none, id: none, style: none, ..attrs) = {
  assert(attrs.pos().len() == 0, message: "can have only one body")
  let attrs = attrs.named()
  if class != none { attrs.insert("class", class) }
  if id != none { attrs.insert("id", id) }
  if style != none { attrs.insert("style", style) }
  std.html.elem("caption", attrs: attrs, body)
}
/// Creates a `html <colgroup>` element with the given content.
///
/// #link("https://developer.mozilla.org/en-US/docs/Web/HTML/Element/colgroup")[MDN Documentation]
///
/// - span (str): The span attribute of the `<colgroup>` element.
/// - class (str): The class attribute of the `<colgroup>` element.
/// - id (str): The id attribute of the `<colgroup>` element.
/// - style (str): The style attribute of the `<colgroup>` element.
#let colgroup(body, span: none, class: none, id: none, style: none, ..attrs) = {
  assert(attrs.pos().len() == 0, message: "can have only one body")
  let attrs = attrs.named()
  if span != none { attrs.insert("span", span) }
  if class != none { attrs.insert("class", class) }
  if id != none { attrs.insert("id", id) }
  if style != none { attrs.insert("style", style) }
  std.html.elem("colgroup", attrs: attrs, body)
}
/// Creates a `html <col>` element with the given content.
///
/// #link("https://developer.mozilla.org/en-US/docs/Web/HTML/Element/col")[MDN Documentation]
///
/// - span (str): The span attribute of the `<col>` element.
/// - class (str): The class attribute of the `<col>` element.
/// - id (str): The id attribute of the `<col>` element.
/// - style (str): The style attribute of the `<col>` element.
#let col(body, span: none, class: none, id: none, style: none, ..attrs) = {
  assert(attrs.pos().len() == 0, message: "can have only one body")
  let attrs = attrs.named()
  if span != none { attrs.insert("span", span) }
  if class != none { attrs.insert("class", class) }
  if id != none { attrs.insert("id", id) }
  if style != none { attrs.insert("style", style) }
  std.html.elem("col", attrs: attrs, body)
}
/// Creates a `html <tbody>` element with the given content.
///
/// #link("https://developer.mozilla.org/en-US/docs/Web/HTML/Element/tbody")[MDN Documentation]
///
/// - class (str): The class attribute of the `<tbody>` element.
/// - id (str): The id attribute of the `<tbody>` element.
/// - style (str): The style attribute of the `<tbody>` element.
#let tbody(body, class: none, id: none, style: none, ..attrs) = {
  assert(attrs.pos().len() == 0, message: "can have only one body")
  let attrs = attrs.named()
  if class != none { attrs.insert("class", class) }
  if id != none { attrs.insert("id", id) }
  if style != none { attrs.insert("style", style) }
  std.html.elem("tbody", attrs: attrs, body)
}
/// Creates a `html <thead>` element with the given content.
///
/// #link("https://developer.mozilla.org/en-US/docs/Web/HTML/Element/thead")[MDN Documentation]
///
/// - class (str): The class attribute of the `<thead>` element.
/// - id (str): The id attribute of the `<thead>` element.
/// - style (str): The style attribute of the `<thead>` element.
#let thead(body, class: none, id: none, style: none, ..attrs) = {
  assert(attrs.pos().len() == 0, message: "can have only one body")
  let attrs = attrs.named()
  if class != none { attrs.insert("class", class) }
  if id != none { attrs.insert("id", id) }
  if style != none { attrs.insert("style", style) }
  std.html.elem("thead", attrs: attrs, body)
}
/// Creates a `html <tfoot>` element with the given content.
///
/// #link("https://developer.mozilla.org/en-US/docs/Web/HTML/Element/tfoot")[MDN Documentation]
///
/// - class (str): The class attribute of the `<tfoot>` element.
/// - id (str): The id attribute of the `<tfoot>` element.
/// - style (str): The style attribute of the `<tfoot>` element.
#let tfoot(body, class: none, id: none, style: none, ..attrs) = {
  assert(attrs.pos().len() == 0, message: "can have only one body")
  let attrs = attrs.named()
  if class != none { attrs.insert("class", class) }
  if id != none { attrs.insert("id", id) }
  if style != none { attrs.insert("style", style) }
  std.html.elem("tfoot", attrs: attrs, body)
}
/// Creates a `html <tr>` element with the given content.
///
/// #link("https://developer.mozilla.org/en-US/docs/Web/HTML/Element/tr")[MDN Documentation]
///
/// - class (str): The class attribute of the `<tr>` element.
/// - id (str): The id attribute of the `<tr>` element.
/// - style (str): The style attribute of the `<tr>` element.
#let tr(body, class: none, id: none, style: none, ..attrs) = {
  assert(attrs.pos().len() == 0, message: "can have only one body")
  let attrs = attrs.named()
  if class != none { attrs.insert("class", class) }
  if id != none { attrs.insert("id", id) }
  if style != none { attrs.insert("style", style) }
  std.html.elem("tr", attrs: attrs, body)
}
/// Creates a `html <td>` element with the given content.
///
/// #link("https://developer.mozilla.org/en-US/docs/Web/HTML/Element/td")[MDN Documentation]
///
/// - colspan (str): The colspan attribute of the `<td>` element.
/// - rowspan (str): The rowspan attribute of the `<td>` element.
/// - headers (str): The headers attribute of the `<td>` element.
/// - class (str): The class attribute of the `<td>` element.
/// - id (str): The id attribute of the `<td>` element.
/// - style (str): The style attribute of the `<td>` element.
#let td(body, colspan: none, rowspan: none, headers: none, class: none, id: none, style: none, ..attrs) = {
  assert(attrs.pos().len() == 0, message: "can have only one body")
  let attrs = attrs.named()
  if colspan != none { attrs.insert("colspan", colspan) }
  if rowspan != none { attrs.insert("rowspan", rowspan) }
  if headers != none { attrs.insert("headers", headers) }
  if class != none { attrs.insert("class", class) }
  if id != none { attrs.insert("id", id) }
  if style != none { attrs.insert("style", style) }
  std.html.elem("td", attrs: attrs, body)
}
/// Creates a `html <th>` element with the given content.
///
/// #link("https://developer.mozilla.org/en-US/docs/Web/HTML/Element/th")[MDN Documentation]
///
/// - colspan (str): The colspan attribute of the `<th>` element.
/// - rowspan (str): The rowspan attribute of the `<th>` element.
/// - headers (str): The headers attribute of the `<th>` element.
/// - scope (str): The scope attribute of the `<th>` element.
/// - sorted (str): The sorted attribute of the `<th>` element.
/// - abbr (str): The abbr attribute of the `<th>` element.
/// - class (str): The class attribute of the `<th>` element.
/// - id (str): The id attribute of the `<th>` element.
/// - style (str): The style attribute of the `<th>` element.
#let th(
  body,
  colspan: none,
  rowspan: none,
  headers: none,
  scope: none,
  sorted: none,
  abbr: none,
  class: none,
  id: none,
  style: none,
  ..attrs,
) = {
  assert(attrs.pos().len() == 0, message: "can have only one body")
  let attrs = attrs.named()
  if colspan != none { attrs.insert("colspan", colspan) }
  if rowspan != none { attrs.insert("rowspan", rowspan) }
  if headers != none { attrs.insert("headers", headers) }
  if scope != none { attrs.insert("scope", scope) }
  if sorted != none { attrs.insert("sorted", sorted) }
  if abbr != none { attrs.insert("abbr", abbr) }
  if class != none { attrs.insert("class", class) }
  if id != none { attrs.insert("id", id) }
  if style != none { attrs.insert("style", style) }
  std.html.elem("th", attrs: attrs, body)
}
/// Creates a `html <form>` element with the given content.
///
/// #link("https://developer.mozilla.org/en-US/docs/Web/HTML/Element/form")[MDN Documentation]
///
/// - accept-charset (str): The accept-charset attribute of the `<form>` element.
/// - action (str): The action attribute of the `<form>` element.
/// - autocomplete (str): The autocomplete attribute of the `<form>` element.
/// - enctype (str): The enctype attribute of the `<form>` element.
/// - method (str): The method attribute of the `<form>` element.
/// - name (str): The name attribute of the `<form>` element.
/// - novalidate (str): The novalidate attribute of the `<form>` element.
/// - target (str): The target attribute of the `<form>` element.
/// - class (str): The class attribute of the `<form>` element.
/// - id (str): The id attribute of the `<form>` element.
/// - style (str): The style attribute of the `<form>` element.
#let form(
  body,
  accept-charset: none,
  action: none,
  autocomplete: none,
  enctype: none,
  method: none,
  name: none,
  novalidate: none,
  target: none,
  class: none,
  id: none,
  style: none,
  ..attrs,
) = {
  assert(attrs.pos().len() == 0, message: "can have only one body")
  let attrs = attrs.named()
  if accept-charset != none { attrs.insert("accept-charset", accept-charset) }
  if action != none { attrs.insert("action", action) }
  if autocomplete != none { attrs.insert("autocomplete", autocomplete) }
  if enctype != none { attrs.insert("enctype", enctype) }
  if method != none { attrs.insert("method", method) }
  if name != none { attrs.insert("name", name) }
  if novalidate != none { attrs.insert("novalidate", novalidate) }
  if target != none { attrs.insert("target", target) }
  if class != none { attrs.insert("class", class) }
  if id != none { attrs.insert("id", id) }
  if style != none { attrs.insert("style", style) }
  std.html.elem("form", attrs: attrs, body)
}
/// Creates a `html <label>` element with the given content.
///
/// #link("https://developer.mozilla.org/en-US/docs/Web/HTML/Element/label")[MDN Documentation]
///
/// - form (str): The form attribute of the `<label>` element.
/// - x-for (str): The for attribute of the `<label>` element.
/// - class (str): The class attribute of the `<label>` element.
/// - id (str): The id attribute of the `<label>` element.
/// - style (str): The style attribute of the `<label>` element.
#let label(body, form: none, x-for: none, class: none, id: none, style: none, ..attrs) = {
  assert(attrs.pos().len() == 0, message: "can have only one body")
  let attrs = attrs.named()
  if form != none { attrs.insert("form", form) }
  if x-for != none { attrs.insert("for", x-for) }
  if class != none { attrs.insert("class", class) }
  if id != none { attrs.insert("id", id) }
  if style != none { attrs.insert("style", style) }
  std.html.elem("label", attrs: attrs, body)
}
/// Creates a `html <input>` element with the given content.
///
/// #link("https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input")[MDN Documentation]
///
/// - accept (str): The accept attribute of the `<input>` element.
/// - alt (str): The alt attribute of the `<input>` element.
/// - autocomplete (str): The autocomplete attribute of the `<input>` element.
/// - autofocus (str): The autofocus attribute of the `<input>` element.
/// - checked (str): The checked attribute of the `<input>` element.
/// - dirname (str): The dirname attribute of the `<input>` element.
/// - disabled (str): The disabled attribute of the `<input>` element.
/// - form (str): The form attribute of the `<input>` element.
/// - formaction (str): The formaction attribute of the `<input>` element.
/// - formenctype (str): The formenctype attribute of the `<input>` element.
/// - formmethod (str): The formmethod attribute of the `<input>` element.
/// - formnovalidate (str): The formnovalidate attribute of the `<input>` element.
/// - formtarget (str): The formtarget attribute of the `<input>` element.
/// - height (str): The height attribute of the `<input>` element.
/// - inputmode (str): The inputmode attribute of the `<input>` element.
/// - list (str): The list attribute of the `<input>` element.
/// - max (str): The max attribute of the `<input>` element.
/// - maxlength (str): The maxlength attribute of the `<input>` element.
/// - min (str): The min attribute of the `<input>` element.
/// - minlength (str): The minlength attribute of the `<input>` element.
/// - multiple (str): The multiple attribute of the `<input>` element.
/// - name (str): The name attribute of the `<input>` element.
/// - pattern (str): The pattern attribute of the `<input>` element.
/// - placeholder (str): The placeholder attribute of the `<input>` element.
/// - popovertarget (str): The popovertarget attribute of the `<input>` element.
/// - popovertargetaction (str): The popovertargetaction attribute of the `<input>` element.
/// - readonly (str): The readonly attribute of the `<input>` element.
/// - required (str): The required attribute of the `<input>` element.
/// - size (str): The size attribute of the `<input>` element.
/// - src (str): The src attribute of the `<input>` element.
/// - step (str): The step attribute of the `<input>` element.
/// - type (str): The type attribute of the `<input>` element.
/// - value (str): The value attribute of the `<input>` element.
/// - width (str): The width attribute of the `<input>` element.
/// - class (str): The class attribute of the `<input>` element.
/// - id (str): The id attribute of the `<input>` element.
/// - style (str): The style attribute of the `<input>` element.
#let input(
  body,
  accept: none,
  alt: none,
  autocomplete: none,
  autofocus: none,
  checked: none,
  dirname: none,
  disabled: none,
  form: none,
  formaction: none,
  formenctype: none,
  formmethod: none,
  formnovalidate: none,
  formtarget: none,
  height: none,
  inputmode: none,
  list: none,
  max: none,
  maxlength: none,
  min: none,
  minlength: none,
  multiple: none,
  name: none,
  pattern: none,
  placeholder: none,
  popovertarget: none,
  popovertargetaction: none,
  readonly: none,
  required: none,
  size: none,
  src: none,
  step: none,
  type: none,
  value: none,
  width: none,
  class: none,
  id: none,
  style: none,
  ..attrs,
) = {
  assert(attrs.pos().len() == 0, message: "can have only one body")
  let attrs = attrs.named()
  if accept != none { attrs.insert("accept", accept) }
  if alt != none { attrs.insert("alt", alt) }
  if autocomplete != none { attrs.insert("autocomplete", autocomplete) }
  if autofocus != none { attrs.insert("autofocus", autofocus) }
  if checked != none { attrs.insert("checked", checked) }
  if dirname != none { attrs.insert("dirname", dirname) }
  if disabled != none { attrs.insert("disabled", disabled) }
  if form != none { attrs.insert("form", form) }
  if formaction != none { attrs.insert("formaction", formaction) }
  if formenctype != none { attrs.insert("formenctype", formenctype) }
  if formmethod != none { attrs.insert("formmethod", formmethod) }
  if formnovalidate != none { attrs.insert("formnovalidate", formnovalidate) }
  if formtarget != none { attrs.insert("formtarget", formtarget) }
  if height != none { attrs.insert("height", height) }
  if inputmode != none { attrs.insert("inputmode", inputmode) }
  if list != none { attrs.insert("list", list) }
  if max != none { attrs.insert("max", max) }
  if maxlength != none { attrs.insert("maxlength", maxlength) }
  if min != none { attrs.insert("min", min) }
  if minlength != none { attrs.insert("minlength", minlength) }
  if multiple != none { attrs.insert("multiple", multiple) }
  if name != none { attrs.insert("name", name) }
  if pattern != none { attrs.insert("pattern", pattern) }
  if placeholder != none { attrs.insert("placeholder", placeholder) }
  if popovertarget != none { attrs.insert("popovertarget", popovertarget) }
  if popovertargetaction != none { attrs.insert("popovertargetaction", popovertargetaction) }
  if readonly != none { attrs.insert("readonly", readonly) }
  if required != none { attrs.insert("required", required) }
  if size != none { attrs.insert("size", size) }
  if src != none { attrs.insert("src", src) }
  if step != none { attrs.insert("step", step) }
  if type != none { attrs.insert("type", type) }
  if value != none { attrs.insert("value", value) }
  if width != none { attrs.insert("width", width) }
  if class != none { attrs.insert("class", class) }
  if id != none { attrs.insert("id", id) }
  if style != none { attrs.insert("style", style) }
  std.html.elem("input", attrs: attrs, body)
}
/// Creates a `html <button>` element with the given content.
///
/// #link("https://developer.mozilla.org/en-US/docs/Web/HTML/Element/button")[MDN Documentation]
///
/// - autofocus (str): The autofocus attribute of the `<button>` element.
/// - disabled (str): The disabled attribute of the `<button>` element.
/// - form (str): The form attribute of the `<button>` element.
/// - formaction (str): The formaction attribute of the `<button>` element.
/// - formenctype (str): The formenctype attribute of the `<button>` element.
/// - formmethod (str): The formmethod attribute of the `<button>` element.
/// - formnovalidate (str): The formnovalidate attribute of the `<button>` element.
/// - formtarget (str): The formtarget attribute of the `<button>` element.
/// - name (str): The name attribute of the `<button>` element.
/// - popovertarget (str): The popovertarget attribute of the `<button>` element.
/// - popovertargetaction (str): The popovertargetaction attribute of the `<button>` element.
/// - type (str): The type attribute of the `<button>` element.
/// - value (str): The value attribute of the `<button>` element.
/// - class (str): The class attribute of the `<button>` element.
/// - id (str): The id attribute of the `<button>` element.
/// - style (str): The style attribute of the `<button>` element.
#let button(
  body,
  autofocus: none,
  disabled: none,
  form: none,
  formaction: none,
  formenctype: none,
  formmethod: none,
  formnovalidate: none,
  formtarget: none,
  name: none,
  popovertarget: none,
  popovertargetaction: none,
  type: none,
  value: none,
  class: none,
  id: none,
  style: none,
  ..attrs,
) = {
  assert(attrs.pos().len() == 0, message: "can have only one body")
  let attrs = attrs.named()
  if autofocus != none { attrs.insert("autofocus", autofocus) }
  if disabled != none { attrs.insert("disabled", disabled) }
  if form != none { attrs.insert("form", form) }
  if formaction != none { attrs.insert("formaction", formaction) }
  if formenctype != none { attrs.insert("formenctype", formenctype) }
  if formmethod != none { attrs.insert("formmethod", formmethod) }
  if formnovalidate != none { attrs.insert("formnovalidate", formnovalidate) }
  if formtarget != none { attrs.insert("formtarget", formtarget) }
  if name != none { attrs.insert("name", name) }
  if popovertarget != none { attrs.insert("popovertarget", popovertarget) }
  if popovertargetaction != none { attrs.insert("popovertargetaction", popovertargetaction) }
  if type != none { attrs.insert("type", type) }
  if value != none { attrs.insert("value", value) }
  if class != none { attrs.insert("class", class) }
  if id != none { attrs.insert("id", id) }
  if style != none { attrs.insert("style", style) }
  std.html.elem("button", attrs: attrs, body)
}
/// Creates a `html <select>` element with the given content.
///
/// #link("https://developer.mozilla.org/en-US/docs/Web/HTML/Element/select")[MDN Documentation]
///
/// - autocomplete (str): The autocomplete attribute of the `<select>` element.
/// - autofocus (str): The autofocus attribute of the `<select>` element.
/// - disabled (str): The disabled attribute of the `<select>` element.
/// - form (str): The form attribute of the `<select>` element.
/// - multiple (str): The multiple attribute of the `<select>` element.
/// - name (str): The name attribute of the `<select>` element.
/// - required (str): The required attribute of the `<select>` element.
/// - size (str): The size attribute of the `<select>` element.
/// - class (str): The class attribute of the `<select>` element.
/// - id (str): The id attribute of the `<select>` element.
/// - style (str): The style attribute of the `<select>` element.
#let select(
  body,
  autocomplete: none,
  autofocus: none,
  disabled: none,
  form: none,
  multiple: none,
  name: none,
  required: none,
  size: none,
  class: none,
  id: none,
  style: none,
  ..attrs,
) = {
  assert(attrs.pos().len() == 0, message: "can have only one body")
  let attrs = attrs.named()
  if autocomplete != none { attrs.insert("autocomplete", autocomplete) }
  if autofocus != none { attrs.insert("autofocus", autofocus) }
  if disabled != none { attrs.insert("disabled", disabled) }
  if form != none { attrs.insert("form", form) }
  if multiple != none { attrs.insert("multiple", multiple) }
  if name != none { attrs.insert("name", name) }
  if required != none { attrs.insert("required", required) }
  if size != none { attrs.insert("size", size) }
  if class != none { attrs.insert("class", class) }
  if id != none { attrs.insert("id", id) }
  if style != none { attrs.insert("style", style) }
  std.html.elem("select", attrs: attrs, body)
}
/// Creates a `html <datalist>` element with the given content.
///
/// #link("https://developer.mozilla.org/en-US/docs/Web/HTML/Element/datalist")[MDN Documentation]
///
/// - class (str): The class attribute of the `<datalist>` element.
/// - id (str): The id attribute of the `<datalist>` element.
/// - style (str): The style attribute of the `<datalist>` element.
#let datalist(body, class: none, id: none, style: none, ..attrs) = {
  assert(attrs.pos().len() == 0, message: "can have only one body")
  let attrs = attrs.named()
  if class != none { attrs.insert("class", class) }
  if id != none { attrs.insert("id", id) }
  if style != none { attrs.insert("style", style) }
  std.html.elem("datalist", attrs: attrs, body)
}
/// Creates a `html <optgroup>` element with the given content.
///
/// #link("https://developer.mozilla.org/en-US/docs/Web/HTML/Element/optgroup")[MDN Documentation]
///
/// - disabled (str): The disabled attribute of the `<optgroup>` element.
/// - label (str): The label attribute of the `<optgroup>` element.
/// - class (str): The class attribute of the `<optgroup>` element.
/// - id (str): The id attribute of the `<optgroup>` element.
/// - style (str): The style attribute of the `<optgroup>` element.
#let optgroup(body, disabled: none, label: none, class: none, id: none, style: none, ..attrs) = {
  assert(attrs.pos().len() == 0, message: "can have only one body")
  let attrs = attrs.named()
  if disabled != none { attrs.insert("disabled", disabled) }
  if label != none { attrs.insert("label", label) }
  if class != none { attrs.insert("class", class) }
  if id != none { attrs.insert("id", id) }
  if style != none { attrs.insert("style", style) }
  std.html.elem("optgroup", attrs: attrs, body)
}
/// Creates a `html <option>` element with the given content.
///
/// #link("https://developer.mozilla.org/en-US/docs/Web/HTML/Element/option")[MDN Documentation]
///
/// - disabled (str): The disabled attribute of the `<option>` element.
/// - label (str): The label attribute of the `<option>` element.
/// - selected (str): The selected attribute of the `<option>` element.
/// - value (str): The value attribute of the `<option>` element.
/// - class (str): The class attribute of the `<option>` element.
/// - id (str): The id attribute of the `<option>` element.
/// - style (str): The style attribute of the `<option>` element.
#let option(
  body,
  disabled: none,
  label: none,
  selected: none,
  value: none,
  class: none,
  id: none,
  style: none,
  ..attrs,
) = {
  assert(attrs.pos().len() == 0, message: "can have only one body")
  let attrs = attrs.named()
  if disabled != none { attrs.insert("disabled", disabled) }
  if label != none { attrs.insert("label", label) }
  if selected != none { attrs.insert("selected", selected) }
  if value != none { attrs.insert("value", value) }
  if class != none { attrs.insert("class", class) }
  if id != none { attrs.insert("id", id) }
  if style != none { attrs.insert("style", style) }
  std.html.elem("option", attrs: attrs, body)
}
/// Creates a `html <textarea>` element with the given content.
///
/// #link("https://developer.mozilla.org/en-US/docs/Web/HTML/Element/textarea")[MDN Documentation]
///
/// - autocomplete (str): The autocomplete attribute of the `<textarea>` element.
/// - autofocus (str): The autofocus attribute of the `<textarea>` element.
/// - cols (str): The cols attribute of the `<textarea>` element.
/// - dirname (str): The dirname attribute of the `<textarea>` element.
/// - disabled (str): The disabled attribute of the `<textarea>` element.
/// - form (str): The form attribute of the `<textarea>` element.
/// - inputmode (str): The inputmode attribute of the `<textarea>` element.
/// - maxlength (str): The maxlength attribute of the `<textarea>` element.
/// - minlength (str): The minlength attribute of the `<textarea>` element.
/// - name (str): The name attribute of the `<textarea>` element.
/// - placeholder (str): The placeholder attribute of the `<textarea>` element.
/// - readonly (str): The readonly attribute of the `<textarea>` element.
/// - required (str): The required attribute of the `<textarea>` element.
/// - rows (str): The rows attribute of the `<textarea>` element.
/// - wrap (str): The wrap attribute of the `<textarea>` element.
/// - class (str): The class attribute of the `<textarea>` element.
/// - id (str): The id attribute of the `<textarea>` element.
/// - style (str): The style attribute of the `<textarea>` element.
#let textarea(
  body,
  autocomplete: none,
  autofocus: none,
  cols: none,
  dirname: none,
  disabled: none,
  form: none,
  inputmode: none,
  maxlength: none,
  minlength: none,
  name: none,
  placeholder: none,
  readonly: none,
  required: none,
  rows: none,
  wrap: none,
  class: none,
  id: none,
  style: none,
  ..attrs,
) = {
  assert(attrs.pos().len() == 0, message: "can have only one body")
  let attrs = attrs.named()
  if autocomplete != none { attrs.insert("autocomplete", autocomplete) }
  if autofocus != none { attrs.insert("autofocus", autofocus) }
  if cols != none { attrs.insert("cols", cols) }
  if dirname != none { attrs.insert("dirname", dirname) }
  if disabled != none { attrs.insert("disabled", disabled) }
  if form != none { attrs.insert("form", form) }
  if inputmode != none { attrs.insert("inputmode", inputmode) }
  if maxlength != none { attrs.insert("maxlength", maxlength) }
  if minlength != none { attrs.insert("minlength", minlength) }
  if name != none { attrs.insert("name", name) }
  if placeholder != none { attrs.insert("placeholder", placeholder) }
  if readonly != none { attrs.insert("readonly", readonly) }
  if required != none { attrs.insert("required", required) }
  if rows != none { attrs.insert("rows", rows) }
  if wrap != none { attrs.insert("wrap", wrap) }
  if class != none { attrs.insert("class", class) }
  if id != none { attrs.insert("id", id) }
  if style != none { attrs.insert("style", style) }
  std.html.elem("textarea", attrs: attrs, body)
}
/// Creates a `html <output>` element with the given content.
///
/// #link("https://developer.mozilla.org/en-US/docs/Web/HTML/Element/output")[MDN Documentation]
///
/// - x-for (str): The for attribute of the `<output>` element.
/// - form (str): The form attribute of the `<output>` element.
/// - name (str): The name attribute of the `<output>` element.
/// - class (str): The class attribute of the `<output>` element.
/// - id (str): The id attribute of the `<output>` element.
/// - style (str): The style attribute of the `<output>` element.
#let output(body, x-for: none, form: none, name: none, class: none, id: none, style: none, ..attrs) = {
  assert(attrs.pos().len() == 0, message: "can have only one body")
  let attrs = attrs.named()
  if x-for != none { attrs.insert("for", x-for) }
  if form != none { attrs.insert("form", form) }
  if name != none { attrs.insert("name", name) }
  if class != none { attrs.insert("class", class) }
  if id != none { attrs.insert("id", id) }
  if style != none { attrs.insert("style", style) }
  std.html.elem("output", attrs: attrs, body)
}
/// Creates a `html <progress>` element with the given content.
///
/// #link("https://developer.mozilla.org/en-US/docs/Web/HTML/Element/progress")[MDN Documentation]
///
/// - value (str): The value attribute of the `<progress>` element.
/// - max (str): The max attribute of the `<progress>` element.
/// - class (str): The class attribute of the `<progress>` element.
/// - id (str): The id attribute of the `<progress>` element.
/// - style (str): The style attribute of the `<progress>` element.
#let progress(body, value: none, max: none, class: none, id: none, style: none, ..attrs) = {
  assert(attrs.pos().len() == 0, message: "can have only one body")
  let attrs = attrs.named()
  if value != none { attrs.insert("value", value) }
  if max != none { attrs.insert("max", max) }
  if class != none { attrs.insert("class", class) }
  if id != none { attrs.insert("id", id) }
  if style != none { attrs.insert("style", style) }
  std.html.elem("progress", attrs: attrs, body)
}
/// Creates a `html <meter>` element with the given content.
///
/// #link("https://developer.mozilla.org/en-US/docs/Web/HTML/Element/meter")[MDN Documentation]
///
/// - value (str): The value attribute of the `<meter>` element.
/// - min (str): The min attribute of the `<meter>` element.
/// - max (str): The max attribute of the `<meter>` element.
/// - low (str): The low attribute of the `<meter>` element.
/// - high (str): The high attribute of the `<meter>` element.
/// - optimum (str): The optimum attribute of the `<meter>` element.
/// - class (str): The class attribute of the `<meter>` element.
/// - id (str): The id attribute of the `<meter>` element.
/// - style (str): The style attribute of the `<meter>` element.
#let meter(
  body,
  value: none,
  min: none,
  max: none,
  low: none,
  high: none,
  optimum: none,
  class: none,
  id: none,
  style: none,
  ..attrs,
) = {
  assert(attrs.pos().len() == 0, message: "can have only one body")
  let attrs = attrs.named()
  if value != none { attrs.insert("value", value) }
  if min != none { attrs.insert("min", min) }
  if max != none { attrs.insert("max", max) }
  if low != none { attrs.insert("low", low) }
  if high != none { attrs.insert("high", high) }
  if optimum != none { attrs.insert("optimum", optimum) }
  if class != none { attrs.insert("class", class) }
  if id != none { attrs.insert("id", id) }
  if style != none { attrs.insert("style", style) }
  std.html.elem("meter", attrs: attrs, body)
}
/// Creates a `html <fieldset>` element with the given content.
///
/// #link("https://developer.mozilla.org/en-US/docs/Web/HTML/Element/fieldset")[MDN Documentation]
///
/// - disabled (str): The disabled attribute of the `<fieldset>` element.
/// - form (str): The form attribute of the `<fieldset>` element.
/// - name (str): The name attribute of the `<fieldset>` element.
/// - class (str): The class attribute of the `<fieldset>` element.
/// - id (str): The id attribute of the `<fieldset>` element.
/// - style (str): The style attribute of the `<fieldset>` element.
#let fieldset(body, disabled: none, form: none, name: none, class: none, id: none, style: none, ..attrs) = {
  assert(attrs.pos().len() == 0, message: "can have only one body")
  let attrs = attrs.named()
  if disabled != none { attrs.insert("disabled", disabled) }
  if form != none { attrs.insert("form", form) }
  if name != none { attrs.insert("name", name) }
  if class != none { attrs.insert("class", class) }
  if id != none { attrs.insert("id", id) }
  if style != none { attrs.insert("style", style) }
  std.html.elem("fieldset", attrs: attrs, body)
}
/// Creates a `html <legend>` element with the given content.
///
/// #link("https://developer.mozilla.org/en-US/docs/Web/HTML/Element/legend")[MDN Documentation]
///
/// - class (str): The class attribute of the `<legend>` element.
/// - id (str): The id attribute of the `<legend>` element.
/// - style (str): The style attribute of the `<legend>` element.
#let legend(body, class: none, id: none, style: none, ..attrs) = {
  assert(attrs.pos().len() == 0, message: "can have only one body")
  let attrs = attrs.named()
  if class != none { attrs.insert("class", class) }
  if id != none { attrs.insert("id", id) }
  if style != none { attrs.insert("style", style) }
  std.html.elem("legend", attrs: attrs, body)
}
/// Creates a `html <details>` element with the given content.
///
/// #link("https://developer.mozilla.org/en-US/docs/Web/HTML/Element/details")[MDN Documentation]
///
/// - open (str): The open attribute of the `<details>` element.
/// - class (str): The class attribute of the `<details>` element.
/// - id (str): The id attribute of the `<details>` element.
/// - style (str): The style attribute of the `<details>` element.
#let details(body, open: none, class: none, id: none, style: none, ..attrs) = {
  assert(attrs.pos().len() == 0, message: "can have only one body")
  let attrs = attrs.named()
  if open != none { attrs.insert("open", open) }
  if class != none { attrs.insert("class", class) }
  if id != none { attrs.insert("id", id) }
  if style != none { attrs.insert("style", style) }
  std.html.elem("details", attrs: attrs, body)
}
/// Creates a `html <summary>` element with the given content.
///
/// #link("https://developer.mozilla.org/en-US/docs/Web/HTML/Element/summary")[MDN Documentation]
///
/// - class (str): The class attribute of the `<summary>` element.
/// - id (str): The id attribute of the `<summary>` element.
/// - style (str): The style attribute of the `<summary>` element.
#let summary(body, class: none, id: none, style: none, ..attrs) = {
  assert(attrs.pos().len() == 0, message: "can have only one body")
  let attrs = attrs.named()
  if class != none { attrs.insert("class", class) }
  if id != none { attrs.insert("id", id) }
  if style != none { attrs.insert("style", style) }
  std.html.elem("summary", attrs: attrs, body)
}
/// Creates a `html <dialog>` element with the given content.
///
/// #link("https://developer.mozilla.org/en-US/docs/Web/HTML/Element/dialog")[MDN Documentation]
///
/// - class (str): The class attribute of the `<dialog>` element.
/// - id (str): The id attribute of the `<dialog>` element.
/// - style (str): The style attribute of the `<dialog>` element.
#let dialog(body, class: none, id: none, style: none, ..attrs) = {
  assert(attrs.pos().len() == 0, message: "can have only one body")
  let attrs = attrs.named()
  if class != none { attrs.insert("class", class) }
  if id != none { attrs.insert("id", id) }
  if style != none { attrs.insert("style", style) }
  std.html.elem("dialog", attrs: attrs, body)
}
/// Creates a `html <script>` element with the given content.
///
/// #link("https://developer.mozilla.org/en-US/docs/Web/HTML/Element/script")[MDN Documentation]
///
/// - src (str): The src attribute of the `<script>` element.
/// - type (str): The type attribute of the `<script>` element.
/// - charset (str): The charset attribute of the `<script>` element.
/// - async (str): The async attribute of the `<script>` element.
/// - defer (str): The defer attribute of the `<script>` element.
/// - crossorigin (str): The crossorigin attribute of the `<script>` element.
/// - nonce (str): The nonce attribute of the `<script>` element.
/// - class (str): The class attribute of the `<script>` element.
/// - id (str): The id attribute of the `<script>` element.
/// - style (str): The style attribute of the `<script>` element.
#let script(
  body,
  src: none,
  type: none,
  charset: none,
  async: none,
  defer: none,
  crossorigin: none,
  nonce: none,
  class: none,
  id: none,
  style: none,
  ..attrs,
) = {
  assert(attrs.pos().len() == 0, message: "can have only one body")
  let attrs = attrs.named()
  if src != none { attrs.insert("src", src) }
  if type != none { attrs.insert("type", type) }
  if charset != none { attrs.insert("charset", charset) }
  if async != none { attrs.insert("async", async) }
  if defer != none { attrs.insert("defer", defer) }
  if crossorigin != none { attrs.insert("crossorigin", crossorigin) }
  if nonce != none { attrs.insert("nonce", nonce) }
  if class != none { attrs.insert("class", class) }
  if id != none { attrs.insert("id", id) }
  if style != none { attrs.insert("style", style) }
  std.html.elem("script", attrs: attrs, body)
}
/// Creates a `html <noscript>` element with the given content.
///
/// #link("https://developer.mozilla.org/en-US/docs/Web/HTML/Element/noscript")[MDN Documentation]
///
/// - class (str): The class attribute of the `<noscript>` element.
/// - id (str): The id attribute of the `<noscript>` element.
/// - style (str): The style attribute of the `<noscript>` element.
#let noscript(body, class: none, id: none, style: none, ..attrs) = {
  assert(attrs.pos().len() == 0, message: "can have only one body")
  let attrs = attrs.named()
  if class != none { attrs.insert("class", class) }
  if id != none { attrs.insert("id", id) }
  if style != none { attrs.insert("style", style) }
  std.html.elem("noscript", attrs: attrs, body)
}
/// Creates a `html <template>` element with the given content.
///
/// #link("https://developer.mozilla.org/en-US/docs/Web/HTML/Element/template")[MDN Documentation]
///
/// - class (str): The class attribute of the `<template>` element.
/// - id (str): The id attribute of the `<template>` element.
/// - style (str): The style attribute of the `<template>` element.
#let template(body, class: none, id: none, style: none, ..attrs) = {
  assert(attrs.pos().len() == 0, message: "can have only one body")
  let attrs = attrs.named()
  if class != none { attrs.insert("class", class) }
  if id != none { attrs.insert("id", id) }
  if style != none { attrs.insert("style", style) }
  std.html.elem("template", attrs: attrs, body)
}
/// Creates a `html <canvas>` element with the given content.
///
/// #link("https://developer.mozilla.org/en-US/docs/Web/HTML/Element/canvas")[MDN Documentation]
///
/// - width (str): The width attribute of the `<canvas>` element.
/// - height (str): The height attribute of the `<canvas>` element.
/// - class (str): The class attribute of the `<canvas>` element.
/// - id (str): The id attribute of the `<canvas>` element.
/// - style (str): The style attribute of the `<canvas>` element.
#let canvas(body, width: none, height: none, class: none, id: none, style: none, ..attrs) = {
  assert(attrs.pos().len() == 0, message: "can have only one body")
  let attrs = attrs.named()
  if width != none { attrs.insert("width", width) }
  if height != none { attrs.insert("height", height) }
  if class != none { attrs.insert("class", class) }
  if id != none { attrs.insert("id", id) }
  if style != none { attrs.insert("style", style) }
  std.html.elem("canvas", attrs: attrs, body)
}
/// Creates a `html <slot>` element with the given content.
///
/// #link("https://developer.mozilla.org/en-US/docs/Web/HTML/Element/slot")[MDN Documentation]
///
/// - name (str): The name attribute of the `<slot>` element.
/// - class (str): The class attribute of the `<slot>` element.
/// - id (str): The id attribute of the `<slot>` element.
/// - style (str): The style attribute of the `<slot>` element.
#let slot(body, name: none, class: none, id: none, style: none, ..attrs) = {
  assert(attrs.pos().len() == 0, message: "can have only one body")
  let attrs = attrs.named()
  if name != none { attrs.insert("name", name) }
  if class != none { attrs.insert("class", class) }
  if id != none { attrs.insert("id", id) }
  if style != none { attrs.insert("style", style) }
  std.html.elem("slot", attrs: attrs, body)
}
/// Creates a `html <data>` element with the given content.
///
/// #link("https://developer.mozilla.org/en-US/docs/Web/HTML/Element/data")[MDN Documentation]
///
/// - value (str): The value attribute of the `<data>` element.
/// - class (str): The class attribute of the `<data>` element.
/// - id (str): The id attribute of the `<data>` element.
/// - style (str): The style attribute of the `<data>` element.
#let data(body, value: none, class: none, id: none, style: none, ..attrs) = {
  assert(attrs.pos().len() == 0, message: "can have only one body")
  let attrs = attrs.named()
  if value != none { attrs.insert("value", value) }
  if class != none { attrs.insert("class", class) }
  if id != none { attrs.insert("id", id) }
  if style != none { attrs.insert("style", style) }
  std.html.elem("data", attrs: attrs, body)
}
/// Creates a `html <hgroup>` element with the given content.
///
/// #link("https://developer.mozilla.org/en-US/docs/Web/HTML/Element/hgroup")[MDN Documentation]
///
/// - class (str): The class attribute of the `<hgroup>` element.
/// - id (str): The id attribute of the `<hgroup>` element.
/// - style (str): The style attribute of the `<hgroup>` element.
#let hgroup(body, class: none, id: none, style: none, ..attrs) = {
  assert(attrs.pos().len() == 0, message: "can have only one body")
  let attrs = attrs.named()
  if class != none { attrs.insert("class", class) }
  if id != none { attrs.insert("id", id) }
  if style != none { attrs.insert("style", style) }
  std.html.elem("hgroup", attrs: attrs, body)
}
/// Creates a `html <menu>` element with the given content.
///
/// #link("https://developer.mozilla.org/en-US/docs/Web/HTML/Element/menu")[MDN Documentation]
///
/// - class (str): The class attribute of the `<menu>` element.
/// - id (str): The id attribute of the `<menu>` element.
/// - style (str): The style attribute of the `<menu>` element.
#let menu(body, class: none, id: none, style: none, ..attrs) = {
  assert(attrs.pos().len() == 0, message: "can have only one body")
  let attrs = attrs.named()
  if class != none { attrs.insert("class", class) }
  if id != none { attrs.insert("id", id) }
  if style != none { attrs.insert("style", style) }
  std.html.elem("menu", attrs: attrs, body)
}
/// Creates a `html <search>` element with the given content.
///
/// #link("https://developer.mozilla.org/en-US/docs/Web/HTML/Element/search")[MDN Documentation]
///
/// - class (str): The class attribute of the `<search>` element.
/// - id (str): The id attribute of the `<search>` element.
/// - style (str): The style attribute of the `<search>` element.
#let search(body, class: none, id: none, style: none, ..attrs) = {
  assert(attrs.pos().len() == 0, message: "can have only one body")
  let attrs = attrs.named()
  if class != none { attrs.insert("class", class) }
  if id != none { attrs.insert("id", id) }
  if style != none { attrs.insert("style", style) }
  std.html.elem("search", attrs: attrs, body)
}
/// Creates a `html <fencedframe>` element with the given content.
///
/// #link("https://developer.mozilla.org/en-US/docs/Web/HTML/Element/fencedframe")[MDN Documentation]
///
/// - allow (str): The allow attribute of the `<fencedframe>` element.
/// - height (str): The height attribute of the `<fencedframe>` element.
/// - width (str): The width attribute of the `<fencedframe>` element.
/// - class (str): The class attribute of the `<fencedframe>` element.
/// - id (str): The id attribute of the `<fencedframe>` element.
/// - style (str): The style attribute of the `<fencedframe>` element.
#let fencedframe(body, allow: none, height: none, width: none, class: none, id: none, style: none, ..attrs) = {
  assert(attrs.pos().len() == 0, message: "can have only one body")
  let attrs = attrs.named()
  if allow != none { attrs.insert("allow", allow) }
  if height != none { attrs.insert("height", height) }
  if width != none { attrs.insert("width", width) }
  if class != none { attrs.insert("class", class) }
  if id != none { attrs.insert("id", id) }
  if style != none { attrs.insert("style", style) }
  std.html.elem("fencedframe", attrs: attrs, body)
}
/// Creates a `html <selectedcontent>` element with the given content.
///
/// #link("https://developer.mozilla.org/en-US/docs/Web/HTML/Element/selectedcontent")[MDN Documentation]
///
/// - class (str): The class attribute of the `<selectedcontent>` element.
/// - id (str): The id attribute of the `<selectedcontent>` element.
/// - style (str): The style attribute of the `<selectedcontent>` element.
#let selectedcontent(body, class: none, id: none, style: none, ..attrs) = {
  assert(attrs.pos().len() == 0, message: "can have only one body")
  let attrs = attrs.named()
  if class != none { attrs.insert("class", class) }
  if id != none { attrs.insert("id", id) }
  if style != none { attrs.insert("style", style) }
  std.html.elem("selectedcontent", attrs: attrs, body)
}
