/// This file is auto-generated from the HTML tags metadata.
/// Do not edit this file directly.
/// HTML element bindings
/// html, link, table, label, style, strong, time, figure, sub, sup are excluded because they are conflicting with `std`.
/// Modified, Apache-2.0, from https://github.com/Myriad-Dreamin/typ/blob/main/packages/html-bindings.typ

#import "html-bindings-h.typ" as _h
#import _h: (
  head,
  title,
  base,
  meta,
  body,
  article,
  section,
  nav,
  aside,
  h1,
  h2,
  h3,
  h4,
  h5,
  h6,
  header,
  footer,
  address,
  p,
  hr,
  pre,
  blockquote,
  ol,
  ul,
  li,
  dl,
  dt,
  dd,
  figcaption,
  main,
  div,
  a,
  em,
  small,
  s,
  cite,
  q,
  dfn,
  abbr,
  ruby,
  rb,
  rt,
  rp,
  code,
  var,
  samp,
  kbd,
  i,
  b,
  u,
  bdi,
  bdo,
  span,
  br,
  wbr,
  ins,
  del,
  picture,
  img,
  iframe,
  embed,
  object,
  param,
  video,
  audio,
  source,
  track,
  map,
  area,
  caption,
  colgroup,
  col,
  tbody,
  thead,
  tfoot,
  tr,
  td,
  th,
  form,
  input,
  button,
  select,
  datalist,
  optgroup,
  option,
  textarea,
  output,
  progress,
  meter,
  fieldset,
  legend,
  details,
  summary,
  dialog,
  script,
  noscript,
  template,
  canvas,
  slot,
  data,
  hgroup,
  menu,
  search,
  fencedframe,
  selectedcontent,
)
/// Wrapper of html.elem
///   Creates an HTML element with the specified tag, attributes, and body content. 
/// - tag (str):
///     The tag name of the HTML element to create.
/// - attrs (attributes): 
///     A map of attributes to be applied to the HTML element.
/// - body (content): 
///     The content to be placed inside the HTML element.
/// -> html.elem(tag, attrs: attrs, body)
#let elem(tag, attrs:(), body) = html.elem(tag, attrs: attrs, body)

/// Wrapper of html.elem, with flattened attributes.
///
/// - tag (str):
///     The tag name of the HTML element to create.
/// - attrs (..): 
///     Attributes to be applied to the HTML element.
/// - body (content): 
///     The content to be placed inside the HTML element.
/// -> html.elem(tag, attrs: attrs, body)
#let tag(tag, ..attrs, body) = {
  import "util.typ": *
  let attrs = attrs.named()
  for key in attrs.keys() {
    attrs.insert(key, to-str(attrs.at(key)))
  }
  elem(tag, attrs:attrs, body)
}

/// Wrapper of html.frame
/// -> html.frame(body)   [svg]
#let frame(body) = html.frame(body)


