// https://help.keyman.com/keyboard/sil_ipa/1.8.7/sil_ipa
// https://en.wikipedia.org/wiki/Comparison_of_ASCII_encodings_of_the_International_Phonetic_Alphabet

#let sil-unicode = (
  ("!", "«É"),
  ("!<", "«Ä"),
  ("!=", "«Ç"),
  ("!>", "«Å"),
  ("#!", "Íúû"),
  ("##!", "Íúü"),
  ("#&", "Õ°"),
  ("#<", "Íúú"),
  ("#<<", "‚Üò"),
  ("#=", "Õú"),
  ("#>", "Íúõ"),
  ("#>>", "‚Üó"),
  ("$", "Ã©"),
  ("$$", "ÃØ"),
  ("$$$", "Ã∞"),
  ("$$$$", "Ã¢"),
  ("%", "Ã•"),
  ("%%", "Ã¨"),
  ("%%%", "Ã§"),
  ("%%%%", "Ã°"),
  ("*", "Ãà"),
  ("**", "ÃΩ"),
  ("***", "ÃÜ"),
  ("****", "Ãá"),
  ("*****", "Ãê"),
  ("+", "Ãü"),
  ("++", "Ãù"),
  ("+++", "Ãò"),
  ("++++", "Ãπ"),
  (".", "."),
  (".<", "|"),
  (".=", "‚Äñ"),
  (":", "Àê"),
  ("::", "Àë"),
  (":::", "ÀêÀê"),
  ("=>", "‚Üí"),
  ("?<", " ï"),
  ("?=", " î"),
  ("@", "Ãä"),
  ("@&", "Õú"),
  ("@0", "Ãè"),
  ("@1", "ÃÄ"),
  ("@12", "·∑Ö"),
  ("@13", "Ãå"),
  ("@131", "·∑à"),
  ("@2", "ÃÑ"),
  ("@21", "·∑Ü"),
  ("@23", "·∑Ñ"),
  ("@3", "ÃÅ"),
  ("@31", "ÃÇ"),
  ("@313", "·∑â"),
  ("@32", "·∑á"),
  ("@4", "Ãã"),
  ("@@", "Ãç"),
  ("B=", " ô"),
  ("E<", "≈ì"),
  ("E=", "…ò"),
  ("E>", "…∂"),
  ("G=", "…¢"),
  ("G>", " õ"),
  ("H=", " ú"),
  ("H>", "…ß"),
  ("I=", "…®"),
  ("L<", " é"),
  ("L=", " ü"),
  ("L>", "…∫"),
  ("N=", "…¥"),
  ("O<", "…û"),
  ("O=", "…µ"),
  ("O>", "…§"),
  ("Q<", " ¢"),
  ("Q=", " °"),
  ("R<", "…ª"),
  ("R=", " Ä"),
  ("R>", " Å"),
  ("U=", " â"),
  ("[[", " Ω"),
  ("[[[", "Àû"),
  ("]]", " º"),
  ("]]]", "Ãö"),
  ("]]]]", " ª"),
  ("_", "Ã†"),
  ("__", "Ãû"),
  ("___", "Ãô"),
  ("____", "Ãú"),
  ("_____", "Ãß"),
  ("a<", "√¶"),
  ("a=", "…ë"),
  ("a>", "…ê"),
  ("b", "b"),
  ("b=", "Œ≤"),
  ("b>", "…ì"),
  ("c", "c"),
  ("c<", "…ï"),
  ("c=", "√ß"),
  ("d", "d"),
  ("d<", "…ñ"),
  ("d=", "√∞"),
  ("d>", "…ó"),
  ("e", "e"),
  ("e<", "…õ"),
  ("e=", "…ô"),
  ("e>", "…ú"),
  ("f", "f"),
  ("f=", "…∏"),
  ("g<", "…°"),
  ("g=", "…£"),
  ("g>", "…†"),
  ("h", "h"),
  ("h<", "…¶"),
  ("h=", "…•"),
  ("h>", "ƒß"),
  ("i", "i"),
  ("i=", "…™"),
  ("j", "j"),
  ("j<", " ù"),
  ("j=", "…ü"),
  ("j>", " Ñ"),
  ("k", "k"),
  ("l", "l"),
  ("l<", "…≠"),
  ("l=", "…¨"),
  ("l>", "…Æ"),
  ("m", "m"),
  ("m>", "…±"),
  ("n", "n"),
  ("n<", "…≥"),
  ("n=", "…≤"),
  ("n>", "≈ã"),
  ("o", "o"),
  ("o<", "…î"),
  ("o=", "…í"),
  ("o>", "√∏"),
  ("p", "p"),
  ("p=", " ò"),
  ("q", "q"),
  ("r", "r"),
  ("r<", "…Ω"),
  ("r=", "…π"),
  ("r>", "…æ"),
  ("s", "s"),
  ("s<", " Ç"),
  ("s=", " É"),
  ("s>", "œÉ"),
  ("t", "t"),
  ("t<", " à"),
  ("t=", "Œ∏"),
  ("u", "u"),
  ("u<", " ä"),
  ("u=", "…Ø"),
  ("u>", " å"),
  ("v", "v"),
  ("v<", "‚±±"),
  ("v=", " ã"),
  ("w", "w"),
  ("w=", " ç"),
  ("w>", "…∞"),
  ("x", "x"),
  ("x=", "œá"),
  ("y", "y"),
  ("y<", "…•"),
  ("y=", " è"),
  ("z", "z"),
  ("z<", " ê"),
  ("z=", " í"),
  ("z>", " ë"),
  ("{", "Ã™"),
  ("{{", "Ã∫"),
  ("{{{", "Ãª"),
  ("{{{{", "Ãº"),
  ("{{{{{", "Ã£"),
  ("}", "Àà"),
  ("}}", "Àå"),
  ("}}}", "Õà"),
  ("}}}}", "·∑Ç"),
  ("~", "ÃÉ"),
  ("~~", "Ã¥"),
).sorted(
  key: (pair) => -pair.at(0).len()
)

#let sil-tones = (
  "&": (
    ("0", "Íúñ"),
    ("1", "Íúï"),
    ("2", "Íúî"),
    ("3", "Íúì"),
    ("4", "Íúí"),
  ),
  "#": (
    ("0", "À©"),
    ("1", "À®"),
    ("2", "Àß"),
    ("3", "À¶"),
    ("4", "À•"),
  ),
)

#let sil-superscript = (
  ("-", "‚Åª"),
  ("0", "‚Å∞"),
  ("1", "¬π"),
  ("2", "¬≤"),
  ("3", "¬≥"),
  ("4", "‚Å¥"),
  ("5", "‚Åµ"),
  ("6", "‚Å∂"),
  ("7", "‚Å∑"),
  ("8", "‚Å∏"),
  ("9", "‚Åπ"),
  ("a", "·µÉ"),
  ("b", "·µá"),
  ("c", "·∂ú"),
  ("d", "·µà"),
  ("e", "·µâ"),
  ("f", "·∂†"),
  ("g", "·µç"),
  ("h", " ∞"),
  ("i", "‚Å±"),
  ("j", " ≤"),
  ("k", "·µè"),
  ("l", "À°"),
  ("m", "·µê"),
  ("n", "‚Åø"),
  ("o", "·µí"),
  ("p", "·µñ"),
  ("q", "êû•"),
  ("r", " ≥"),
  ("s", "À¢"),
  ("t", "·µó"),
  ("u", "·µò"),
  ("v", "·µõ"),
  ("w", " ∑"),
  ("x", "À£"),
  ("y", " ∏"),
  ("z", "·∂ª"),
  ("¬°", "Íúû"),
  ("√¶", "êûÉ"),
  ("√ß", "·∂úÃß"),
  ("√∞", "·∂û"),
  ("√∏", "êû¢"),
  ("ƒß", "êûï"),
  ("≈ã", "·µë"),
  ("≈ì", "Íüπ"),
  ("«Ä", "êû∂"),
  ("«Å", "êû∑"),
  ("«Ç", "êû∏"),
  ("«É", "Íúù"),
  ("…ê", "·µÑ"),
  ("…ë", "·µÖ"),
  ("…í", "·∂õ"),
  ("…ì", "êûÖ"),
  ("…î", "·µì"),
  ("…ñ", "êûã"),
  ("…ó", "êûå"),
  ("…ò", "êûé"),
  ("…ô", "·µä"),
  ("…õ", "·µã"),
  ("…ú", "·∂ü"),
  ("…û", "êûè"),
  ("…ü", "·∂°"),
  ("…†", "êûì"),
  ("…¢", "êûí"),
  ("…£", "À†"),
  ("…§", "êûë"),
  ("…¶", " ±"),
  ("…®", "·∂§"),
  ("…™", "·∂¶"),
  ("…¨", "êûõ"),
  ("…≠", "·∂©"),
  ("…Æ", "êûû"),
  ("…Ø", "·µö"),
  ("…∞", "·∂≠"),
  ("…±", "·∂¨"),
  ("…≤", "·∂Æ"),
  ("…≥", "·∂Ø"),
  ("…¥", "·∂∞"),
  ("…µ", "·∂±"),
  ("…∂", "êû£"),
  ("…∏", "·∂≤"),
  ("…π", " ¥"),
  ("…∫", "êû¶"),
  ("…ª", " µ"),
  ("…Ω", "êû®"),
  ("…æ", "êû©"),
  (" Ä", "êû™"),
  (" Å", " ∂"),
  (" Ç", "·∂≥"),
  (" É", "·∂¥"),
  (" Ñ", "êûò"),
  (" à", "êûØ"),
  (" â", "·∂∂"),
  (" ä", "·∂∑"),
  (" ã", "·∂π"),
  (" å", "·∂∫"),
  (" é", "êû†"),
  (" è", "êû≤"),
  (" ê", "·∂º"),
  (" í", "·∂æ"),
  (" î", "ÀÄ"),
  (" ï", "À§"),
  (" ò", "êûµ"),
  (" ô", "êûÑ"),
  (" õ", "êûî"),
  (" ú", "êûñ"),
  (" ù", "·∂®"),
  (" ü", "·∂´"),
  (" °", "êû≥"),
  (" ¢", "êû¥"),
  (" £", "êûá"),
  (" §", "êûä"),
  (" ¶", "êû¨"),
  (" ß", "êûÆ"),
  ("Àê", "êûÅ"),
  ("Àë", "êûÇ"),
  ("Œ≤", "·µù"),
  ("Œ∏", "·∂ø"),
  ("œá", "·µ°"),
  ("·µª", "·∂ß"),
  ("·∂ë", "êûç"),
  ("‚±±", "êû∞"),
  ("Íûé", "êûù"),
  ("Í≠¶", "êûà"),
  ("Í≠ß", "êû≠"),
  ("ùºÑ", "êûú"),
  ("ùºÖ", "êûü"),
  ("ùºÜ", "êû°"),
  ("ùºà", "êûß"),
  ("ùºä", "êûπ"),
)

#let sil-subscript = (
  ("0", "‚ÇÄ"),
  ("1", "‚ÇÅ"),
  ("2", "‚ÇÇ"),
  ("3", "‚ÇÉ"),
  ("4", "‚ÇÑ"),
  ("5", "‚ÇÖ"),
  ("6", "‚ÇÜ"),
  ("7", "‚Çá"),
  ("8", "‚Çà"),
  ("9", "‚Çâ"),
)

#let sil-retroflex = (
  ("a", "·∂è"),
  ("…ë", "·∂ê"),
  ("…ó", "·∂ë"),
  ("e", "·∂í"),
  ("…õ", "·∂ì"),
  ("…ú", "·∂î"),
  ("…ô", "·∂ï"),
  ("i", "·∂ñ"),
  ("…î", "·∂ó"),
  (" É", "·∂ò"),
  ("u", "·∂ô"),
  (" í", "·∂ö"),
)

#let sil-palatal = (
  ("b", "·∂Ä"),
  ("d", "·∂Å"),
  ("f", "·∂Ç"),
  ("…°", "·∂É"),
  ("k", "·∂Ñ"),
  ("l", "·∂Ö"),
  ("m", "·∂Ü"),
  ("n", "·∂á"),
  ("p", "·∂à"),
  ("r", "·∂â"),
  ("s", "·∂ä"),
  (" É", "·∂ã"),
  ("v", "·∂å"),
  ("x", "·∂ç"),
  ("z", "·∂é"),
)

#let sil-velar-pharyngeal = (
  ("b", "·µ¨"),
  ("d", "·µ≠"),
  ("f", "·µÆ"),
  ("l", "…´"),
  ("m", "·µØ"),
  ("n", "·µ∞"),
  ("p", "·µ±"),
  ("r", "·µ≤"),
  ("…æ", "·µ≥"),
  ("s", "·µ¥"),
  ("z", "·µµ"),
  ("z", "·µ∂"),
)

#let parse-retroflex(text, reverse: false) = {
  if reverse {
    for (normal, retroflex) in sil-retroflex {
      text = text.replace(retroflex, normal + "Ã¢")
    }
  } else {
    for (normal, retroflex) in sil-retroflex {
      text = text.replace(normal + "Ã¢", retroflex)
    }
  }

  return text
}

#let parse-palatal(text, reverse: false) = {
  if reverse {
    for (normal, palatal) in sil-palatal {
      text = text.replace(palatal, normal + "Ã°")
    }
  } else {
    for (normal, palatal) in sil-palatal {
      text = text.replace(normal + "Ã°", palatal)
    }
  }

  return text
}

#let parse-velar-pharyngeal(text, reverse: false) = {
  if reverse {
    for (normal, velar-pharyngeal) in sil-velar-pharyngeal {
      text = text.replace(velar-pharyngeal, normal + "Ã¥")
    }
  } else {
    for (normal, velar-pharyngeal) in sil-velar-pharyngeal {
      text = text.replace(normal + "Ã¥", velar-pharyngeal)
    }
  }

  return text
}

#let parse-tones(text, reverse: false) = {
  let left-tones = sil-tones.at("&")
  let right-tones = sil-tones.at("#")

  let (from, to) = if reverse { (1, 0) } else { (0, 1) }

  let get-tone-regex(tones, prefix) = {
    return if reverse {
      regex("((" + tones.map(tone => tone.at(1)).join("|") + "){1, 3})")
    } else {
      regex(prefix + "([0-4]{1, 3})")
    }
  }

  let left-tone-regex = get-tone-regex(left-tones, "&")
  let right-tone-regex = get-tone-regex(right-tones, "#")

  let match-tones(text, regex) = {
    return text
      .matches(regex)
      .dedup(key: (match) => match.text)
      .sorted(key: (match) => -match.captures.at(0).len()) // Avoid partial matches
  }

  let left-matches = match-tones(text, left-tone-regex)
  let right-matches = match-tones(text, right-tone-regex)

  let replace-matches(text, matches, tones, prefix) = {
    for match in matches {
      let replacement = match.captures.at(0)

      for tone in tones {
        replacement = replacement.replace(tone.at(from), tone.at(to))
      }

      if reverse {
        replacement = prefix + replacement
      }

      text = text.replace(match.text, replacement)
    }

    return text
  }

  text = replace-matches(text, left-matches, left-tones, "&")
  text = replace-matches(text, right-matches, right-tones, "#")

  return text
}

#let parse-subscript(text, reverse: false) = {
  if reverse {
    for (normal, sub) in sil-subscript {
      text = text.replace(sub, normal + "Ã†")
    }
  } else {
    for (normal, sub) in sil-subscript {
      text = text.replace(normal + "Ã†", sub)
    }
  }

  return text
}

#let parse-superscript(text, reverse: false) = {
  if reverse {
    for (normal, super) in sil-superscript {
      text = text.replace(super, normal + "^")
    }
  } else {
    for (normal, super) in sil-superscript {
      text = text.replace(normal + "^", super)
    }
  }

  return text
}

#let convert-sil(text, reverse: false) = {
  let run-parsers(text) = {
    text = parse-retroflex(text, reverse: reverse)
    text = parse-palatal(text, reverse: reverse)
    text = parse-velar-pharyngeal(text, reverse: reverse)
    text = parse-subscript(text, reverse: reverse)
    text = parse-tones(text, reverse: reverse)

    // requires all previous parsers to run first
    text = parse-superscript(text, reverse: reverse)

    return text
  }

  if reverse {
    text = run-parsers(text)
  }

  let (from, to) = if reverse { (1, 0) } else { (0, 1) }

  for pair in sil-unicode {
    text = text.replace(pair.at(from), pair.at(to))
  }

  if not reverse {
    text = run-parsers(text)
  }

  return text
}
