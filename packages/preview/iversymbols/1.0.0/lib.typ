
#let bqn = {
  (
    system: "•",
    begin-list: "⟨",
    begin: "⟨",
    end-list: "⟩",
    end: "⟩",
    separator: "⋄",
    strand: "‿",
    "_": "‿",
    // assignments:
    define: "←",
    export: "⇐",
    change: "↩",
    modify: "↩",
    // functions & operands:
    add: "+",
    conjugate: "+",
    conj: "+",
    negate: "-",
    neg: "-",
    substract: "-",
    sub: "-",
    sign: "×",
    multiply: "×",
    mult: "×",
    reciprocal: "÷",
    reciproc: "÷",
    divide: "÷",
    div: "÷",
    exponential: "⋆",
    exp: "⋆",
    power: "⋆",
    pow: "⋆",
    square-root: "√",
    sqrt: "√",
    root: "√",
    floor: "⌊",
    minimum: "⌊",
    min: "⌊",
    ceiling: "⌈",
    ceil: "⌈",
    maximum: "⌈",
    max: "⌈",
    logical-and: "∧",
    "and": "∧",
    sort-up: "∧",
    logical-or: "∨",
    "or": "∨",
    sort-down: "∨",
    logical-not: "¬",
    "not": "¬",
    span: "¬",
    absolute: "|",
    abs: "|",
    modulus: "|",
    mod: "|",
    less-than: "<",
    lt: "<",
    enclose: "<",
    less-or-equal: "≤",
    leq: "≤",
    le: "≤",
    greater-than: ">",
    gt: ">",
    merge: ">",
    greater-or-equal: "≥",
    geq: "≥",
    ge: "≥",
    equals: "=",
    equal: "=",
    eq: "=",
    rank: "=",
    not-equals: "≠",
    not-equal: "≠",
    neq: "≠",
    ne: "≠",
    equals-not: "≠",
    equal-not: "≠",
    length: "≠",
    len: "≠",
    depth: "≡",
    match: "≡",
    shape: "≢",
    not-match: "≢",
    match-not: "≢",
    mismatch: "≢",
    identity: "⊣",
    id: "⊣",
    left: "⊣",
    right: "⊢",
    deshape: "⥊",
    reshape: "⥊",
    join: "∾",
    solo: "≍",
    couple: "≍",
    enlist: "⋈",
    pair: "⋈",
    prefix: "↑",
    take: "↑",
    suffix: "↓",
    drop: "↓",
    range: "↕",
    window: "↕",
    win: "↕",
    nudge-forward: "»",
    nudge: "»",
    shift-after: "»",
    nudge-back: "«",
    shift-before: "«",
    reverse: "⌽",
    rev: "⌽",
    rotate: "⌽",
    rot: "⌽",
    transpose: "⍉",
    trans: "⍉",
    reorder-axes: "⍉",
    indices: "/",
    replicate: "/",
    replic: "/",
    grade-up: "⍋",
    bins-up: "⍋",
    grade-down: "⍒",
    bins-down: "⍒",
    first-cell: "⊏",
    select: "⊏",
    first: "⊑",
    pick: "⊑",
    classify: "⊐",
    class: "⊐",
    index-of: "⊐",
    occurrence-count: "⊒",
    progressive-index-of: "⊒",
    mark-first: "∊",
    member-of: "∊",
    deduplicate: "⍷",
    dedup: "⍷",
    find: "⍷",
    group: "⊔",
    assert: "!",
    // modifiers:
    constant: "˙",
    self: "˜",
    swap: "˜",
    atop: "∘",
    over: "○",
    bind-right: "⟜",
    bind: "⟜",
    after: "⟜",
    bind-left: "⊸",
    before: "⊸",
    under: "⌾",
    valence: "⊘",
    choose: "◶",
    catch: "⎊",
    apply-rank: "⎉",
    cells: "˘",
    apply-depth: "⚇",
    each: "¨",
    table: "⌜",
    repeat: "⍟",
    undo: "⁼",
    inverse: "⁼",
    invert: "⁼",
    fold-element: "´",
    fold: "´",
    fold-cell: "˝",
    insert: "˝",
    scan: "`",
    // constants & variables:
    nothing: "·",
    argument-left: "𝕨",
    left-argument: "𝕨",
    left-arg: "𝕨",
    w: "𝕨",
    W: "𝕎",
    argument-right: "𝕩",
    right-argument: "𝕩",
    right-arg: "𝕩",
    x: "𝕩",
    X: "𝕏",
    operand-left: "𝔽",
    left-operand: "𝔽",
    left-op: "𝔽",
    F: "𝔽",
    f: "𝕗",
    operand-right: "𝔾",
    right-operand: "𝔾",
    right-op: "𝔾",
    G: "𝔾",
    g: "𝕘",
    current-function: "𝕊",
    S: "𝕊",
    s: "𝕤",
    current-modifier: "𝕣",
    r: "𝕣",
    minus: "¯",
    pi: "π",
    infinity: "∞",
    inf: "∞",
    char: "@",
  )
}

#let uiua = {
  (
    duplicate: ".",
    dup: ".",
    pop: "◌",
    po: "◌",
    identity: "∘",
    id: "∘",
    stack: "?",
    macro: "!",
    placeholder: "^",
    binding: "←",
    bind: "←",
    private-binding: "↚",
    private-bind: "↚",
    priv-binding: "↚",
    priv-bind: "↚",
    alias: "~",
    begin-scope: "┌─╴",
    end-scope: "└─╴",
    // monadic pervasive functions:
    "not": "¬",
    sign: "±",
    negate: "¯",
    neg: "¯",
    absolute: "⌵",
    abs: "⌵",
    square-root: "√",
    sqrt: "√",
    sine: "∿",
    floor: "⌊",
    flor: "⌊",
    flr: "⌊",
    ceiling: "⌈",
    round: "⁅",
    // dyadic pervasive functions:
    equals: "=",
    equal: "=",
    eq: "=",
    not-equals: "≠",
    not-equal: "≠",
    neq: "≠",
    ne: "≠",
    equals-not: "≠",
    equal-not: "≠",
    less-than: "<",
    lt: "<",
    less-or-equal: "≤",
    leq: "≤",
    le: "≤",
    greater-than: ">",
    gt: ">",
    greater-or-equal: "≥",
    geq: "≥",
    ge: "≥",
    add: "+",
    substract: "-",
    sub: "-",
    multiply: "×",
    mult: "×",
    divide: "÷",
    div: "÷",
    modulus: "◿",
    mod: "◿",
    power: "ⁿ",
    pow: "ⁿ",
    logarithm: "ₙ",
    log: "ₙ",
    minimum: "↧",
    min: "↧",
    maximum: "↥",
    max: "↥",
    atangent: "∠",
    atan: "∠",
    complex: "ℂ",
    // monadic functions:
    length: "⧻",
    len: "⧻",
    shape: "△",
    range: "⇡",
    first: "⊢",
    fst: "⊢",
    last: "⊣",
    lst: "⊣",
    reverse: "⇌",
    deshape: "♭",
    flat: "♭",
    fix: "¤",
    fx: "¤",
    bits: "⋯",
    transpose: "⍉",
    trans: "⍉",
    sort: "⍆",
    rise: "⍏",
    fall: "⍖",
    where: "⊚",
    classify: "⊛",
    class: "⊛",
    deduplicate: "◴",
    dedup: "◴",
    unique: "◰",
    box: "□",
    bx: "□",
    parse: "⋕",
    // dyadic functions:
    match: "≍",
    couple: "⊟",
    join: "⊂",
    select: "⊏",
    sel: "⊏",
    pick: "⊡",
    reshape: "↯",
    take: "↙",
    drop: "↘",
    rotate: "↻",
    rot: "↻",
    orient: "⤸",
    keep: "▽",
    find: "⌕",
    mask: "⦷",
    member-of: "∊",
    memberof: "∊",
    index-of: "⊗",
    indexof: "⊗",
    idx: "⊗",
    base: "⊥",
    // monadic modifiers:
    reduce: "/",
    fold: "∧",
    scan: "\\",
    rows: "≡",
    table: "⊞",
    tab: "⊞",
    stencil: "⧈",
    st: "⧈",
    win: "⧈",
    repeat: "⍥",
    group: "⊕",
    partition: "⊜",
    part: "⊜",
    par: "⊜",
    content: "◇",
    gap: "⋅",
    ga: "⋅",
    dip: "⊙",
    on: "⟜",
    with: "⤙",
    off: "⤚",
    below: "◡",
    backward: "˜",
    both: "∩",
    obverse: "⌅",
    inverse: "°",
    invert: "°",
    un: "°",
    anti: "⌝",
    // dyadic modifiers:
    under: "⍜",
    fork: "⊃",
    bracket: "⊓",
    do: "⍢",
    fill: "⬚",
    switch: "⨬",
    sw: "⨬",
    // error handling:
    try: "⍣",
    case: "⍩",
    assert: "⍤",
    // noadic function:
    random: "⚂",
    ran: "⚂",
    // constants:
    eta: "η",
    pi: "π",
    tau: "τ",
    infinity: "∞",
  )
}

#let apl = {
  (
    comment: "⍝",
    assignment: "←",
    assign: "←",
    tradfn: "∇",
    tradop: "∇",
    del: "∇",
    system: "⎕",
    quad: "⎕",
    // functions:
    plus: "+",
    add: "+",
    minus: "-",
    substract: "-",
    sub: "-",
    negate: "-",
    neg: "-",
    times: "×",
    multiply: "×",
    mult: "×",
    signum: "×",
    sign: "×",
    direction: "×",
    dir: "×",
    divide: "÷",
    div: "÷",
    reciprocal: "÷",
    reciproc: "÷",
    maximum: "⌈",
    max: "⌈",
    ceiling: "⌈",
    ceil: "⌈",
    minimum: "⌊",
    min: "⌊",
    floor: "⌊",
    magnitude: "|",
    absolute: "|",
    abs: "|",
    residue: "|",
    remainder: "|",
    remain: "|",
    modulus: "|",
    mod: "|",
    power: "*",
    pow: "*",
    exponential: "*",
    exp: "*",
    logarithm: "⍟",
    log: "⍟",
    random: "?",
    rand: "?",
    deal: "?",
    roll: "?",
    circle: "○",
    trigonometry: "○",
    trigo: "○",
    pi: "○",
    factorial: "!",
    fact: "!",
    binomial: "!",
    binom: "!",
    logical-not: "~",
    "not": "~",
    logical-and: "∧",
    "and": "∧",
    logical-or: "∨",
    "or": "∨",
    nand: "⍲",
    nor: "⍱",
    less-than: "<",
    lt: "<",
    less-or-equal: "≤",
    leq: "≤",
    le: "≤",
    imply: "≤",
    greater-than: ">",
    gt: ">",
    nimply: ">",
    greater-or-equal: "≥",
    geq: "≥",
    ge: "≥",
    converse: "≥",
    equals: "=",
    equal: "=",
    eq: "=",
    kronecker-delta: "=",
    kronecker: "=",
    exclusive-nor: "=",
    xnor: "=",
    not-equals: "≠",
    not-equal: "≠",
    neq: "≠",
    ne: "≠",
    equals-not: "≠",
    equal-not: "≠",
    exclusive-or: "≠",
    xor: "≠",
    reshape: "⍴",
    shape: "⍴",
    catenate-last: ",",
    catenate: ",",
    cat-last: ",",
    cat: ",",
    ravel: ",",
    catenate-fisrt: "⍪",
    catenate-1st: "⍪",
    cat-first: "⍪",
    cat-1st: "⍪",
    table: "⍪",
    ravel-items: "⍪",
    index: "⍳",
    iota: "⍳",
    take: "↑",
    drop: "↓",
    grade-up: "⍋",
    grade-down: "⍒",
    replicate-last: "/",
    replic-last: "/",
    compress-last: "/",
    filter-last: "/",
    replicate: "/",
    replic: "/",
    compress: "/",
    filter: "/",
    replicate-first: "⌿",
    replicate-1st: "⌿",
    replic-first: "⌿",
    replic-1st: "⌿",
    compress-first: "⌿",
    compress-1st: "⌿",
    filter-first: "⌿",
    filter-1st: "⌿",
    expand-last: "\\",
    expand: "\\",
    expand-first: "⍀",
    expand-1st: "⍀",
    reverse-last: "⌽",
    rotate-last: "⌽",
    reverse: "⌽",
    rotate: "⌽",
    rev-last: "⌽",
    rot-last: "⌽",
    rev: "⌽",
    rot: "⌽",
    reverse-first: "⊖",
    rotate-first: "⊖",
    reverse-1st: "⊖",
    rotate-1st: "⊖",
    rev-first: "⊖",
    rot-first: "⊖",
    rev-1st: "⊖",
    rot-1st: "⊖",
    reorder-axes: "⍉",
    transpose: "⍉",
    trans: "⍉",
    member-of: "∊",
    element-of: "∊",
    decode: "⊥",
    base: "⊥",
    encode: "⊤",
    represent: "⊤",
    antibase: "⊤",
    // operators:
    reduce: "/",
    fold: "/",
    insert: "/",
    reduce-last: "/",
    fold-last: "/",
    insert-last: "/",
    reduce-first: "⌿",
    fold-first: "⌿",
    insert-first: "⌿",
    reduce-1st: "⌿",
    fold-1st: "⌿",
    insert-1st: "⌿",
    inner-product: ".",
    inner-prod: ".",
    inner: ".",
    outer-product: "∘.",
    outer-prod: "∘.",
    outer: "∘.",
    // constants & variables:
    argument-left: "⍺",
    left-argument: "⍺",
    left-arg: "⍺",
    a: "⍺",
    argument-right: "⍵",
    right-argument: "⍵",
    right-arg: "⍵",
    w: "⍵",
  )
}

#let apl360 = {
  (
    ..apl,
    // functions:
    identity: "+",
    id: "+",
    size: "⍴",
  )
}

#let apl64 = {
  (
    ..apl360,
    comment-begin: "⟃",
    comment-end: "⟄",
    string-begin: "«",
    string-end: "»",
  )
}

#let sharp = {
  (
    ..apl,
    // functions:
    conjugate: "+",
    least-common-multiple: "∧",
    lcm: "∧",
    greatest-common-divisor: "∨",
    gcd: "∨",
    matrix-divide: "⌹",
    matrix-div: "⌹",
    matrix-inverse: "⌹",
    matrix-inv: "⌹",
    match: "≡",
    disclose: ">",
    enclose: "<",
    enclose-conditional: "⊃",
    nest: "⊃",
    link: "⊃",
    identity: "⊢",
    id: "⊢",
    same: "⊢",
    pass: "⊢",
    right: "⊢",
    stop: "⊣",
    hide: "⊣",
    left: "⊣",
    execute: "⍎",
    exec: "⍎",
    format: "⍕",
    form: "⍕",
    // operators:
    on: "⍤",
    rank: "⍤",
    atop: "⍤",
    cut: "⍤",
    upon: "⍥",
    over: "⍥",
    dual: "¨",
    under: "¨",
    determinant: ".",
  )
}

#let dyalog = {
  (
    ..apl,
    // functions:
    least-common-multiple: "∧",
    lcm: "∧",
    greatest-common-divisor: "∨",
    gcd: "∨",
    without: "~",
    exclude: "~",
    set-difference: "~",
    set-diff: "~",
    less: "~",
    unique-mask: "≠",
    nubsieve: "≠",
    mix: "↑",
    first: "↑",
    split: "↓",
    enclose: "⊂",
    box: "⊂",
    nest: "⊆",
    partition: "⊆",
    part: "⊆",
    enlist: "∊",
    type: "∊",
    disclose: "⊃",
    pick: "⊃",
    intersect: "∩",
    union: "∪",
    unique: "∪",
    nub: "∪",
    same: "⊣",
    identity: "⊣",
    id: "⊣",
    left: "⊣",
    right: "⊢",
    indices: "⍸",
    where: "⍸",
    interval-index: "⍸",
    find: "⍷",
    depth: "≡",
    match: "≡",
    tally: "≢",
    count: "≢",
    not-match: "≢",
    match-not: "≢",
    mismatch: "≢",
    execute: "⍎",
    exec: "⍎",
    format: "⍕",
    form: "⍕",
    matrix-divide: "⌹",
    matrix-div: "⌹",
    matrix-inverse: "⌹",
    matrix-inv: "⌹",
    materialise: "⌷",
    index: "⌷",
    // operators:
    scan: "\\",
    scan-last: "\\",
    scan-first: "⍀",
    scan-1st: "⍀",
    each: "¨",
    commute: "⍨",
    swap: "⍨",
    selfie: "⍨",
    self: "⍨",
    constant: "⍨",
    const: "⍨",
    power-operator: "⍣",
    power-op: "⍣",
    pow-operator: "⍣",
    pow-op: "⍣",
    repeat: "⍣",
    compose: "∘",
    bind: "∘",
    beside: "∘",
    after: "∘",
    rank: "⍤",
    atop: "⍤",
    over: "⍥",
    at: "@",
    variant: "⍠",
    key: "⌸",
    group-by: "⌸",
    stencil: "⌺",
    i-beam: "⌶",
    spawn: "&",
  )
}

#let extended-dyalog = {
  (
    ..dyalog,
    complex: "⌾",
    immaginary: "⌾",
    img: "⌾",
    under: "⍢",
    dual: "⍢",
    obverse: "⍫",
    ellipsis: "…",
    range: "…",
    sequence: "…",
    dfns: "⌂",
    infinity: "∞",
    inf: "∞",
    count-in: "⍧",
    nubsieve: "⍧",
    select: "⊇",
    from: "⊇",
    title-case: "÷",
    titlecase: "÷",
    lower-case: "⌊",
    lowercase: "⌊",
    upper-case: "⌈",
    uppercase: "⌈",
    change-case: "-",
    square-root: "√",
    sqrt: "√",
    root: "√",
    factors: "⍭",
    primes: "⍭",
    self-classify: "∩",
    sort-up: "∧",
    sort-down: "∨",
    reverse-compose: "⍛",
    compose-reverse: "⍛",
    before: "⍛",
    behind: "⍛",
  )
}

#let dzaima = {
  (
    ..extended-dyalog,
    repeat-cumulative: "⍡",
    repeat-cumul: "⍡",
    diagonal: "⍁",
    each-left: "ᐵ",
    each-right: "ᑈ",
    operand-left: "⍶",
    left-operand: "⍶",
    left-op: "⍶",
    operand-right: "⍶",
    right-operand: "⍶",
    right-op: "⍶",
    case: "%",
    merge: "%",
  )
}

#let nars = {
  (
    ..apl,
    // functions:
    matrix-divide: "⌹",
    matrix-div: "⌹",
    matrix-inverse: "⌹",
    matrix-inv: "⌹",
    enclose: "⊂",
    disclose: "⊃",
    pick: "⊃",
    type: "⊤",
    equivalent: "≡",
    match: "≡",
    inequivalent: "≢",
    not-match: "≢",
    match-not: "≢",
    mismatch: "≢",
    mix: "↑",
    split: "↓",
    unique: "∪",
    nub: "∪",
    union: "∪",
    set-difference: "~",
    set-diff: "~",
    without: "~",
    intersect: "∩",
    // operators:
    each: "¨",
    commute: "⍨",
    swap: "⍨",
    duplicate: "⍨",
    selfie: "⍨",
    self: "⍨",
    power-operator: "⍣",
    power-op: "⍣",
    pow-operator: "⍣",
    pow-op: "⍣",
    repeat: "⍣",
    compose: "∘",
    bind: "∘",
    beside: "∘",
    under: "⍢",
    dual: "⍢",
    convolution: "⍡",
    mask: "∘/",
    mesh: "∘\\",
    dfn: "∇",
    // variables & constants:
    zero-tilde: "⍬",
    zilde: "⍬",
  )
}

#let nars2000 = {
  (
    ..nars,
    condense: "<",
    dilate: ">",
    tally: "≢",
    count: "≢",
    primes: "π",
    factors: "π",
    least-common-multiple: "∧",
    lcm: "∧",
    greatest-common-divisor: "∨",
    gcd: "∨",
    square-root: "√",
    sqrt: "√",
    root: "√",
    sequence: "..",
    range: "..",
    subset: "⊆",
    superset: "⊇",
    symmetric-difference: "§",
    contract: "≤",
    distract: "≥",
    // operators:
    over: "⍥",
    rank: "⍤",
    combinatorial: "‼",
    determinant: ".",
    derivative: "∂",
    integral: "∫",
    matrix: "⌻",
    multiset: "⍦",
    null: "⊙",
    mask-first: "∘⌿",
    mask-1st: "∘⌿",
    mesh-first: "∘⍀",
    mesh-1st: "∘⍀",
    variant: "⍠",
    ball: "≈",
    // datatypes:
    rational: "x",
    variable-precision-float: "v",
    vfp: "v",
    interval: "±",
    approximate: "±",
    inaccurate: "±",
    infinity: "∞",
    inf: "∞",
    not-a-nuber: "∅",
    nan: "∅",
  )
}

#let kap = {
  (
    ..apl,
    fork-begin: "«",
    fork-end: "»",
    call: "⍞",
    // functions:
    rank-increase: "<",
    increase-rank: "<",
    rank-decrease: ">",
    decrease-rank: ">",
    sort-up: "∧",
    sort-down: "∨",
    without: "~",
    exclude: "~",
    set-difference: "~",
    set-diff: "~",
    less: "~",
    square-root: "√",
    sqrt: "√",
    root: "√",
    gamma: "!",
    where: "⍸",
    interval-index: "⍸",
    identity: "⊢",
    id: "⊢",
    same: "⊢",
    right: "⊢",
    hide: "⊣",
    stop: "⊣",
    left: "⊣",
    enclose: "⊂",
    box: "⊂",
    disclose: "⊃",
    pick: "⊃",
    nest: "⊆",
    partition: "⊆",
    part: "⊆",
    select: "⊇",
    from: "⊇",
    enlist: "∊",
    find: "⍷",
    intersect: "∩",
    union: "∪",
    unique: "∪",
    format: "⍕",
    parse: "⍎",
    case: "%",
    merge: "%",
    key: "⌸",
    matrix-divide: "⌹",
    matrix-div: "⌹",
    matrix-inverse: "⌹",
    matrix-inv: "⌹",
    depth: "≡",
    match: "≡",
    tally: "≢",
    count: "≢",
    not-match: "≢",
    match-not: "≢",
    mismatch: "≢",
    // operators:
    each: "¨",
    commute: "⍨",
    swap: "⍨",
    duplicate: "⍨",
    selfie: "⍨",
    self: "⍨",
    power-operator: "⍣",
    power-op: "⍣",
    pow-operator: "⍣",
    pow-op: "⍣",
    repeat: "⍣",
    outer: "⌻",
    scan: "\\",
    scan-last: "\\",
    scan-first: "⍀",
    scan-1st: "⍀",
    rank-operator: "⍤",
    rank-op: "⍤",
    rank: "⍤",
    parallel: "∥",
    undo: "˝",
    inverse: "˝",
    invert: "˝",
    compose: "∘",
    bind: "∘",
    beside: "∘",
    after: "∘",
    reverse-compose: "⍛",
    compose-reverse: "⍛",
    before: "⍛",
    behind: "⍛",
    over: "⍥",
    under: "⍢",
    bitwise: "∵",
    bit: "∵",
  )
}
