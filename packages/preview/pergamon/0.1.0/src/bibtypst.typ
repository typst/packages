
#import "@preview/oxifmt:1.0.0": strfmt
#import "@preview/citegeist:0.1.0": load-bibliography
#import "bib-util.typ": collect-deduplicate
#import "names.typ": parse-names, parse-reference-names


#let reference-collection = state("reference-collection", (:))
#let bibliography = state("bibliography", (:))
#let current-citation-formatter = state("format-citation", (reference, form) => [CITATION], )

#let refsection-id = state("refsection-id", none)
#let refsection-counter = state("refsection-counter", 0)

/// Parses #bibtex references and makes them available to #bibtypst.
/// Due to architectural limitations in Typst, #bibtypst cannot read 
/// #bibtex from a file. You will therefore typically call `read` yourself, like this:
/// #import "@preview/zebraw:0.5.5": *
/// #zebraw(lang: false,
/// ```typ
/// #add-bib-resource(read("bibliography.bib"))
/// ```
/// )
/// 
/// You can call `add-bib-resource` multiple times, and this will add
/// the contents of multiple bib files
/// 
/// -> none
#let add-bib-resource(
    /// A #bibtex string to be parsed.
    /// -> str
    bibtex-string
  ) = {
  bibliography.update(old-bib => {
    for (key, value) in load-bibliography(bibtex-string).pairs() {
      old-bib.insert(key, value)
    }

    old-bib
  })
}

// Combine and split keys and refsection identifiers.
#let combine(key, refsection-id) = {
  if refsection-id == none { key } else { refsection-id + "-" + key }
}

#let split(key, refsection-id) = {
  if refsection-id == none { key } else { key.slice(refsection-id.len() + 1) }
}



/// Helper function for rendering the links to a bibliography entry.
/// The first argument is assumed to be a Typst #link("https://typst.app/docs/reference/model/link/")[link]
/// element, obtained e.g. as the argument of a show rule. If this `link` is a citation
/// pointing to a bibliography entry managed by Pergamon, e.g. generated by Pergamon's `cite` function,
/// the function passes the metadata
/// of this bib entry to the `citation-content` function and returns the content this
/// function generated. Otherwise, the `link` is passed to `other-content` for further processing.
/// 
/// The primary purpose of `if-citation` is to facilitate the definition of show rules.
/// A typical example is the following show rule, which colors references to my own publications
/// green and all others blue.
/// 
/// #zebraw(lang: false,
/// ```typ
/// #show link: it => if-citation(it, value => {
///    if "Koller" in family-names(value.reference.fields.parsed-author) {
///      set text(fill: green)
///      it
///    } else {
///      set text(fill: blue)
///      it
///  }})
/// ```)
/// 
/// -> content
#let if-citation(
    /// A Typst `link` element.
    /// -> link
    it, 

    /// A function that maps the metadata associated with a Pergamon reference to
    /// a piece of content. The metadata is a dictionary with keys `reference`, `index`, and
    /// `key`. `reference` is a reference dictionary (see @sec:reference),
    /// `key` is the key of the bib entry, and `index`
    /// is the position in the bibliography.
    /// 
    /// -> function
    citation-content, 

    /// A function that maps the `link` to a piece of content. The default argument
    /// simply leaves the `link` untouched, permitting other show rules to trigger and
    /// render it appropriately.
    /// -> function
    other-content: x => x
  ) = {
    let lbl-name = str(it.dest)
    let targets = query(label(lbl-name))

    if targets != none and targets.len() > 0 {
      let meta = targets.first() // reference metadata
      if type(meta.value) == dictionary and meta.value.at("kind", default: none) == "reference-data" {
        citation-content(meta.value)
      } else {
        other-content(it)
      }
    } else {
      other-content(it)
    }
  }

/// Defines a section of the document with its own bibliography.
/// You need to load a bibliography with the @add-bib-resource function
/// in a place that is earlier than the refsection in rendering order.
/// -> none
#let refsection(
  /// A function that generates the citation string for a given reference.
  /// The function receives a #link(<sec:reference>)[reference dictionary] as its
  /// first argument and a `form` string as its second argument. It returns
  /// the content that is displayed in place of a @cite call.
  /// 
  /// The function you pass here will typically be defined in a #bibtypst citation style, to be
  /// compatible with the `format-reference` function that is passed to
  /// @print-bibliography. Note that `format-citation` can return any content
  /// it wants, but it does not need to generate a hyperlink to the bibliography;
  /// the citation string is automatically wrapped in a `link` by #bibtypst.
  /// 
  /// You can pass `none` in this argument to indicate that you want to use the
  /// same citation formatter as in the previous `refsection`. If you pass `none`
  /// to the first refsection in the document, #bibtypst will use the dummy
  /// citation formatter `(reference, form) => [CITATION]`.

  /// -> function | none
  format-citation: none,

  /// A unique identifier for this refsection. Each refsection needs its own unique
  /// id, which distinguishes it from all the other refsections. You can either specify
  /// an explicit identifier here, or you can pass `none` to indicate that Pergamon
  /// should assign an identifier automatically. In this case, the first refsection
  /// in the document receives the identifier `none`, and the subsequent refsections
  /// will be named `ref1`, `ref2`, and so on.
  /// 
  /// All references and citations within a refsection with identifier X will be prefixed
  /// by `X-`; so for instance, the citation `cite("knuth1990")` in the refsection `ref1`
  /// will silently introduce and reference a label `ref1-knuth1990`. If the refsection
  /// identifier is `none`, the original label `knuth1990` will be used instead.
  /// 
  /// -> str | none
  id: none,

  /// The section of the document that is to be wrapped in this `refsection`.
  /// -> content
  doc) = {

  // reset the keys that are cited in this section
  reference-collection.update((:))

  // update the citation formatter if one was specified
  if format-citation != none {
    current-citation-formatter.update(it => format-citation)
  }

  // [!Refsection counter is  #context { refsection-counter.get() }! ]

  context {
    // check that we have a bibliography loaded
    if bibliography.get() == none {
      panic("Add a bibliography before starting a refsection.")
    }

    // determine the refsection ID
    if id != none {
      refsection-id.update(id)
    } else {
      let id = refsection-counter.get()
      if id > 0 {
        refsection-id.update("ref" + str(id))
      } // else leave it at none, for the first refsection in the document
    }
  }

  // count up the refsection ID
  refsection-counter.update(counter => counter + 1)

  doc
}



/// Create a citation to the bibliography entry with the given key.
/// The `cite` function keeps track of what `refsection` we are in and
/// uses that refsection's `format-citation` argument to typeset the
/// citation. 
/// 
/// You can pass a `form` for finer control over the citation string,
/// depending on what your citation style supports (see   @sec:builtin-citation-styles). If you do not specify
/// the `form`, its default value of `auto` will generate a default form
/// that depends on the citation style.
/// 
/// -> content
#let cite(
  /// The key of the #bibtex entry you want to cite.
  /// -> str
  key, 

  /// The citation form.
  /// -> str | auto
  form: auto
) = context {
  let xrefsection-id = refsection-id.get()
  let lbl = combine(key, xrefsection-id)
  let format-citation = current-citation-formatter.get()

  // Collect keys that are cited in this refsection
  reference-collection.update( dict => {
    dict.insert(lbl, "1")
    return dict
  })

  // Render the citation.
  let targets = query(label(lbl)) // find metadata object generated by print-bibliography
  if targets.len() == 0 {
    // on first pass, the label does not exist yet
    [XXX] 
  } else if "value" in targets.first().fields() { // not sure why I need this
    // on second pass, we can generate the real citation
    let value = targets.first().value
    let citation-str = format-citation(value, form)
    link(label(lbl))[#citation-str]
  }
}

/// Creates a citation with the form `"t"`, e.g. "Smith et al. (2020)".
/// See @cite for details.
#let citet(
  /// The key of the #bibtex entry you want to cite.
  /// -> str
  key
) = cite(key, form: "t")

/// Creates a citation with the form `"p"`, e.g. "(Smith et al. 2020)".
/// See @cite for details.
#let citep(
  /// The key of the #bibtex entry you want to cite.
  /// -> str
  key
) = cite(key, form: "p")

/// Creates a citation with the form `"g"`, e.g. "Smith et al.'s (2020)".
/// See @cite for details.
#let citeg(
  /// The key of the #bibtex entry you want to cite.
  /// -> str
  key
) = cite(key, form: "g")

/// Creates a citation with the form `"n"`, e.g. "Smith et al. 2020".
/// See @cite for details.
#let citen(
  /// The key of the #bibtex entry you want to cite.
  /// -> str
  key
) = cite(key, form: "n")




#let construct-sorting(sorting-string) = {
  let i = 0
  let ret = ()

  if sorting-string == "none" {
    return none
  }

  while i < sorting-string.len() {
    let sort-key = sorting-string.at(i)
    let sorting-function = if sort-key == "y" or sort-key == "d" {
      // year
      // TODO: currently we ignore the rest of the date if "d" specified, fix that
      if i+1 < sorting-string.len() and sorting-string.at(i+1) == "d" {
        reference => -int(reference.fields.year)
        i += 1
      } else {
        reference => int(reference.fields.year)
      }
    } else if sort-key == "n" {
      // author name
      // reference => reference.lastname-first-authors
      reference => reference.fields.sortstr-author
    } else if sort-key == "t" {
      // paper title
      reference => reference.fields.title.trim()
    } else if sort-key == "v" {
      // volume
      reference => if "volume" in reference.fields { reference.fields.volume } else { "ZZZZZZZZZZ" }
    } else if sort-key == "a" {
      reference => if "label" in reference { reference.label } else { "ZZZZZZZZZ" }
    } else {
      panic(strfmt("Sorting key {} is not implemented yet.", sort-key))
    }

    i += 1
    ret.push(sorting-function)
  }

  it => ret.map(f => f(it))
}

// Generate labels for the references, add extradates to distinguish them where
// necessary, and return the sorted bibliography.
#let label-sort-deduplicate(bibl-unsorted, label-generator, sorting-function) = {
  // Generate preliminary labels; note that the indices we pass to label-generator
  // are meaningless at this point, but they are guaranteed to be all different.
  for (index, reference) in bibl-unsorted.enumerate() {
    let (lbl, lbl-repr) = label-generator(index, reference)
    bibl-unsorted.at(index).insert("label", lbl)
    bibl-unsorted.at(index).insert("label-repr", lbl-repr)
  }

  // Sort and collect label collisions
  let sorted = bibl-unsorted.sorted(key: sorting-function)
  let sorted-labeled = sorted.enumerate().map(pair => (pair.at(1).at("label-repr"), pair.at(0)))
  let grouped = collect-deduplicate(sorted-labeled) // dict label-repr => list(reference-index)

  // Add extradates where needed
  for (lbl-repr, indices) in grouped {
    if indices.len() > 1 {
      let extradate = 0
      for ix in indices {
        sorted.at(ix).at("fields").insert("extradate", extradate)
        extradate += 1
      }
    }
  }

  // Generate final labels
  for (index, reference) in sorted.enumerate() {
    // call label-generator with meaningless indices, just in case it is needed
    let (lbl, lbl-repr) = label-generator(index, reference)
    sorted.at(index).insert("label", lbl)
    sorted.at(index).insert("label-repr", lbl-repr)
  }

  return sorted
}

/// Prints the bibliography for the @refsection in which it is contained.
/// This function cannot be used outside of a refsection.
///
/// -> none
#let print-bibliography( 
    /// A function that renders the reference into Typst content, which will
    /// then be included  in the
    /// printed bibliography. This function will typically be defined
    /// in a #bibtypst style, to be compatible with the `format-citation`
    /// function that is passed to @refsection.
    /// 
    /// `format-reference` is passed the position of the reference in the
    /// bibliography as a zero-based `int` in the first argument.
    /// It is passed the #link(<sec:reference>)[reference dictionary]
    /// for the reference
    /// in the second argument.
    /// 
    /// The third argument is a `mode` string that #bibtypst expects your
    /// `format-reference` function to pass to the
    /// Typst #link("https://typst.app/docs/reference/foundations/eval/")[eval] function.
    /// See the explanation for print-bibliography's own `eval-mode` argument below.
    /// 
    /// It returns an
    /// array of contents. The elements of this array will be laid out as the columns
    /// of a grid, in the same row, permitting e.g. bibliography layouts with one
    /// column for the reference label and one with the reference itself. 
    /// If only one column is needed (e.g. in the authoryear citation style),
    /// `format-reference` should return an array of length one.
    /// All calls to `format-reference` should return arrays of the same length.
    /// 
    /// -> function
    format-reference: (index, reference, eval-mode) => ([REFERENCE],),

    /// Generates label information for the given reference. The function takes
    /// the reference dictionary and the reference's index in the sorted bibliography as input and returns
    /// an array `(label, label-repr)`, where `label` can be anything the style finds
    /// useful for generating the citations and `label-repr` is a string representation
    /// of the label. These string representations are used to detect label collisions,
    /// which cause the generation of extradates.
    /// 
    /// The default implementation simply returns a number that is guaranteed to be
    /// unique to each reference. Styles that want to work with `extradate` will almost
    /// certainly want to pass a different function here.
    /// 
    /// The function passed as `label-generator` does not control whether labels
    /// are printed in the bibliography in their own separate column; it only computes information for internal use.
    /// A style can decide whether it wants to print labels through its `format-reference`
    /// function.
    /// 
    /// Note that `label-repr` _must_ be a `str`.
    /// 
    /// -> function
    label-generator: (index, reference) => (index + 1, str(index + 1)),

    /// A function that defines the order in which references are shown in the bibliography.
    /// This function takes a #link(<sec:reference>)[reference dictionary] as input and returns a value that can be 
    /// #link("https://typst.app/docs/reference/foundations/array/#definitions-sorted")[sorted],
    /// e.g. a number, a string, or an array of sortable values.
    /// 
    /// Alternatively, you can specify a #biblatex\-style sorting string. The following strings are
    /// supported:
    /// - `n`: author name (lastname firstname)
    /// - `t`: paper title
    /// - `y` or `d`: the year in which the paper was published; write `yd` or `dd` for descending order
    /// - `v`: volume, if defined
    /// - `a`: the contents of the `label` field (if defined); for the `alphabetic` style, this amounts to the alphabetic paper key
    /// 
    /// For instance, `"nydt"` sorts the references first by author name, then by descending year, then by title.   
    /// Note that #bibtypst currently makes no distinction between the year and the full date (cf. #issue(24)).
    /// 
    /// If `none` or the string `"none"` is passed as the `sorting` argument, the references
    /// are sorted in an arbitrary order. There is currently no reliable support for sorting
    /// the references in the order in which they were cited in the document.
    /// 
    /// -> function | str | none
    sorting: none,

    /// Determines whether the printed bibliography should contains all references from the loaded bibliographies
    /// (`true`) or only those that were cited in the current refsection (`false`).
    /// -> bool
    show-all: false,

    /// Filters which references should be included in the printed bibliography. This makes sense only if
    /// `show-all` is `true`, otherwise not all your citations will be resolved to bibliography entries.
    /// The parameter should be a function that takes a #link(<sec:reference>)[reference dictionary] as argument
    /// and returns a boolean value. The printed bibliography will contain exactly those references
    /// for which the function returned `true`.
    /// -> function
    /// 
    filter: reference => true,

    /// A dictionary for styling the #link("https://typst.app/docs/reference/layout/grid/")[grid]
    /// in which the bibliography is laid out. By default, the grid is laid out with `row-gutter: 1.2em` and
    /// `column-gutter: 0.5em`. You can overwrite these values and specify new ones with this argument;
    /// the revised style specification will be passed to the `grid` function.
    /// 
    /// -> dict
    grid-style: (:),

    /// The output of `format-reference` can be passed through the Typst #link("https://typst.app/docs/reference/foundations/eval/")[eval]
    /// function
    /// for final rendering. This is useful e.g. to typeset math in a paper title correctly.
    /// Pass the `eval` mode in this argument, or pass `none` if you don't want to call
    /// `eval`.
    /// 
    /// -> str | none
    eval-mode: "markup",

    /// The title that will be typeset above the bibliography in the document.
    /// The string given here will be rendered as a first-level heading without numbering.
    /// Pass `none` to suppress the bibliography title.
    /// 
    /// -> str | none
    title: "References",

    /// #bibtex fields that contain names and should be parsed as such. For each `X` in this array,
    /// #bibtypst will enrich the reference dictionary with a field `parsed-X` that contains an array of
    /// name-part dictionaries, such as `("family": "Smith", "given": "John")`. See
    /// @sec:reference for an example.
    /// -> array
    name-fields: ("author", "editor", "translator")
  ) = context {

  let bib = bibliography.get()
  let refsection-id-here = refsection-id.get()

  // construct sorting function if necessary
  let sorting-function = if type(sorting) == str { construct-sorting(sorting) } else { sorting }
  if sorting-function == none {
    sorting-function = it => 0
  }

  // extract references for the cited keys
  let bibl-unsorted = ()

  if show-all {
    for reference in bib.values() {
      let ref = parse-reference-names(reference, name-fields)
      bibl-unsorted.push(ref)
    }
  } else {
    // [RC at printbib: #reference-collection.get().keys()]
    // let cited-keys = ("bender20:_climb_nlu", "knuth1990") // XXXX
    let cited-keys = reference-collection.get().keys()
    for lbl in cited-keys {
      let key = split(str(lbl), refsection-id-here)

      if key in bib { // skip references to labels that are not bib keys
        let bib-entry = bib.at(key)
        bib-entry = parse-reference-names(bib-entry, name-fields)
        bibl-unsorted.push(bib-entry)
      }
    }
  }

  bibl-unsorted = bibl-unsorted.filter(filter)
  let sorted = label-sort-deduplicate(bibl-unsorted, label-generator, sorting-function)
  let formatted-references = sorted.enumerate().map(it => format-reference(it.at(0), it.at(1), eval-mode))  // -> array(array(content))
  let num-columns = if formatted-references.len() == 0 { 0 } else { formatted-references.at(0).len() }
  let cells = ()

  // collect cells
  for index in range(sorted.len()) {
    let reference = sorted.at(index)
    let formatted-reference = formatted-references.at(index)

    // construct first cell of the row, it has to contain the metadata and label
    let meta = (
      kind: "reference-data",
      key: reference.entry_key,
      index: index,
      reference: reference,
    )

    // store the data in "meta" in a metadata element, so it can later be access through the label
    let lbl = combine(reference.entry_key, refsection-id-here)
    let cell0 = [#metadata(meta)#label(lbl)#formatted-reference.at(0)]
    cells.push(cell0)

    // add all the other cells, if any
    for cell in formatted-reference.slice(1) {
      cells.push(cell)
    }
  }


  // "References" heading
  if title != none [
    #heading(title, numbering: none)
  ]

  // layout the cells in a grid
  if num-columns > 0 {
    // allow grid-style argument to override default layout parameters
    let final-grid-style = (columns: num-columns, row-gutter: 1.2em, column-gutter: 0.5em)
    for (key, value) in grid-style.pairs() {
      final-grid-style.insert(key, value)
    }

    grid(..final-grid-style, ..cells)
  } else {
    []
  }
}
