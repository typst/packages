%YAML 1.2
---
# SPDX-FileCopyrightText: 2020 Agda Github Community
#
# SPDX-License-Identifier: MIT
#
# http://www.sublimetext.com/docs/3/syntax.html
name: Agda
file_extensions:
  - agda
scope: source.agda
contexts:
  main:
    - match: "--"
      push:
        - meta_scope: comment.line.double-dash.agda
        - match: $
          pop: true
    - match: "{-[^#]"
      push:
        - meta_scope: comment.block.agda
        - match: "-}"
          pop: true
    - match: "{-#"
      push:
        - meta_scope: support.other.agda
        - match: "#-}"
          pop: true
    - match: '"'
      push:
        - meta_scope: string.quoted.double.agda
        - match: '"'
          pop: true
    - match: '''([^\\'']|\\[''\\"[:alnum:]]+)'''
      scope: constant.char.agda
    - match: '(?<=^|[[:space:]\(\){}])(-?\d+|0x[0-9A-F]+|-?\d+\.\d+((e|E)(\+|-)?\d+)?|-?\d+(e|E)(\+|-)?\d+)(?=[[:space:]\(\){}])'
      scope: constant.numeric.agda
    - match: '\b(data|record|module|constructor|open *import|open|import)[[:space:]]+([^;\(\){}@"[:space:]]+)'
      captures:
        1: keyword.other.agda
        2: entity.name.type.agda
    - match: '((?<=^|[.;\(\){}@"[:space:]])\?(?=[.;\(\){}@"[:space:]])|{!.*!})'
      scope: entity.name.tag.agda
    - match: '\b(Set|Prop)[0123456789₀₁₂₃₄₅₆₇₈₉]*(?=$|[[:space:]\(\)\{\}])'
      scope: constant.language.agda
    - match: '(?<=^|[[:space:]\(\)\{\}])(λ|→|->|∀|=|←|:)(?=[[:space:]\(\)\{\}])'
      scope: keyword.other.agda
    - match: '^[[:space:]]*(((abstract|instance|macro|pattern|postulate|primitive|private|syntax|variable|where|let)[[:space:]]+)*)((([^;\(\){}@"[:space:]]+)[[:space:]]+)+)(?=:)'
      captures:
        1: keyword.other.agda
        4: entity.name.agda
    - match: '(?<=^|[[:space:]\(\){}])(abstract|codata|coinductive|constructor|data|do|eta-equality|field|forall|hiding|import|in|inductive|infix|infixl|infixr|instance|interleaved|let|macro|module|mutual|no-eta-equality|opaque|open|overlap|pattern|postulate|primitive|private|public|quote|quoteTerm|record|renaming|rewrite|syntax|tactic|unfolding|unquote|unquoteDecl|unquoteDef|using|variable|where|with)(?=$|[[:space:]\(\){}])'
      scope: keyword.other.agda
