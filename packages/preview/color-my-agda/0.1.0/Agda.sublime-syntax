%YAML 1.2
---
file_extensions:
  - agda
scope: source.agda
version: 2

contexts:
  main:
    - match: \(\)
      scope: constant.language.unit.agda
    - match: '\[\]'
      scope: constant.language.empty-list.agda
    - match: \b(module)\b
      captures:
        1: keyword.other.agda
      push:
        - meta_scope: meta.declaration.module.agda
        - match: (where)
          captures:
            1: keyword.other.agda
          pop: true
        - include: module_name
        - include: module_exports
        - match: "[a-z]+"
          scope: invalid
    - match: \b(instance)\b
      captures:
        1: keyword.other.agda
      push:
        - include: type_signature
    - match: \b((open )?import( qualified)?)\b
      captures:
        1: keyword.other.agda
      push:
        - meta_scope: meta.import.agda
        - match: ($|;)
          pop: true
        - match: (as|hiding|using)
          scope: keyword.other.agda
        - include: module_name
        - include: module_exports
        - include: comments
    - match: \b(where|data|let|in)\b
      scope: keyword.other.agda
    - match: '\binfix[lr]?\b'
      scope: keyword.operator.agda
    - match: \b(do)\b
      scope: keyword.control.agda
    - match: \b\d+(?:(\.)\d+(?:[eE][-+]?\d+)?|(?:[eE][-+]?\d+))\b
      scope: constant.numeric.float.decimal.agda
      captures:
        1: punctuation.separator.decimal.agda
    - match: \b(0[xX])\h+\b
      scope: constant.numeric.integer.hexadecimal.agda
      captures:
        1: punctuation.definition.numeric.base.agda
    - match: \b\d+\b
      scope: constant.numeric.integer.decimal.agda
    - include: pragma
    - match: '"'
      scope: punctuation.definition.string.begin.agda
      push:
        - meta_scope: string.quoted.double.agda
        - match: $|"
          scope: punctuation.definition.string.end.agda
          pop: true
        - match: |-
            \\(NUL|SOH|STX|ETX|EOT|ENQ|ACK|BEL|BS|HT|LF|VT|FF|CR|SO|SI|DLE|DC1|
            DC2|DC3|DC4|NAK|SYN|ETB|CAN|EM|SUB|ESC|FS|GS|RS|US|SP|DEL|
            [abfnrtv\\\"''\&])
          scope: constant.character.escape.agda
        - match: '\\o[0-7]+|\\x[0-9A-Fa-f]+|\\[0-9]+'
          scope: constant.character.escape.octal.agda
        - match: '\^[A-Z@\[\]\\\^_]'
          scope: constant.character.escape.control.agda
    - match: '\[(?:|e|d|t|p)\|'
      comment: Points out splices in ast quotes
      scope: keyword.other.quasibracket.agda
      push:
        - meta_scope: meta.other.quasiquote.agda
        - match: '(.*)(\|\])'
          captures:
            1: string.quasiquoted.agda
            2: keyword.other.quasibracket.agda
          pop: true
        - match: \$\(
          scope: keyword.other.splice.agda
        - match: \$
          scope: string.quasiquoted.agda
        - match: "[^$]*"
          scope: string.quasiquoted.agda
    - match: \$\(
      comment: Highlight the beginning of a splice.
      scope: keyword.other.splice.agda
    - match: '\[[a-zA-Z0-9_'']*\|'
      scope: keyword.other.quasibracket.agda
      push:
        - meta_scope: meta.other.quasiquote.agda
        - match: '(.*)(\|\])'
          captures:
            1: string.quasiquoted.agda
            2: keyword.other.quasibracket.agda
          pop: true
        - match: .*
          scope: string.quasiquoted.agda
    - match: |-
        (?x)
        (')
        (?:
          [\ -\[\]-~]                             # Basic Char
          | (\\(?:NUL|SOH|STX|ETX|EOT|ENQ|ACK|BEL|BS|HT|LF|VT|FF|CR|SO|SI|DLE
            |DC1|DC2|DC3|DC4|NAK|SYN|ETB|CAN|EM|SUB|ESC|FS|GS|RS
            |US|SP|DEL|[abfnrtv\\\"'\&]))       # Escapes
          | (\\o[0-7]+)                             # Octal Escapes
          | (\\x[0-9A-Fa-f]+)                       # Hexadecimal Escapes
          | (\^[A-Z@\[\]\\\^_])                     # Control Chars
        )
        (')
      scope: string.quoted.single.agda
      captures:
        1: punctuation.definition.string.begin.agda
        2: constant.character.escape.agda
        3: constant.character.escape.octal.agda
        4: constant.character.escape.hexadecimal.agda
        5: constant.character.escape.control.agda
        6: punctuation.definition.string.end.agda
    - match: '^(\s*)([a-z_][a-zA-Z0-9_'']*|\([|!%$+\-.,=</>]+\))\s*:'
      captures:
        2: entity.name.function.agda
        3: keyword.other.colon.agda
      push:
        - meta_scope: meta.function.type-declaration.agda
        - match: ^(?!\s*(?:--|{-|$)|\1\s)
          pop: true
        - include: type_signature
    - match: '\b[A-Z]\w*\b'
      scope: constant.other.agda
    - include: comments
    - include: infix_op
    - match: '[|!%$?~+:\-.=</>\\]+'
      scope: keyword.operator.agda
    - match: ","
      scope: punctuation.separator.comma.agda
  block_comment:
    - match: '\{-(?!#)'
      scope: punctuation.definition.comment.begin.agda
      push:
        - meta_scope: comment.block.agda
        - match: '\{-#'
          push:
            - match: '-\}'
              pop: true
            - include: block_comment
        - include: block_comment
        - match: '-\}'
          scope: punctuation.definition.comment.end.agda
          pop: true
  comments:
    - match: '--'
      scope: punctuation.definition.comment.agda
      push:
        - meta_scope: comment.line.double-dash.agda
        - match: $\n?
          pop: true
    - include: block_comment
  infix_op:
    - match: \([-+*/,|!%$:.=<>]+\)
      scope: entity.name.function.infix.agda
  module_exports:
    - match: \(
      push:
        - meta_scope: meta.declaration.exports.agda
        - match: \)
          pop: true
        - match: '\b[a-z][a-zA-Z_''0-9]*'
          scope: entity.name.function.agda
        - match: '\b[A-Z][A-Za-z_''0-9]*'
          scope: storage.type.agda
        - match: ","
          scope: punctuation.separator.comma.agda
        - include: infix_op
        - match: \(.*?\)
          scope: meta.other.unknown.agda
        - include: comments
  module_name:
    - match: "[A-Za-z._']*"
      scope: support.other.module.agda
  pragma:
    - match: '\{-#'
      push:
        - meta_scope: meta.preprocessor.agda
        - match: '#-\}'
          pop: true
        - match: |-
            \b(BUILTIN|CATCHALL|COMPILE|DISPLAY|FOREIGN|INJECTIVE|INLINE|
            NO_POSITIVITY_CHECK|NO_TERMINATION_CHECK|NO_UNIVERSE_CHECK|NOINLINE|
            NON_COVERING|NON_TERMINATING|OPTIONS|POLARITY|REWRITE|STATIC|
            TERMINATING|WARNING_ON_USAGE|WARNING_ON_IMPORT)\b
            # https://agda.readthedocs.io/en/v2.6.1/language/pragmas.html?highlight=pragma#index-of-pragmas
          scope: keyword.other.preprocessor.agda
  type_signature:
    - include: pragma
    - match: "(->|→)"
      scope: keyword.other.arrow.agda
    - match: "(=>|⇒)"
      scope: keyword.other.big-arrow.agda
    - match: '\b[a-z][a-zA-Z0-9_'']*\b'
      scope: variable.other.generic-type.agda
    - match: '\b[A-Z][a-zA-Z0-9_'']*\b'
      scope: storage.type.agda
    - match: \(\)
      scope: support.constant.unit.agda
    - include: comments
