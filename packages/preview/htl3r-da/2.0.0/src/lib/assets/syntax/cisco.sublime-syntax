%YAML 1.2
---
# Original: https://github.com/DiogoAndre/language-cisco.git

# MIT License
#
# Copyright (c) 2014 Diogo André de Assumpção.
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

# http://www.sublimetext.com/docs/3/syntax.html
name: Cisco IOS
file_extensions:
  - ios
  - cisco
scope: source.cisco-ios-config
contexts:
  main:
    - include: version
    - include: service
    - include: hostname
    - include: username
    - include: enable
    - include: clock
    - include: dhcp_pool
    - include: archive
    - include: logging
    - include: multilink
    - include: mpls
    - include: login
    - include: vlan
    - include: vtp
    - include: mls
    - include: aaa
    - include: buffers
    - include: process
    - include: prefix_list
    - include: community_list
    - include: ip_vrf
    - include: ip_acl
    - include: ip_nat
    - include: route_map
    - include: qos
    - include: spanning_tree
    - include: redundancy
    - include: voice_service
    - include: voice_trule
    - include: voice_tprofile
    - include: voice_card
    - include: dial_peer
    - include: sip_ua
    - include: telephony_service
    - include: ephone_dn
    - include: ephone
    - include: global_ip
    - include: global_ipv6
    - include: disable
    - include: ip_address
    - include: subnet_mask
    - include: wildcard_mask
    - include: crypto_ike_policy
    - include: crypto_ike
    - include: crypto_map
    - include: crypto_pki
    - include: crypto_ipsec
    - include: crypto_ca
    - include: certificate
    - include: crypto_dynmap
    - include: interface
    - include: router
    - include: access_list
    - include: banner-motd
    - include: banner-asa
    - include: banner-login
    - include: banner-exec
    - include: banner-timeout
    - include: snmp
    - include: tacacs
    - include: line
    - include: monitor
    - include: object-group
    - include: ntp
    - include: radius_server
    - include: vpdn
    - include: vpdn_group
    - match: ^!.*$
      comment: comments are usually made with a bang
      scope: comment.line.bang.cisco
    - match: \b(Current|system message)\s.*$
      scope: comment.documentation.cisco
    - match: \b(tftp-server|radius-server|ntp)\s
      scope: keyword.other.misc
    - match: ^(boot-start-marker)
      captures:
        1: constant.language.cisco.boot
        2: constant.language.cisco.boot
      push:
        - meta_scope: entity.character.filepath.cisco
        - match: ^(boot-end-marker)
          captures:
            1: constant.language.cisco.boot
            2: constant.language.cisco.boot
          pop: true
        - match: '\b(boot|system|flash) '
          scope: keyword.other.boot
  aaa:
    - match: ^(no )?(aaa)\s
      captures:
        1: keyword.negative.cisco
        2: constant.language.cisco
      push:
        - match: $
          pop: true
        - match: (new-model|authentication|authorization|accounting|login|exec|commands|group|local|session-id|server|policy)\s
          scope: keyword.other.aaa
  access_list:
    - match: ^(access-list) (\w*)
      captures:
        1: constant.language.cisco
        2: constant.numeric.cisco
      push:
        - match: ($)
          pop: true
        - match: (extended|compiled|udp|esp|tcp|icmp|ip|eq|range)\s
          scope: keyword.other.acl
        - match: (permit)\s
          scope: string
        - match: (host) (\S*)
          captures:
            1: keyword.other.acl
            2: constant.numeric.cisco
        - match: (deny)\s
          scope: entity.other.inherited-class
        - match: (any)
          scope: entity.other.inherited-class
        - include: ipv6_address
        - include: ip_address
        - include: subnet_mask
        - include: description
  archive:
    - match: ^(archive)(?=\s)
      captures:
        1: constant.language.cisco
      push:
        - match: ^(!)
          captures:
            1: comment.documentation.cisco
          pop: true
        - match: \b(path|maximum|notify|(write-)?memory|time-period|reserve|console|logging|size|notify|syslog|contenttype|log|config|hidekeys)(?=\s)
          scope: keyword.other.archive
  banner-asa:
    - match: '^(banner motd)(.[^\^]*)'
      captures:
        1: constant.language.cisco
        2: comment.banner.cisco
      push:
        - meta_scope: keyword.other.service
        - match: $
          captures:
            1: comment.banner.cisco
          pop: true
        - match: ^.*$
          scope: comment.banner.cisco
  banner-exec:
    - match: ^(banner exec \^.*)
      captures:
        1: constant.language.cisco
        2: comment.banner.cisco
      push:
        - meta_scope: keyword.other.service
        - match: ^(.*\^)
          captures:
            1: comment.banner.cisco
          pop: true
        - match: ^.*$
          scope: comment.banner.cisco
  banner-login:
    - match: ^(banner login \^.*)
      captures:
        1: constant.language.cisco
        2: comment.banner.cisco
      push:
        - meta_scope: keyword.other.service
        - match: ^(.*\^)
          captures:
            1: comment.banner.cisco
          pop: true
        - match: ^.*$
          scope: comment.banner.cisco
  banner-motd:
    - match: ^(banner motd \^.*)
      captures:
        1: constant.language.cisco
        2: comment.banner.cisco
      push:
        - meta_scope: keyword.other.service
        - match: ^(.*\^)
          captures:
            1: comment.banner.cisco
          pop: true
        - match: ^.*$
          scope: comment.banner.cisco
  banner-timeout:
    - match: ^(banner prompt-timeout \^.*)
      captures:
        1: constant.language.cisco
        2: comment.banner.cisco
      push:
        - meta_scope: keyword.other.service
        - match: ^(.*\^)
          captures:
            1: comment.banner.cisco
          pop: true
        - match: ^.*$
          scope: comment.banner.cisco
  buffers:
    - match: ^(buffers)\s
      captures:
        1: constant.language.cisco
      push:
        - match: $
          pop: true
        - match: (small|medium|large|permanent|max-free|min-free|initial)\s
          scope: keyword.other.buffers
  certificate:
    - match: ^\s(certificate)(?=\s)
      captures:
        1: constant.language.cisco
      push:
        - match: .*(quit)
          captures:
            1: comment.documentation.cisco
          pop: true
        - match: \s(ca)(?=\s)
          scope: keyword.other.crypto
        - match: \s(.*)(?=\s)
          scope: string
  clock:
    - match: ^(clock)\s(timezone|summer-time)
      captures:
        1: constant.language.cisco
        2: keyword.other.clock
      push:
        - match: $
          pop: true
        - match: (recurring)\s
          scope: keyword.other.clock
  community:
    - match: \b(\d+:\d+)\b
      scope: constant.numeric.cisco
  community_list:
    - match: ^(ip)\s(community-list)(?=\s)
      captures:
        1: constant.language.cisco
        2: keyword.other.community
      push:
        - match: $
          pop: true
        - match: (permit|deny|seq)\s
          scope: keyword.other.prefix
        - include: description
        - include: community
  crypto_ca:
    - match: ^(crypto ca)(?=\s)
      captures:
        1: constant.language.cisco
      push:
        - match: ($)
          captures:
            1: comment.documentation.cisco
          pop: true
        - match: \s(certificate|trustpoint|chain)(?=\s)
          scope: keyword.other.crypto
        - match: \s(.*)(?=\s)
          scope: string
  crypto_dynmap:
    - match: ^(crypto dynamic-map)(?=\s)
      captures:
        1: constant.language.cisco
      push:
        - match: ^(!)
          captures:
            1: comment.documentation.cisco
          pop: true
        - match: \s(set|transform-set)(?=\s)
          scope: keyword.other.crypto
        - include: interface_types
        - include: ip_address
  crypto_ike:
    - match: ^(crypto isakmp)(?=\s)
      captures:
        1: constant.language.cisco
      push:
        - match: ($)
          captures:
            1: comment.documentation.cisco
            2: constant.language.cisco
          pop: true
        - match: \s(encr|encryption|hash|authentication|group|lifetime|policy|dns|key|pool|acl|domain|configuration|client|group)(?=\s)
          scope: keyword.other.crypto
        - include: disable
        - include: ip_address
        - include: description
  crypto_ike_policy:
    - match: ^(crypto isakmp policy|crypto ikev2 policy) (\d*)$
      captures:
        1: constant.language.cisco
        2: constant.numeric.cisco
      push:
        - match: (^!|^exit)|(crypto isakmp)|(crypto ikev2 policy)
          captures:
            1: comment.documentation.cisco
            2: constant.language.cisco
            3: constant.language.cisco
          pop: true
        - match: (encr|prf|integrity|encryption|hash|authentication|group|lifetime|policy|dns|key|pool|acl|domain|configuration|client|group)(?=\s)
          scope: keyword.other.crypto
        - include: disable
        - include: numeric
        - include: ip_address
        - include: description
  crypto_ipsec:
    - match: ^(crypto ipsec)(?=\s)
      captures:
        1: constant.language.cisco
      push:
        - match: $
          pop: true
        - match: \s(client|ezvpn|ezvpnclient|security-association|lifetime|seconds|transform-set)(?=\s)
          scope: keyword.other.crypto
        - include: interface_types
        - include: ip_address
  crypto_map:
    - match: ^(crypto map)(?=\s)
      captures:
        1: constant.language.cisco
      push:
        - match: $
          pop: true
        - match: \s(static-map|local-address|client|authentication|configuration|isakmp|authorization|ipsec-isakmp|dynamic|address|list|match)(?=\s)
          scope: keyword.other.crypto
        - include: interface_types
        - include: ip_address
  crypto_pki:
    - match: ^(crypto pki)(?=\s)
      captures:
        1: constant.language.cisco
      push:
        - match: (!|quit)
          captures:
            1: comment.documentation.cisco
          pop: true
        - match: \s(certificate|trustpoint|chain|self(-)?signed|enrollment|revocation-check|rsakeypair|subject-name)(?=\s)
          scope: keyword.other.crypto
        - include: disable
        - include: ip_address
        - include: description
  description:
    - match: ^(description|!|remark)(?=\s)
      captures:
        1: comment.documentation.cisco
      push:
        - match: $
          pop: true
        - match: (.*)
          scope: comment.documentation.cisco
  dhcp_pool:
    - match: ^(ip )(dhcp pool)\s
      captures:
        1: constant.language.cisco
        2: keyword.other.dhcp
      push:
        - match: ^(!)
          captures:
            1: comment.documentation.cisco
          pop: true
        - match: (network|dns-server|default-router|option|ip|lease)\s
          scope: keyword.other.dhcp
        - include: ip_address
  dial_peer:
    - match: ^(dial-peer )(voice)(?=\s)
      captures:
        1: constant.language.cisco
        2: keyword.other.voice
      push:
        - match: ^(!)
          captures:
            1: comment.documentation.cisco
          pop: true
        - include: description
        - match: (ip|qos|dscp|clid|network-number|voip|destination-pattern|b2bua|session|protocol|target|incoming|called-number|dtmf-relay|codec|translation-profile|vad)\s
          scope: keyword.other.voice
        - include: disable
  disable:
    - match: \b(no(?=\s)|shutdown)
      scope: entity.other.inherited-class
  enable:
    - match: ^(enable)\s(secret|password)
      captures:
        1: constant.language.cisco
        2: keyword.other.enable
      push:
        - match: (.*$)
          captures:
            1: entity.character.password.cisco
          pop: true
  ephone:
    - match: ^(ephone)(?=\s)
      captures:
        1: constant.language.cisco
      push:
        - match: ^(!)
          captures:
            1: comment.documentation.cisco
          pop: true
        - include: description
        - match: (keypad-normalize|device-security-mode|mac-address|after-hour|username|password|type|button)\s
          scope: keyword.other.voice
        - include: disable
        - include: ipv6_address
        - include: ip_address
  ephone_dn:
    - match: ^(ephone-dn)(?=\s)
      captures:
        1: constant.language.cisco
      push:
        - match: ^(!)
          captures:
            1: comment.documentation.cisco
          pop: true
        - include: description
        - match: (dual-line|number|no-reg|label|name|call-forward|busy|noan|hold-alert|timeout|originator|secondary|mwi-type|mwi)\s
          scope: keyword.other.voice
        - include: disable
        - include: ipv6_address
        - include: ip_address
  global_ip:
    - match: ^(no )*(ip)(?=\s)
      captures:
        1: keyword.negative.cisco
        2: constant.language.cisco
      push:
        - match: $
          pop: true
        - match: \s(forward-protocol|as-path|source|destination|version|ftp|username|password|flow-export|default-gateway|tacacs|sla|enable|tcp|path-mtu-discovery|flow-cache|bootp|lookup|multicast|hardware-switching|replication-mode|icmp|rate-limit|unreachable|authentication|timeout-policy|idle|life|local|pool|dhcp|excluded-address|use|connected|pim|rp-address|multicast-routing|source-route|vrf|cef|name-server|domain|name|telnet|source-interface|standard|extended|http|server|secure-server|route|subnet-zero|classless|route|global)(?=\s)
          scope: keyword.other.ip
        - include: access_list
        - include: ip_address
        - include: subnet_mask
        - include: interface_types
  global_ipv6:
    - match: ^(no )*(ipv6)(?=\s)
      captures:
        1: keyword.negative.cisco
        2: constant.language.cisco
      push:
        - match: $
          pop: true
        - match: \s(rpf|use-bgp|multicast|hardware-switching|replication-mode|pim|rp-address|unicast-routing|multicast-routing|vrf|cef|name-server|domain|name|telnet|source-interface|prefix-list|access-list|standard|extended|http|server|secure-server|route)(?=\s)
          scope: keyword.other.ipv6
        - include: ipv6_address
        - include: interface_types
  hostname:
    - match: ^(hostname)
      captures:
        1: constant.language.cisco
      push:
        - meta_scope: entity.character.hostname.cisco
        - match: .*$
          captures:
            1: constant.language.cisco
          pop: true
  interface:
    - match: ^(interface)(?=\s)(.*)$
      captures:
        1: constant.language.cisco
        2: string
      push:
        - match: ^(!)
          pop: true
        - match: (redirects|bridge-group|dce-terminal-timing-enable|mop|snmp|ppp|multilink|half-duplex|full-duplex|proxy-arp|channel-group|active|mls|qos|switchport|backup|preemption|delay|native|allowed|access|trunk|mode|vlan-id|bandwidth|ipv6|access-group|in|out|verify|unicast|source|destination|reachable-via|tx|rx|dead-interval|hello-interval|flow|policy|route-map|tunnel|tcp|rtp|adjust-mss|ingress|cost|allow-default|allow-self-ping|unreachables|lacp|fast-switchover|inside|outside|ip|vrf|forwarding|mtu|address|cdp|enable|encapsulation|speed|duplex|media-type|load-interval|nat|unnumbered|service-module|default-gateway|virtual-reassembly|crypto|map|service-policy|mpls|pim|ospf|rip|clns|negotiation|output|input|dsu|framing|cablelength|crc|clock|down-when-looped|peer|logging|event|trust|neighbor-route|keepalive|spanning-tree)(?=\s)
          scope: keyword.other.interface
        - match: \s(security-level)\s(\d*)
          captures:
            1: keyword.other.interface
            2: string
          push:
            - match: $
              pop: true
        - match: \s(nameif)\s(.*)
          captures:
            1: keyword.other.interface
            2: string
          push:
            - match: $
              pop: true
        - include: ipv6_address
        - include: ip_address
        - include: subnet_mask
        - include: interface_types
        - include: disable
        - include: description
        - include: crypto_ipsec
        - include: crypto_map
  interface_types:
    - match: '\b((Fast|Gigabit|TenGigabit)?Ethernet|Vlan|Dialer|Serial|Service-Engine|Dot11Radio|ATM|BRI|Tunnel(Group-)?Async|BVI|Loopback|Null|Port-channel|Virtual-(Access|Dot11Radio|PPP|Template))((\d+[\.:/])*)?\d+\b'
      scope: constant.character.interface.cisco
  ip_acl:
    - match: ^(ip )(access-list)
      captures:
        1: constant.language.cisco
        2: keyword.other.acl
      push:
        - match: ^(?=\w)
          pop: true
        - match: \s(udp|tcp|ip|eq|any|range|host|access-list|extended|standard)(?=\s)
          scope: keyword.other.acl
        - match: (permit)\s
          scope: string
        - match: (deny)\s
          scope: entity.other.inherited-class
        - include: ip_address
        - include: wildcard_mask
        - include: disable
        - include: description
  ip_address:
    - match: '\b((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)(/\d+)?\b'
      scope: constant.numeric.cisco
  ip_nat:
    - match: ^(ip)\s(nat)(?=\s)
      captures:
        1: constant.language.cisco
        2: keyword.other.nat
      push:
        - match: $
          pop: true
        - match: (interface|overload|list|inside|outside|route-map|source|destination)\s
          scope: keyword.other.nat
        - include: ipv6_address
        - include: ip_address
        - include: interface_types
        - include: description
  ip_vrf:
    - match: ^(ip\s|vrf\s)(vrf|definition)(?=\s)
      captures:
        1: constant.language.cisco
        2: keyword.other.vrf
      push:
        - match: ^(!)
          captures:
            1: comment.documentation.cisco
          pop: true
        - match: (ipv4|vrf|ipv6|route-target|rd|export|import)\s
          scope: keyword.other.vrf
        - match: \s(address-family|exit-address-family)(?=\s)
          scope: constant.language.cisco
        - include: route_distinguisher
  ipv6_address:
    - match: '::(/\d+)'
      scope: constant.numeric.cisco
    - match: '\b((([0-9A-Fa-f]{1,4}:){7}([0-9A-Fa-f]{1,4}|:))|(([0-9A-Fa-f]{1,4}:){6}(:[0-9A-Fa-f]{1,4}|((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){5}(((:[0-9A-Fa-f]{1,4}){1,2})|:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){4}(((:[0-9A-Fa-f]{1,4}){1,3})|((:[0-9A-Fa-f]{1,4})?:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){3}(((:[0-9A-Fa-f]{1,4}){1,4})|((:[0-9A-Fa-f]{1,4}){0,2}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){2}(((:[0-9A-Fa-f]{1,4}){1,5})|((:[0-9A-Fa-f]{1,4}){0,3}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){1}(((:[0-9A-Fa-f]{1,4}){1,6})|((:[0-9A-Fa-f]{1,4}){0,4}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(:(((:[0-9A-Fa-f]{1,4}){1,7})|((:[0-9A-Fa-f]{1,4}){0,5}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:)))(%.+)?(/\d+)?\b'
      scope: constant.numeric.cisco
  line:
    - match: ^(line)\s
      captures:
        1: constant.language.cisco
      push:
        - match: ^(!)
          captures:
            1: comment.documentation.cisco
          pop: true
        - match: (con|aux|vty|length|accounting|authorization|authentication|commands|logging|location|exec-timeout|password|login|transport|input|output|privilege|level|access-class|exec|activation-character|stopbits|baud)\s
          scope: keyword.other.line
        - match: ^line
          scope: constant.language.cisco
        - include: disable
        - include: description
  logging:
    - match: ^(no )?(logging)(?=\s)
      captures:
        1: keyword.negative.cisco
        2: constant.language.cisco
      push:
        - match: $
          pop: true
        - match: \s(trap|facility|host|event|link-status|source-interface|buffered|console)(?=\s)
          comment: logging
          scope: keyword.other.logging
  login:
    - match: ^(no )?(login)(?=\s)
      captures:
        1: keyword.negative.cisco
        2: constant.language.cisco
      push:
        - match: $
          pop: true
        - match: \s(block-for|log|every|attempts|within|delay|quiet-mode|access-class|on-failure|on-success)(?=\s)
          scope: keyword.other.logging
  mls:
    - match: ^(no )?(mls)(?=\s)
      captures:
        1: keyword.negative.cisco
        2: constant.language.cisco
      push:
        - match: $
          pop: true
        - match: \s(flow|qos|nde|sender|version|ip|ipv6|freeze|interface-full|statistics-export interval|rate-limit|capture|acl|tcam|share-global|cef error|action)(?=\s)
          scope: keyword.other.mls
  monitor:
    - match: ^(monitor)(?=\s)
      captures:
        1: constant.language.cisco
      push:
        - match: $
          pop: true
        - match: \s(source|destination|lifetime|session)(?=\s)
          comment: monitor
          scope: keyword.other.monitor
  mpls:
    - match: ^(no )?(mpls)(?=\s)
      captures:
        1: keyword.negative.cisco
        2: constant.language.cisco
      push:
        - match: $
          pop: true
        - match: \s(traffic-eng|auto-bw|timers|frequency|advertise-labels|for|ldp|label|protocol)(?=\s)
          scope: keyword.other.logging
  multilink:
    - match: ^(multilink)(?=\s)
      captures:
        1: constant.language.cisco
      push:
        - match: $
          pop: true
        - match: \s(endpoint|bundle-name|authenticated)(?=\s)
          scope: keyword.other.logging
  ntp:
    - match: ^(no )?(ntp)(?=\s)
      captures:
        1: keyword.negative.cisco
        2: constant.language.cisco
      push:
        - match: $
          pop: true
        - match: \s(clock-period|update-calendar|peer|server|master|source)(?=\s)
          comment: time server
          scope: keyword.other.logging
  numeric:
    - match: (\d+\s)
      scope: constant.numeric.cisco
  object-group:
    - match: ^(object-group)\s(protocol|network|service|icmp-type)\s(\S*)\s(\w*|$)
      captures:
        1: constant.character.interface.cisco
        2: constant.character.interface.cisco
        3: keyword.other.interface
        4: constant.character.interface.cisco
      push:
        - match: ^(?=\w|!)
          captures:
            1: constant.character.interface.cisco
            2: constant.character.interface.cisco
            3: keyword.other.interface
            4: constant.character.interface.cisco
          pop: true
        - include: description
        - match: \s(network-object|port-object|protocol-object|icmp-object|service-object)(?=\s)
          scope: keyword.other.interface
        - match: \s(host|eq|range|tcp|udp)(?=\s)
          scope: string.regexp.cisco
        - match: \s(\d*|\w*)(?=\s)
          scope: constant.numeric.cisco
        - include: ipv6_address
        - include: ip_address
        - include: subnet_mask
  prefix_list:
    - match: ^(ip|ipv6)\s(prefix-list)(?=\s)
      captures:
        1: constant.language.cisco
        2: keyword.other.prefix
      push:
        - match: $
          pop: true
        - match: (permit|deny|seq|host|le|gt)\s
          scope: keyword.other.prefix
        - include: ipv6_address
        - include: ip_address
        - include: description
  process:
    - match: ^(process)\s(cpu)
      captures:
        1: constant.language.cisco
        2: keyword.other.process
      push:
        - match: $
          pop: true
        - match: (threshold|type|total|rising|interval|falling|statistics|limit|entry-percentage|size)\s
          scope: keyword.other.process
  qos:
    - match: ^(policy-map|class-map)\s
      captures:
        1: constant.language.cisco
      push:
        - match: ^(!)
          captures:
            1: comment.documentation.cisco
          pop: true
        - match: (match(-any|-all)?|rate|bps|queue-limit|conform-action|exceed-action|transmit|drop|shape|average|service-policy|access-group|class|bandwidth|priority|percent|police|set|ip|dscp|fair-queue|random-detect|dscp-based)\s
          scope: keyword.other.qos
        - match: ^(policy-map|class-map)
          scope: constant.language.cisco
        - include: disable
        - include: description
  radius_server:
    - match: ^(radius server)(?=\s)
      captures:
        1: constant.language.cisco
      push:
        - match: ^(!)
          pop: true
        - match: \s(address|timeout|key|auth-port|acct-port)(?=\s)
          comment: radius server
          scope: keyword.other.logging
        - include: ipv6_address
        - include: ip_address
  redundancy:
    - match: ^(redundancy)
      captures:
        1: constant.language.cisco
      push:
        - match: ^(!)
          captures:
            1: comment.documentation.cisco
          pop: true
        - match: (main-cpu|auto-sync|running-config|mode)\s
          scope: keyword.other.redundancy
        - include: ip_address
  route_distinguisher:
    - match: \b\d+:\d+\b
      scope: constant.character.rd.cisco
  route_map:
    - match: ^(route-map)
      captures:
        1: constant.language.cisco
        2: keyword.other.acl
      push:
        - match: ^(!)
          captures:
            1: comment.documentation.cisco
          pop: true
        - match: \s(permit|deny|match|set|ip|next-hop|as-path|prefix-list|community|local-preference|address|dscp)(?=\s)
          scope: keyword.other.acl
        - match: ^ip
          scope: constant.language.cisco
        - include: ip_address
        - include: subnet_mask
        - include: disable
        - include: description
  router:
    - match: ^(router)(?=\s)
      captures:
        1: constant.language.cisco
      push:
        - match: ^(!)
          captures:
            1: comment.documentation.cisco
          pop: true
        - match: \s(bgp|ospf|isis|rip|eigrp|router-id|password|prefix-list|route-map|soft-reconfiguration|ebgp-multihop|route-reflector-client|next-hop-self|default-originate|in|out|graceful-restart|nsf|default-information|originate|restart-time|metric-type|subnets|stalepath-time|version|ipv4|ipv6|vpnv4|mask|vrf|remote-as|update-source|neighbor|redistribute|auto-summary|activate|send-community|synchronization|log-neighbor-changes|net|area|network|log-adjacency-changes|peer-group|timers)(?=\s)
          scope: keyword.other.archive
        - match: \s(address-family|exit-address-family)(?=\s)
          scope: constant.language.cisco
        - include: ipv6_address
        - include: ip_address
        - include: interface_types
        - include: disable
        - include: description
  service:
    - match: ^(no )*(service)
      captures:
        1: keyword.negative.cisco
        2: constant.language.cisco
      push:
        - meta_scope: keyword.other.service
        - match: .*$
          pop: true
  sip_ua:
    - match: ^(sip-ua)(?=\s)
      captures:
        1: constant.language.cisco
      push:
        - match: ^(!)
          captures:
            1: comment.documentation.cisco
          pop: true
        - match: (authentication|username|password|registrar|expires|sip-server)\s
          scope: keyword.other.voice
        - include: disable
        - include: ipv6_address
        - include: ip_address
  snmp:
    - match: ^(no )?(snmp-server)(?=\s)
      captures:
        1: keyword.negative.cisco
        2: constant.language.cisco
      push:
        - match: $
          pop: true
        - match: \s(community|location|contact|trap-source|chassis-id|ifindex|enable|traps|host)(?=\s)
          scope: keyword.other.snmp
        - include: interface_types
  spanning_tree:
    - match: ^(no )?(spanning-tree)(?=\s)
      captures:
        1: keyword.negative.cisco
        2: constant.language.cisco
      push:
        - match: $
          pop: true
        - match: \s(mode|rapid-pvst|pvst|optimize|bpdu|extend|system-id|transmission)(?=\s)
          scope: keyword.other.stp
  subnet_mask:
    - match: '\s255\.\d{1,3}\.\d{1,3}\.\d{1,3}'
      comment: most common subnet masks
      scope: constant.numeric.cisco
  tacacs:
    - match: ^(tacacs-server)(?=\s)
      captures:
        1: constant.language.cisco
      push:
        - match: $
          pop: true
        - match: (|host|directed-request|key|)\s
          scope: keyword.other.tacacs
        - include: ipv6_address
        - include: ip_address
        - include: description
  telephony_service:
    - match: ^(telephony-service)(?=\s)
      captures:
        1: constant.language.cisco
      push:
        - match: ^(!)
          captures:
            1: comment.documentation.cisco
          pop: true
        - match: (auto-reg-ephone|load|max-ephones|max-dn|ip|source-address|timeouts|interdigit|system|message|url|services|authentication|time-zone|cnf-file(s)*|version-stamp|port|strict-match|location|voicemail|max-conferences|call-forward|pattern|moh|web|admin|system|name|dn-webedit|time-webedit|transfer-system|password|secondary-dialtone|create)\s
          scope: keyword.other.voice
        - include: disable
        - include: ipv6_address
        - include: ip_address
  username:
    - match: ^(username|user)\s
      captures:
        1: constant.language.cisco
      push:
        - match: $
          pop: true
        - match: (secret|privilege|password)\s
          scope: keyword.other.clock
  version:
    - match: ^(version)
      captures:
        1: constant.language.cisco
      push:
        - match: (.*$)
          captures:
            1: entity.numeric.version.cisco
          pop: true
  vlan:
    - match: ^(no )?(vlan)(?=\s)
      captures:
        1: keyword.negative.cisco
        2: constant.language.cisco
      push:
        - match: $
          pop: true
        - match: \s(internal|allocation|policy|access-log|ratelimit)(?=\s)
          scope: keyword.other.stp
  voice_card:
    - match: ^(voice-card)(?=\s)
      captures:
        1: constant.language.cisco
      push:
        - match: ^(!)
          captures:
            1: comment.documentation.cisco
          pop: true
        - match: (dspfarm)\s
          scope: keyword.other.voice
        - include: disable
  voice_service:
    - match: ^(voice )(service)(?=\s)
      captures:
        1: constant.language.cisco
        2: keyword.other.voice
      push:
        - match: ^(!)
          captures:
            1: comment.documentation.cisco
          pop: true
        - match: (allow-connections|voip|supplementary-service|refer|moved-temporarily|h323|sip)\s
          scope: keyword.other.voice
        - include: disable
  voice_tprofile:
    - match: ^(voice )(translation-profile)(?=\s)
      captures:
        1: constant.language.cisco
        2: keyword.other.voice
      push:
        - match: ^(!)
          captures:
            1: comment.documentation.cisco
          pop: true
        - match: (translate|called)\s
          scope: keyword.other.voice
        - include: disable
  voice_trule:
    - match: ^(voice )(translation-rule)(?=\s)
      captures:
        1: constant.language.cisco
        2: keyword.other.voice
      push:
        - match: ^(!)
          captures:
            1: comment.documentation.cisco
          pop: true
        - match: (rule)\s
          scope: keyword.other.voice
        - include: disable
  vpdn:
    - match: ^(no )?(vpdn)(?=\s)
      captures:
        1: keyword.negative.cisco
        2: constant.language.cisco
      push:
        - match: $
          pop: true
        - match: \s(enable|multihop|source-ip|logging|search-order|domain-delimiter)(?=\s)
          comment: vpdn
          scope: keyword.other.logging
  vpdn_group:
    - match: ^(vpdn-group)(?=\s)
      captures:
        1: constant.language.cisco
      push:
        - match: ^(!)
          pop: true
        - match: \s(accept-dialin|session-limit|source-ip|local name|vpn|lcp|l2tp|ip)(?=\s)
          comment: radius server
          scope: keyword.other.logging
        - include: ipv6_address
        - include: ip_address
        - include: description
  vtp:
    - match: ^(no )?(vtp)(?=\s)
      captures:
        1: keyword.negative.cisco
        2: constant.language.cisco
      push:
        - match: $
          pop: true
        - match: \s(mode|transparent|server|client|off|password|pruning|version|domain)(?=\s)
          scope: keyword.other.logging
  wildcard_mask:
    - match: '\s0\.\d{1,3}\.\d{1,3}\.\d{1,3}[/\d{1,2}]*'
      comment: most common wildcard masks
      scope: string.regexp.cisco
