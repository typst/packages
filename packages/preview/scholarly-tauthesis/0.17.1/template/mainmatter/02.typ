/** 02.typ
 *
 * This is an example chapter in a multi-file Typst project.
 *
***/

#pdf.attach(
  "02.typ",
  relationship: "source",
  mime-type: "text/vnd.typst",
  description: "The Typst source code for the writing instructions chapter 2 of this thesis.",
)

#import "../preamble.typ": *
#import "@preview/scholarly-tauthesis:0.17.1" as tauthesis

= Writing practices <writing-practices>

Effective written communication requires both sound content and clear style.
Keep the layout of your thesis neat and pay attention to your writing style.

== Text <text>

Do not worry about the layout of the text, this template
takes care of it already. Brief basics of writing style:

- Always think of your reader when you are writing and
  proceed logically from general to specific.

- Highlight your key points, for example, by discussing
  them in a separate section or subsection, or presenting
  them in a table or figure. Use _italics_ (`_text_`) for
  emphasis, but donâ€™t overdo it.

- Avoid long sentences and complicated statements. A full
  stop is the best way to end a sentence.

- Use active verbs to make a dynamic impression but avoid
  the first person pronoun I, except in your preface.

- Avoid jargon and wordiness. Use established terminology
  and neutral language.

- The minimum length of sections and subsections is two
  paragraphs, and you need to consider the balance of
  chapters. Paragraphs must always consist of more than
  one sentence.

- Do not use more than three levels of numbered headings,
  such as
  #math.equation(
      alt: "4.4.2",
      $4.4.2$
  ).
  However, keep in mind that
  #math.equation(
    alt: "3",
    $3$
  )
  different levels of
  sections is already a bit much.

- Do not use too many abbreviations. Use capital and
  small letters consistently. You might wish to define new
  commands in the `preamble.typ` file, for words you do not
  wish to misspell. For example, the `preamble.typ` file
  defines the command `#eeg`, which is typeset as #eeg.

Your text will also look better if you do not extensively
rely on lists such as the above one. Ideally, a list should
not end a section either, which is why this paragraph is
here.

== Images <figures>

You must refer to all the images in the body text. The
reference should preferably appear on the same page as
the actual image or before it. Images and tables must be
numbered consistently and primarily placed at the top of
the page, but you are free to decide where they fit best.

=== Images in Typst <sec-images-in-typst>

Typst takes care of the numbering, if you specify a unique
label `<label-name>` right after the a image or a table.
Cross-referencing is done by prefixing the identifier
inside the angle brackets with a `@` symbol: `@label-name`.
For example, the code
```typst
#figure(
    image(
        "../images/tau-logo-fin-eng.svg",
        alt: "Tampere University logo with a human face formed from geometric shapes on the left and the university name on the right.",
        width: 80%
    ),
    caption: [Tampere University logo.],
) <tau-logo>
```
is rendered as seen in @tau-logo.
#figure(
    image(
        "../images/tau-logo-fin-eng.svg",
        alt: "Tampere University logo with a human face formed from geometric shapes on the left and the university name on the right.",
        width: 80%
    ),
    caption: [Tampere University logo. @tau-logo-image],
) <tau-logo>

Never start or end a chapter with a image, table,
equation or list. The caption is placed under an image.
The contents of all images must be explained in the text
body, so that the readers know what they are supposed
to notice. Images generated by analysis software usually
need further editing. The figures should be in the same
language as other text. The recommended font size is
the same as that of the body text, #unitful(11, "pt",
alt: "11 pt"). All images must be readable, even if your
thesis is printed in greyscale. Whenever possible, use
images in vector formats such as `.svg`, as they can be
scaled without loss of quality. Also note that as of Typst
version #version(0,14,0), including PDF files as images
should work natively. However, see the below accessibility
considerations for why this might not work for your thesis.

=== Accessibility of images <sec-accessibility-of-images>

All images produced via the`image` @typst-image-function
function (or otherwise) _must_ contain so-called
_alternative texts_~@typst-accessibility-guide, provided
via the named argument `alt` . These *must* be provided
for your thesis to remain accessible. Even if an `image`
is inside of a captioned `figure`~@typst-figure-function,
an alternative text is still needed. The alternative text
also needs to be more descriptive than the figure caption,
because an alternative text is the only indication of
what goes on in an image for people relying on assistive
technologies. You can see an example of these principles
being applied in @tau-logo.

Also note that since most PDF files produced
programmatically do not contain tags, and Typst has no
way of automatically deducing what the tags should have
been like, including PDF images does not work with the
accessible PDF standards such as PDF/UA-1, PDF/A-3a
and others. You should therefore prefer SVG images when
inserting vector graphics into your thesis.

== Tables <tables>

Tables are convenient for presenting information in
a concise way, especially numerical data. Tables have
numbered captions, see @tab-evaporation-conditions for an
example. The caption is placed on the same page but above
the table, unlike the captions that accompany images. You
must refer to all the tables in the body text. In addition,
you must discuss the content of any tables in the body text
to ensure that readers understand their relevance.

Mark the titles of the columns and units clearly. You
can use underscores `_emph_` to highlight the titles,
if necessary. The order of the columns and rows must be
carefully considered. Ideally, all cells should _not_ be
surrounded with a border, as it may make your table harder
to read. The numbers should be aligned at the decimal point
for easy comparison. You should preferably use SI units,
established prefixes and rewrite large numbers so that the
power of ten should be placed in the title of the column
instead of each row, if possible. More suggestions can be
found in @pubadvice2009.

=== Tables in Typst <sec-tables-in-typst>

To actually draw a table that can be referenced, we issue a
```typst #figure``` call with a `table` as its argument:
```typst
#import table: cell, header, hline, vline
#[
    #show table.cell.where(y: 0): strong
    #figure(
        table(
            columns: 5,
            stroke: none,
            align: center + horizon,
            table.header(
                [Substance],
                table.vline(),
                [Pressure (#unit(pascal))],
                table.vline(),
                [Pressure (#unit(bar))],
                table.vline(),
                [Pressure (#unit(mmHg))],
                table.vline(),
                [Temprature (#celsius)]
            ),
            table.hline(),
            [Mercury],
            num(1.0),
            num(0.0001),
            num(0.0075),
            num(41.85),
            [Tungsten],
            num(1.0),
            num(0.0001),
            num(0.0075),
            num(3203),
        ),
        caption: [Vapour pressures of two metals. @wikipedia-vapor-pressure],
    ) <tab-evaporation-conditions>
]
```
The added ```typst #[...]``` around the whole figure
restricts the scope of the show rule that boldens the
header to this table. This results in
@tab-evaporation-conditions being displayed.
#[
    #import table: cell, header, hline, vline
    #show table.cell.where(y: 0): strong
    #figure(
        table(
            columns: 5,
            stroke: none,
            align: center + horizon,
            table.header(
                [Substance],
                table.vline(),
                [Pressure (#unit(pascal))],
                table.vline(),
                [Pressure (#unit(bar))],
                table.vline(),
                [Pressure (#unit(mmHg))],
                table.vline(),
                [Temprature (#celsius)]
            ),
            table.hline(),
            [Mercury],
            num(1.0),
            num(0.0001),
            num(0.0075),
            num(41.85),
            [Tungsten],
            num(1.0),
            num(0.0001),
            num(0.0075),
            num(3203),
        ),
        caption: [Vapour pressures of two metals. @wikipedia-vapor-pressure],
    ) <tab-evaporation-conditions>
]

A table should not end a section. That is why after every
table we state some observations about the table. Here
we notice that mercury and tungsten have identical vapour
pressures, but at very different tempratures.

=== Accessibility of tables <sec-accessibility-of-tables>

Tables do not need alternative texts, not even
if you export your document using the PDF/UA-1 standard.
Screen readers will read the table in the order in
which your table cells were given in Typst source code. It
is also important to properly use the `table.header`
and `table.footer` for accessibility tags to be applied
properly.

The example table shows how to typeset a table in the
usual _row-major_ order, where the displayed order in the
code is the same as it is in the final PDF file. There
are situations, such as when a table takes too much space
horizontally, where you might wish to _transpose_ a table
in the PDF output, so the output is in _column-major_
order. Typst does not currently support this in tables
that aim to be semantically correct, as table headers and
footers constructed with `table.{header,footer}` are always
typeset horizontally, and `table.cell` show rules currently
(as of #datetime(day: 9, month: 10, year: 2025).display())
do not have access to the `x` and `y` positions of each
cell.

Also note that accessible tables should be
_regular_~@saavutettavasti-pdf: every row of a table
should contain an equal number of columns or cells. In
other words, table cells spanning multiple columns or
rows are heavily discouraged. For the more mathematically
oriented, it could be said that tables should only be used
to represent _relations_. @tab-evaporation-conditions is an
example of such a regular table.

If your table is getting very wide, consider
simply scaling it to the page width using the
#link("https://typst.app/docs/reference/layout/scale/")[`scale`]
function. Note however that this will make the table
contents tiny, and less accessible to people who do not
see well, but still do not rely on screen readers. Rotating
tables by
#math.equation(
    alt: "90 degree",
    $90 degree$
)
using the
#link("https://typst.app/docs/reference/layout/rotate/")[`rotate`]
function is also possible.

== Mathematical notations and equations <equations>

Numbers are generally written using numerals for the
sake of clarity, for example #quote[6 stages] rather
than #quote[six stages], which is nevertheless strongly
preferred to #quote[a couple of stages]. You should also
use a thousand separator, i.e. instead of
#math.equation(
    alt: "55700125",
    $55700125$
)
write #num(55700125). Never omit the leading zero
in decimals. A comma is used as a decimal separator
in the Finnish language and a period in the English
language. You might wish to use the Typst library
#link("https://typst.app/universe/package/zero/")[*zero*]
for typesetting numbers, even if the file `preamble.typ`
does provide a rudimentary function `num` for grouping
number digits.

Like numbers, it is advisable to abbreviate units of
measurement. There is a space between the number and the
unit, but you must keep them on the same line. The space is
somewhat shorter than a word space, see 1 #math.equation(
    alt: "mu",
    $mu$
)m
and #unitful(1.0, micro + meter, alt: "1.0 micro meter")
for comparison. It is better to compile a table or graph
than include a great deal of numerical values in the body
text. Use precise language and put numbers on a scale
(small, fast, expensive).

Use generally known and well defined concepts and standard
conventions and symbols for representing them. New
concepts should be defined when they appear in the text
for the first time. Upper case and lower case letters mean
different things in symbols and units of measurement. Do
not use the same symbol to mean different things, but note
that different styles applied over the same symbol are
accepted: if
#math.equation(
    alt: "vector(x)",
    $vector(x)$
)
is a position vector, then the scalar
#math.equation(
    alt: "x = norm(vector(x))",
    $x = norm(vector(x))$
)
could be used to denote its norm. If the position is a
random variable, then one could use yet another style such
as fraktur form
#math.equation(
    alt: "randomVec(x)",
    $randomVec(x)$
)
of
#math.equation(
    alt: "vector(x)",
    $vector(x)$
)
to eccentuate this fact.

=== Mathematics in Typst <sec-mathematics-in-typst>

Strings of mathematical symbols such as
#math.equation(
    alt: "Theta(n squared)",
    $Theta(n^2)$
)
are typeset in Typst using the math mode, between dollar
signs: ```typst $math$``` for inline mathematics or
```typst
$
    math
$
```
with whitespace surrounding the contents for display math.
Simple formulas may be displayed within the body of the
text without numbering. As an example of a highlighted
formula, the Fundamental theorem of calculus can be written
in the following way:
#math.equation(
    block: true,
    alt: altTextFn("
        integral_[a,b]
        f(x)
        dif x
        =
        F(b) - F(a)
        .
    "),
    $
        integral_[a,b]
        f(x)
        dif x
        =
        F(b) - F(a)
        thin .
    $
) <fundamental-theorem-of-calculus>
Here
#math.equation(
    alt: "f",
    $f$
)
is the _integrand_,
#math.equation(
    alt: "F",
    $F$
)
its _anti-derivative_ and
#math.equation(
    alt: "[a,b]",
    $[a,b]$
)
the integration interval. Please note that all the
variables must be defined at the point of their first
appearance. The formulae are shown in a different typeface
on purpose and the symbols are almost always italicised.
Vectors can be written in slanted or upright boldface, or
with arrows:
#math.equation(
    block: true,
    alt: altTextFn("
        bold(v)
        =
        derivative(bold(x), t)
        ,
        upright(bold(v))
        =
        derivative(upright(bold(x)), t)
        ,
        arrow(v)
        =
        derivative(arrow(x),t)
    "),
    $
        bold(v)
        &=
        derivative(bold(x), t)
        \
        upright(bold(v))
        &=
        derivative(upright(bold(x)), t)
        \
        arrow(v)
        &=
        derivative(arrow(x),t)
    $
)
The most important thing is to be consistent throughout
your thesis. Do not mix and match notations, as it will
confuse the reader.  See the file `preamble.typ` for an
example of how you might define a `#vector` command for
typesetting vectors consistently. Defining a command also
allows you to easily switch notations globally, if you are
not satisfied with your current choice.

Units are written in an upright font with a normal weight,
to distinquish them from variables:
#math.equation(
    block: true,
    alt: altTextFn("
        norm(force)
        =
        mass norm(acceleration)
        =
        unitful(10.0, #kilo#gram)
        dot
        unitful(9.81, #meter/#second^2)
        =
        unitful(98.1, #newton)
        .
    "),
    $
        norm(force)
        &=
        mass norm(acceleration)
        =
        unitful(10.0, #kilo#gram)
        dot
        unitful(9.81, #meter/#second^2)
        =
        unitful(98.1, #newton)
        thin .
    $
)
<eq-newtons-law>
Here #force is a force vector, #mass is the mass of the
object experiencing the force, and #acceleration is its
acceleration vector. Again, see the `preamble.typ` file for
how you might define commands for units.

Mathematical formulae are numbered, if they are written
on separate lines and referred to in the main body of
the text. The number is usually put in parenthesis and
right aligned, see @fundamental-theorem-of-calculus
for an example. If you wish to leave out the number
from a highlighted equation, wrap it into the function
`math.equation` with the named arguments `numbering: none`
and `block: true`:
```typst
#math.equation(
    numbering: none,
    block: true,
    alt: "force = mass acceleration .",
    $force = mass acceleration thin .$
)
```
This results in the unnumbered block-level equation
#math.equation(
    numbering: none,
    block: true,
    alt: "force = mass acceleration .",
    $force = mass acceleration thin .$
)

Include any punctuation (commas, periods, ...) surrounding
an equation in the equations themselves, as is again
shown in @fundamental-theorem-of-calculus. The command
`thin`, which in mathematics mode is a shorthand for
`sym.space.thin`, can be used to insert just a little
extra space between elements such as the math itself
and punctuation, which is a good readability-increasing
practice. The added visual space is not relevant for the
alternative text of the equation, though, so `thin` should
be removed from it, as is shown above.

Do not start a sentence with a mathematical symbol but add
some word, such as the name or type of the symbol in front
of it. Variables, such as
#math.equation(
    alt: "x",
    $x$
)
and
#math.equation(
    alt: "y",
    $y$
),
are generally presented in italics, whereas elementary
functions, special functions and multi-letter operators
are not:
#math.equation(
    block: true,
    alt: altTextFn("
        sin(2x + y)
        or
        lim_(x arrow.r -1)
        (x^2 - 1) / (x + 1)
        =
        -2
        .
    "),
    $
        sin(2x + y)
        "  or  "
        lim_(x arrow.r -1)
        (x^2 - 1) / (x + 1)
        =
        -2
        thin .
    $
) <lim-example>
As a rule of thumb, it is best to rely on the automated
formatting of an equation editor, such as the one provided
by Typst.

Vectors and matrices are written with the `vec` and `mat`
functions:
#let matA = $matrix(A)$
#let vecx = $vector(x)$
#let vecb = $vector(b)$
#math.equation(
    block: true,
    alt: altTextFn("
        matrix(A)
        vector(x)
        =
        mat(
            A_(1,1), A_(1,2) ;
            A_(2,1), A_(2,2) ;
        )
        vec(x_1,x_2)
        =
        vec(b_1,b_2)
        =
        vector(b)
        .
    "),
    $
        matrix(A)
        vector(x)
        =
        mat(
            matA_(1,1), matA_(1,2) ;
            matA_(2,1), matA_(2,2) ;
        )
        vec(vecx_1,vecx_2)
        =
        vec(vecb_1,vecb_2)
        =
        vector(b)
        thin .
    $
)
See the Typst documentation on mathematics @typst-math for
examples of how different symbols are written.

=== Accessibility of mathematics <sec-accessibility-of-mathematics>

If you have been reading the source code of the PDF file
of this example template, you might have noticed that in
addition to the math mode dollar signs ```typst $math$```
and
```typst
$
    math
$
```
the template has explicitly been using the Typst function
`math.equation` @typst-equation to include mathematics
into a document. This is because the function allows one
to provide an _alternative text_ for each equation, as is
required by the PDF accessibility standards. This is done
via the alternative text argument `alt` of the function:
```typst
#math.equation(
    alt: "Alternative text here",
    $equation here$
)
```

You might have noticed that the alternative texts in the
example mainly use the Typst source code as the alternative
text representation. *Note that this is only acceptable,
if your equation source code carries the semantics of the
displayed equation with it.*  Note the difference between
the _completely unacceptable_
```typst
#math.equation(
    alt: "f = m a",
    $vector(f) = m vector(a)$
)
```
the slightly better option
```typst
#math.equation(
    alt: "vector(f) = m vector(a)",
    $vector(f) = m vector(a)$
)
```
and finally the most descriptive one, where the commands
`force`, `mass` and `acceleration` have been defined in
the file `preamble.typ`:
```typst
#math.equation(
    alt: "force = mass acceleration",
    $force = mass acceleration$
)
```
Remember that in equation @eq-newtons-law the text styles
(bold versus normal weight) were used to differentiate
between scalars and vectors. Force and acceleration are
implicitly vectors, and mass is implicitly a scalar. Having
the alternative text mention what the actual quantities
are instead of using just letters makes the intention
clearer. It also allows you to copy and paste the source
code into the alternative text without any modifications.

You might also wish to use the function `altTextFn`
provided in `preamble.typ` to clean up extra whitespace
from your alt texts, if you wish to write them on multiple
lines. Indentation and added space are not automatically
trimmed from alt texts by Typst.

== Programs and algorithms <algorithms>

Codes and algorithms are written using a monospaced font.
If the length of the code or algorithm is less than 10
lines and you do not refer to it later on in the text, you
can present it similarly to formulas. If the code is longer
but shorter than a page, you present like a figure titled
#quote[Listing] or #quote[Algorithm]. In Typst, code blocks
are presented in backticks:
``````typst
```typst
#figure(
    raw(
        read("../code/square.jl"),
        lang: "julia",
        block : true
    ),
    caption: [
        The square of
        #math.equation(
            alt: "x in real numbers",
            $x in bb(R)$
        )
        and
        #math.equation(
            alt: "x in complex numbers",
            $x in bb(C)$
        ),
        written in Julia @Bezanson2017Julia.
    ],
) <program-example>
```
``````
The above results in what is seen in @program-example-example.

#figure(
    ```typst
#figure(
    raw(
        read("../code/square.jl"),
        lang: "julia",
        block : true
    ),
    caption: [
        The square of
        #math.equation(
            alt: "x in real numbers",
            $x in bb(R)$
        )
        and
        #math.equation(
            alt: "x in complex numbers",
            $x in bb(C)$
        ),
        written in Julia @Bezanson2017Julia.
    ],
) <program-example>
    ```,
    caption: [ A code block.],
) <program-example-example>

Removing the backticks would actually load code from the
file `code/square.jl` to be displayed in the numbered
@program-example. The listing demonstrates how multiple
dispatch allows you to define methods for functions with
different argument types in the Julia programming language.

#figure(
    raw(
        read("../code/square.jl"),
        lang: "julia",
        block : true
    ),
    caption: [
        The square of
        #math.equation(
            alt: "x in real numbers",
            $x in bb(R)$
        )
        and
        #math.equation(
            alt: "x in complex numbers",
            $x in bb(C)$
        ),
        written in Julia @Bezanson2017Julia.
    ],
) <program-example>

Again, listings should not end sections. You should always
describe what is going on in the displayed code after
presenting a listing.


== Theorem blocks <theorems>

@pythagorean-theorem and @pythagoraan-lause show examples
of theorem blocks:

#tauthesis.example(
    title: [Pythagorean theorem],
    reflabel: "pythagorean-theorem",
    alt: "Pythagorean theorem: for sides a, b and c of a right triangle, where c is the hypotenuse, the equation a ^ 2 + b ^ 2 = c ^ 2 holds."
)[
    For sides
    #math.equation(
        alt: "a",
        $a$
    ),
    #math.equation(
        alt: "b",
        $b$
    )
    and
    #math.equation(
        alt: "c",
        $c$
    )
    of a right triangle, where
    #math.equation(
        alt: "c",
        $c$
    )
    is the _hypotenuse_, the following equality holds:
    #math.equation(
        alt: "
            a^2 + b^2 = c^2 .
        ",
        $
            a^2 + b^2 = c^2 thin .
        $
    )
]

#tauthesis.proof[
    Proof goes here.
]

#tauthesis.esimerkki(
    title: [Pythagoraan lause],
    reflabel: "pythagoraan-lause",
    alt: "Pythagoraan lause: suorakulmaisen kolmion sivut a, b ja c, missÃ¤ c on hypotenuusa, toteuttavat yhtÃ¤lÃ¶n a ^ 2 + b ^ 2 = c ^ 2.",
)[
    Suorakulmaisen kolmion sivut
    #math.equation(
        alt: "a",
        $a$
    ),
    #math.equation(
        alt: "b",
        $b$
    )
    ja
    #math.equation(
        alt: "c",
        $c$
    ),
    missÃ¤
    #math.equation(
        alt: "c",
        $c$
    )
    on _hypotenuusa_, toteuttavat yhtÃ¤lÃ¶n
    #math.equation(
        alt: "
            a^2 + b^2 = c^2 .
        ",
        $
            a^2 + b^2 = c^2 thin .
        $
    )
]

#tauthesis.todistus[
    Todistus tulee tÃ¤hÃ¤n.
]

As one can see, these follow the same counter. The theorem
box has been typeset with the command
```typst
#tauthesis.example(
    title: [Pythagorean theorem],
    reflabel: "pythagorean-theorem",
    alt: "Pythagorean theorem a ^ 2 + b ^ 2 = c ^ 2, where c is the hypotenuse of a right triangle."
)[
    For sides
    #math.equation(
        alt: "a",
        $a$
    ),
    #math.equation(
        alt: "b",
        $b$
    )
    and
    #math.equation(
        alt: "c",
        $c$
    ),
    where
    #math.equation(
        alt: "c",
        $c$
    )
    is the _hypotenuse_, the following equality holds:
    #math.equation(
        alt: altTextFn("
            a^2 + b^2 = c^2 .
        "),
        $
            a^2 + b^2 = c^2 thin .
        $
    )
]
```
Notice that the reference label is not placed after the
function call via the ```typst <pythagorean-theorem>```
syntax, but given as a named argument to the function via
the named argument `reflabel`. Additionally, since numbered
items placed into a document are all figures of one type
or another, they require an alternative text as per the
Universal Access standard, given via the named argument
`alt`.

The module `tauthesis` defines the theorem box functions
- `definition`,
- `theorem`,
- `lemma`,
- `corollary` and
- `example`,
and their Finnish equivalents
- `mÃ¤Ã¤ritelmÃ¤`,
- `lause`,
- `apulause`,
- `seurauslause` and
- `esimerkki`.
These all follow the same counter, and can all be
referenced by suffixing the equivalent function call with
a tag.

Try not to overuse these, however. Academic theses should
_not_ be written in the _Landau style_, where the entire
text consists of definitions after definitions and theorems
after theorems. There should always be a full paragraph
between two theorems or other objects, such as figures
and tables.

== Accessibility considerations <section-accessibility>

In accordance with the European Union directive
2016/2102 @eu-accessibility-directive, Finnish law
@finnish-digital-accessibility-law requires that all
electronic publications of public sector bodies be made
_accessible_, as long as doing so would not require an
infeasible amount of work. This also applies to academic
theses published by universities, including yours
@tuni-lib-hyva-tietaa. For this reason you should be
aware of the requirements related to accessible electronic
documents. Some of these considerations are described
below. These are also discussed in the Typst accessibility
guide @typst-accessibility-guide.

*Use of language:* Use simple and descriptive language.
Avoid overtly long sentences. Any truly essential
information should be delivered in words and not by visual
means.

*Figures:* As per the point above, any figures
in the document should have some kind of a
textual alternative available. Ideally so called
_alternative texts_~@helsinki-saavutettavuusmalli
@saavutettavasti-vaihtoehtoiset-tekstit
@tuni-intra-image-accessibility (which are not the
same thing as figure captions) should be included
into a document. However, if this is not feasible
due to current technological limitations, one should
at least try to describe what is happening in each
image or table in the body text as well as they can.
The Typst functions `image`~@typst-image-function and
`figure`~@typst-figure-function accept the named argument
`alt`, which allows you to provide an alternative text for
an included image.

*Document metadata:* This should be as complete as
possible. However, the most essential metadata fields are
the _title_ of the work, and the _main language_ the work
was written in. This is relevant from the point of view
of assistive software like screen readers, that visually
impaired consumers of a document might be relying on. Also,
resources such as the fonts intended to be used with a
document should be embedded into the document itself.

*Mathematics:* As professor Antti Valmari previously
of Tampere University of Technology fame once said
in a conversation with one of the maintainers of this
template, #quote[Mathematicians have an inexplicable
urge to put things on top of each other.]. From the
point of view of accessibility of PDF files, this is
a terrible practice, so long as the document format
does not include either structural information related
to the semantics of the visual presentation within it,
or alternative texts that screen reader sofware can
access. This is because classically PDF is a format
where graphical elements are essentially drawn on a
canvas with #box(math.equation(alt:"x", $x$) + "-") and
#math.equation(alt:"y", $y$)-coordinates, which becomes
apparent if one tries to copy and paste the following
fractions from the output PDF file of this template:
#math.equation(
    block: true,
    alt: "a div b, a slash b, frac(a,b) and a b ^ (-1) .",
    $
        a div b
        thin ,
        quad
        a slash b
        thin ,
        quad
        frac(a,b)
        quad
        "and"
        quad
        a b ^ (-1)
        thin .
    $
)

Depending on your PDF reader implementation, it might be
that with the vertically stacked fraction
#math.equation(
    alt: "frac(a,b)",
    $a / b$
),
the numerator
#math.equation(
    alt: "a",
    $a$
)
ends up on the previous line, since it is vertically above
the line where the fraction itself resides, and reading
order is based on the coordinates (elements higher and more
to the left come first). Alternatively, it might be that
the stacked fraction is handled as a whole, but since the
horizontal fraction line separating the numerator
#math.equation(
    alt: "a",
    $a$
)
and denominator
#math.equation(
    alt: "b",
    $b$
)
is implemented as a graphical element, which does not have
a textual representation in the PDF model, the line will be
lost, and you get something like
#math.equation(
    alt: "a thin b",
    $a thin b$
)
as the output. This is semantically the complete opposite
(or inverse) of the indended meaning of the fraction
denominator!

The denominator
#math.equation(
    alt: "1 div b",
    $1 div b$
)
expressed with a negative exponent
#math.equation(
    alt: "b^(-1)",
    $b^(-1)$
)
is just as problematic, since upper and lower indices also
don't generally have a proper textual representation in
Unicode. When copying and  pasting such an expression, you
might end up with something like
#math.equation(
    alt: "a b - 1",
    $a b - 1$
)
in the textual output. This also completely changes the
semantics of the output expression.

As of October 2025, neither Typst or LaTeX currently
support automated creation of so-called _well-tagged
PDF files_~@pdf-association-wtpdf, which are
documents carrying structural information similar to
HTML tags. Typst will start introducing support for
automatically producing tagged PDF files starting
from version #version(0,14,0)~@typst-roadmap
@typst-accessibility-issue-133. LaTeX has some experimental
support for producing tagged PDFs starting from TeX
Live 2024~@latex-tagging-examples, but it requires
intervention from the user of the language, such as
manually inserting LaTeX commands to generate said
tags. Another issue with well-tagged PDFs is that many
PDF readers still do not support the standard. While we
wait for the related technology such as the embedding of
MathML @pdf-association-wtpdf @mozilla-mathml into PDF
files to catch up, there are some simple things you can do
to make your thesis more accessible.

=== Add alternative texts or other structure to your equations <sec-add-alt-texts>

The importance of this was explained in
@sec-accessibility-of-mathematics[Section]. Typst
version #version(0,14,0) supports adding alternative
texts to equations through the function `math.equation`
@typst-equation named argument `alt`. In future versions
on Typst, it is also intended to support the PDF/UA-2
standard, which would allow automatically embedding
structural information in the form of MathML into a PDF
document. This would remove the need for alternative texts
in the case of equations.

#import "../brakets.typ": braket

Another means of keeping text accessible is to keep
the flow of the text as horizontal as possible, which
might allow text extraction programs such as `pdftotext`
@pdftotext-debian-manpage, which also operate on the
coordinate system basis, to extract the text in a
correct reading order. Paul Dirac did a similar thing
with his bra--ket notation for linear algebra products.
This enabled him to write mathematics with a normal
chevron-equipped typewriter, without access to special
symbols such as  greek letters, upper and lower indices
and integrals. Especially, it simplified writing long
subindex labels related to linear operators such as
integrals~@dirac-new-notation:
#math.equation(
    block: true,
    alt: altTextFn("
        braket(i,j)
        :=
        integral
            complexConjugate(phi_i)
            psi_j
        dif x
        .
    "),
    $
        braket(i,j)
        &:=
        integral
            complexConjugate(phi_i)
            psi_j
        dif x
        thin .
    $
)
Here
#math.equation(alt: "phi", $phi$)
and
#math.equation(alt: "psi",$psi$)
denote wave functions, and the left-associative unary
operator
#math.equation(alt: "complexConjugate(a)", $complexConjugate(a)$)
denotes the complex conjugate of its argument
#math.equation(alt:"a",$a$).
However, inventing your own notations should be done
sparingly, since this is against the guideline of sticking
to well-established notations. Inventing custom notations
also carries with it the burden of having to explain
yourself more.

=== Convert your final submission to PDF/UA-1 format <sec-convert-submission-to-pdfa>

If you are using Typst version â‰¥ #version(0,14,0) locally
via a command line, it is possible to produce a thesis into
a tagged PDF/UA-1 format via the command
```sh
typst compile --pdf-standard ua-1 main.typ
```
If the file was generated correctly according to the
PDF/UA-1 standard, it should contain accessibility tags.
There are not many free tools that can actually visualize
these tags for non-visually-impaired people, but the
friendly people of the LaTeX Project have an online
tool #link("https://texlive.net/showtags")[showtags]
@texlive-showtags that you might use for this purpose.
For the Microsoft Windows#sym.trademark.registered
platform, there also exists the tool
#link("https://pac.pdf-accessibility.org/")[PAC]
@axes4-pac-software or _PDF Accessibility Checker_. The
PDF Association has also published a list of other tools
that might be used to check PDF files for accessibility
@pdf-association-accessibility-checkers. Before using
either of these, run your thesis through the PDF
validator #link("https://verapdf.org/home/")[veraPDF]
@verapdf.

The standard also allows you to embed arbitrary files
into your PDF file, using Typst's PDF module function
`pdf.attach`~@typst-documentation-attach, and adds
accessibility tags to the document. As discussed below,
Typst compilers before version #version(0,14,0) cannot yet
produce truly accessible documents, so including the source
code of your thesis chapters as plain text provides an
alternative means of accessing your thesis. This template
has tried to demonstrate how this can be performed at
the beginning of each front- and main matter file, and
in the example appendices. If you are using the Typst Web
application, simply choose PDF/UA-1 as the output format in
the file export menu.

*Note:* if you are unable to produce an accessible version
of your thesis according to these PDF accessibility
checkers, you should attach the source code of the thesis
in a sensible reading order to the Trepo submission! This
template shows examples of embedding the source code into
the PDF file itself, but note that a separate
#link("https://en.wikipedia.org/wiki/ZIP_(file_format)")[ZIP archive]
is the best format for the source code submission.
Visually impaired people might not be able to extract the
attachments from a PDF file, but a separate ZIP archive can
be opened easily on any system.

=== Compilation dissertations and PDF attachments <sec-compilation-dissertation-accessibility>

If you are writing an accessible compilation dissertation
and wish to include scientific articles as attachments
to your document #footnote[Including publications is
not actually required for compilation PhD dissertations.
Only referring to the publications via full bibliographic
information is actually required.], you might need to do
it in post production. Typst can include PDF files via
the `image` function, but most publishers at this point do
not care about accessibility that much, and therefore the
PDFs downloaded from their websites often do not contain
accessibility tags.

The PDF renderer in the Typst compiler cannot handle
this lack of accessibilty tags automatically, as there
is practically no means of automatically deducing
what the tag structure should have been in such a
document. Therefore Typst does not support exporting
documents in accessible PDF formats, if you attempt
to import PDF images into your thesis. However, see
@sec-inserting-phd-publications[Section] for how you might
still do this, to at least preview what your final product
might look like.

#import "../metadata.typ" as meta

Note that if you published your work via _open access
publishing channels_~@tuni-open-access-publishing-guide
with a permissive license~@tuni-lib-cc-ohjeet, you can
create a _derivative work_ of your publication, such
as an accessible Typst version of it, and attach that
to your dissertation instead. However, also note that
you should still refer to the peer-reviewed versions
of your publications in the bibliography and on the
attached publication title pages, such as is done in this
template for
#if tauthesis.thesisTypeToIntFn(meta.thesisType) >= tauthesis.licentiateThesisTypeInt and meta.compilationThesis and meta.attachPublications [
    @tauthesis-publication-anchor-1[Publication],
    @tauthesis-publication-anchor-2[Publication] and
    @tauthesis-publication-anchor-3[Publication].
] else [
    the attached example publications (if the selected
    thesis type is "high" enough.)
]
